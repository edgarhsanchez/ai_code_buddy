name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Release
      id: create_release
      uses: actions/github-script@v7
      with:
        script: |
          const tag = context.ref.replace("refs/tags/", "");
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tag,
            name: `Release ${tag}`,
            draft: false,
            prerelease: false,
            generate_release_notes: true
          });
          return release.data.id;

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: [self-hosted, macOS, ARM64]
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            asset_name: ai-code-buddy-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies (macOS)
      run: |
        # Check if Homebrew is available, install if needed
        if ! command -v brew &> /dev/null; then
          echo "Homebrew not found, installing..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install OpenSSL
        brew install openssl@3
        echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
        echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/cache
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      shell: bash
      run: |
        echo "Building for target: ${{ matrix.target }}"
        echo "Runner architecture: $(uname -m)"
        
        # Set required ARM64 features for ring crate compatibility
        export RUSTFLAGS="-C target-feature=+aes,+sha2,+neon"
        
        # Use native build for macOS ARM64
        cargo build --release
        cp target/release/ai-code-buddy ${{ matrix.asset_name }}
        
        echo "Binary created: ${{ matrix.asset_name }}"
        file ${{ matrix.asset_name }}
      env:
        CARGO_NET_RETRY: 10
        OPENSSL_STATIC: "1"
        OPENSSL_NO_VENDOR: "1"

    - name: Prepare binary for upload
      shell: bash
      run: |
        # Binary should already be prepared in the build step
        ls -la ${{ matrix.asset_name }}

    # - name: Publish to crates.io
    #   run: |
    #     echo "ðŸ“¦ Publishing to crates.io..."
    #     cargo publish --allow-dirty
    #   env:
    #     CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Upload Release Asset
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const tag = context.ref.replace("refs/tags/", "");
          const assetName = "${{ matrix.asset_name }}";
          const assetPath = `./${assetName}`;
          
          console.log(`Uploading asset: ${assetName} from path: ${assetPath}`);
          
          // Get release by tag with retry logic
          let release;
          for (let i = 0; i < 5; i++) {
            try {
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              
              release = releases.data.find(r => r.tag_name === tag);
              if (release) break;
              
              console.log(`Release not found, attempt ${i + 1}/5, waiting 2 seconds...`);
              await new Promise(resolve => setTimeout(resolve, 2000));
            } catch (error) {
              console.log(`Error getting releases: ${error.message}`);
            }
          }
          
          if (!release) {
            throw new Error(`Release not found for tag ${tag} after 5 attempts`);
          }
          
          console.log(`Found release: ${release.id}`);
          
          // Check if asset already exists
          const existingAssets = await github.rest.repos.listReleaseAssets({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release.id,
          });
          
          const existingAsset = existingAssets.data.find(asset => asset.name === assetName);
          if (existingAsset) {
            console.log(`Asset ${assetName} already exists, deleting first...`);
            await github.rest.repos.deleteReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              asset_id: existingAsset.id,
            });
          }
          
          // Upload asset
          console.log(`Uploading asset ${assetName}...`);
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release.id,
            name: assetName,
            data: fs.readFileSync(assetPath),
          });
          
          console.log(`Successfully uploaded ${assetName}`);
