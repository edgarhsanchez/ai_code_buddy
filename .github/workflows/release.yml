name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Release
      id: create_release
      uses: actions/github-script@v7
      with:
        script: |
          const tag = context.ref.replace("refs/tags/", "");
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tag,
            name: `Release ${tag}`,
            draft: false,
            prerelease: false,
            generate_release_notes: true
          });
          return release.data.id;

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: ai-code-buddy-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: ai-code-buddy-windows-x86_64.exe
          - os: macos-13
            target: x86_64-apple-darwin
            asset_name: ai-code-buddy-macos-x86_64
          - os: macos-13
            target: aarch64-apple-darwin
            asset_name: ai-code-buddy-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install openssl@3
        echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
        echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/cache
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary (Linux)
      if: runner.os == 'Linux'
      run: |
        cargo build --release --target ${{ matrix.target }}
        cp target/${{ matrix.target }}/release/ai-code-buddy ${{ matrix.asset_name }}
      env:
        CARGO_NET_RETRY: 10
        RUSTFLAGS: "-C target-cpu=generic"

    - name: Publish to crates.io (Linux only)
      if: runner.os == 'Linux'
      run: |
        echo "ðŸ“¦ Publishing to crates.io..."
        cargo publish --allow-dirty
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Build binary (Windows)
      if: runner.os == 'Windows'
      run: |
        cargo build --release --target ${{ matrix.target }}
        cp target/${{ matrix.target }}/release/ai-code-buddy.exe ${{ matrix.asset_name }}
      env:
        CARGO_NET_RETRY: 10
        RUSTFLAGS: "-C target-cpu=generic"

    - name: Build binary (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "Building for target: ${{ matrix.target }}"
        echo "Runner architecture: $(uname -m)"
        
        # Always use native build for macOS to avoid ring crate issues
        cargo build --release
        cp target/release/ai-code-buddy ${{ matrix.asset_name }}
        
        echo "Binary created: ${{ matrix.asset_name }}"
        file ${{ matrix.asset_name }}
      env:
        CARGO_NET_RETRY: 10
        RUSTFLAGS: "-C target-cpu=generic"
        OPENSSL_STATIC: "1"
        OPENSSL_NO_VENDOR: "1"

    - name: Prepare binary for upload
      shell: bash
      run: |
        # Binary should already be prepared in the build step
        ls -la ${{ matrix.asset_name }}

    - name: Upload Release Asset
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const tag = context.ref.replace("refs/tags/", "");
          const assetName = "${{ matrix.asset_name }}";
          const assetPath = `./${assetName}`;
          
          // Get release by tag
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const release = releases.data.find(r => r.tag_name === tag);
          if (!release) {
            throw new Error(`Release not found for tag ${tag}`);
          }
          
          // Upload asset
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release.id,
            name: assetName,
            data: fs.readFileSync(assetPath),
          });
