{"files":[{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","build.rs"],"content":"use std::env;\nuse std::process::Command;\n\nfn main() {\n    println!(\"cargo:rerun-if-changed=build.rs\");\n    println!(\"cargo::rustc-check-cfg=cfg(gpu_available)\");\n\n    // Detect GPU capabilities and automatically enable features\n    let detected_features = detect_gpu_capabilities();\n    let has_gpu = !detected_features.is_empty();\n\n    // If we detected GPU capabilities, enable them by default\n    for feature in detected_features {\n        println!(\"cargo:rustc-cfg=feature=\\\"{feature}\\\"\");\n        eprintln!(\"üîß Build: Auto-detected GPU feature: {feature}\");\n    }\n\n    // Set default GPU mode based on detection\n    if has_gpu {\n        println!(\"cargo:rustc-cfg=gpu_available\");\n        eprintln!(\"üöÄ Build: GPU acceleration will be enabled by default\");\n    } else {\n        eprintln!(\"üíª Build: No GPU acceleration detected - CPU mode will be used\");\n    }\n}\n\nfn detect_gpu_capabilities() -> Vec<String> {\n    let mut features = Vec::new();\n\n    // Detect Apple Silicon (Metal)\n    if is_apple_silicon() {\n        features.push(\"gpu-metal\".to_string());\n        eprintln!(\"üçé Build: Apple Silicon detected - enabling Metal GPU support\");\n    }\n\n    // Detect NVIDIA GPU (CUDA)\n    if has_nvidia_gpu() {\n        features.push(\"gpu-cuda\".to_string());\n        eprintln!(\"üü¢ Build: NVIDIA GPU detected - enabling CUDA support\");\n    }\n\n    // Detect Intel MKL\n    if has_intel_mkl() {\n        features.push(\"gpu-mkl\".to_string());\n        eprintln!(\"üîµ Build: Intel MKL detected - enabling MKL support\");\n    }\n\n    features\n}\n\nfn is_apple_silicon() -> bool {\n    #[cfg(target_os = \"macos\")]\n    {\n        // Check if running on Apple Silicon\n        match Command::new(\"uname\").arg(\"-m\").output() {\n            Ok(output) => {\n                let arch = String::from_utf8_lossy(&output.stdout);\n                arch.trim() == \"arm64\"\n            }\n            Err(_) => false,\n        }\n    }\n    #[cfg(not(target_os = \"macos\"))]\n    {\n        false\n    }\n}\n\nfn has_nvidia_gpu() -> bool {\n    // Try to detect NVIDIA GPU\n    #[cfg(target_os = \"linux\")]\n    {\n        // Check for nvidia-smi\n        if Command::new(\"nvidia-smi\").output().is_ok() {\n            return true;\n        }\n\n        // Check for CUDA runtime\n        if Command::new(\"nvcc\").arg(\"--version\").output().is_ok() {\n            return true;\n        }\n    }\n\n    #[cfg(target_os = \"windows\")]\n    {\n        // Check for NVIDIA driver\n        if Command::new(\"nvidia-smi.exe\").output().is_ok() {\n            return true;\n        }\n    }\n\n    // Check environment variables\n    env::var(\"CUDA_PATH\").is_ok() || env::var(\"CUDA_HOME\").is_ok()\n}\n\nfn has_intel_mkl() -> bool {\n    // Check for Intel MKL\n    env::var(\"MKLROOT\").is_ok()\n        || env::var(\"MKL_ROOT\").is_ok()\n        || Command::new(\"pkg-config\")\n            .args([\"--exists\", \"mkl\"])\n            .output()\n            .is_ok_and(|o| o.status.success())\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","args.rs"],"content":"use clap::Parser;\n\n/// Check if GPU acceleration is available at compile time\nfn is_gpu_available() -> bool {\n    #[cfg(gpu_available)]\n    {\n        true\n    }\n    #[cfg(not(gpu_available))]\n    {\n        false\n    }\n}\n\n#[derive(Parser, Clone, Debug, Resource)]\n#[command(\n    name = \"ai-code-buddy\",\n    version = \"0.2.0\",\n    about = \"ü§ñ AI-powered code review tool with elegant TUI\",\n    long_about = \"AI Code Buddy is an intelligent code analysis tool that compares branches, \\\n                  detects security vulnerabilities, performance issues, and code quality problems. \\\n                  Features a modern Bevy-powered TUI with real-time analysis and reporting.\"\n)]\npub struct Args {\n    /// Git repository path to analyze\n    #[arg(\n        value_name = \"REPO_PATH\",\n        default_value = \".\",\n        help = \"Path to the Git repository (default: current directory)\"\n    )]\n    pub repo_path: String,\n\n    /// Source branch for comparison\n    #[arg(\n        short = 's',\n        long = \"source\",\n        value_name = \"BRANCH\",\n        default_value = \"main\",\n        help = \"Source branch to compare from\"\n    )]\n    pub source_branch: String,\n\n    /// Target branch for comparison\n    #[arg(\n        short = 't',\n        long = \"target\",\n        value_name = \"BRANCH\",\n        default_value = \"HEAD\",\n        help = \"Target branch to compare to (default: HEAD)\"\n    )]\n    pub target_branch: String,\n\n    /// Use CLI mode instead of interactive TUI\n    #[arg(\n        long = \"cli\",\n        help = \"Run in CLI mode with text output instead of interactive interface\"\n    )]\n    pub cli_mode: bool,\n\n    /// Enable verbose output\n    #[arg(\n        short = 'v',\n        long = \"verbose\",\n        help = \"Enable verbose output for debugging\"\n    )]\n    pub verbose: bool,\n\n    /// Show credits and contributors\n    #[arg(\n        long = \"credits\",\n        help = \"Show credits and list all contributors to the project\"\n    )]\n    pub show_credits: bool,\n\n    /// Output format for results\n    #[arg(\n        short = 'f',\n        long = \"format\",\n        value_enum,\n        default_value = \"summary\",\n        help = \"Output format for results\"\n    )]\n    pub output_format: OutputFormat,\n\n    /// Exclude files matching pattern\n    #[arg(\n        long = \"exclude\",\n        value_name = \"PATTERN\",\n        help = \"Exclude files matching glob pattern (can be used multiple times)\",\n        action = clap::ArgAction::Append\n    )]\n    pub exclude_patterns: Vec<String>,\n\n    /// Include only files matching pattern\n    #[arg(\n        long = \"include\",\n        value_name = \"PATTERN\",\n        help = \"Include only files matching glob pattern (can be used multiple times)\",\n        action = clap::ArgAction::Append\n    )]\n    pub include_patterns: Vec<String>,\n\n    /// Enable GPU acceleration for AI analysis\n    #[arg(\n        long = \"gpu\",\n        help = \"Enable GPU acceleration (Metal on Apple, CUDA on NVIDIA, auto-detected)\",\n        default_value_t = is_gpu_available()\n    )]\n    pub use_gpu: bool,\n\n    /// Force CPU mode (disable GPU acceleration)\n    #[arg(\n        long = \"cpu\",\n        help = \"Force CPU mode (disable GPU acceleration even if available)\",\n        conflicts_with = \"use_gpu\"\n    )]\n    pub force_cpu: bool,\n}\n\n#[derive(clap::ValueEnum, Clone, Debug, PartialEq)]\npub enum OutputFormat {\n    /// Summary output with key findings\n    Summary,\n    /// Detailed output with all issues\n    Detailed,\n    /// JSON format for programmatic use\n    Json,\n    /// Markdown format for documentation\n    Markdown,\n}\n\nuse bevy::prelude::Resource;\n","traces":[{"line":4,"address":[],"length":0,"stats":{"Line":1}},{"line":7,"address":[],"length":0,"stats":{"Line":1}}],"covered":2,"coverable":2},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","bevy_states","app.rs"],"content":"use bevy::prelude::*;\n\n#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash, Default, States)]\npub enum AppState {\n    #[default]\n    Overview,\n    Analysis,\n    Reports,\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","core","ai_analyzer.rs"],"content":"use anyhow::Result;\nuse serde::{Deserialize, Serialize};\nuse std::path::Path;\nuse tokio::sync::mpsc;\n\nuse crate::core::review::{CommitStatus, Issue};\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct AnalysisRequest {\n    pub file_path: String,\n    pub content: String,\n    pub language: String,\n    pub commit_status: CommitStatus,\n}\n\n#[derive(Debug, Clone)]\npub struct ProgressUpdate {\n    pub current_file: String,\n    pub progress: f64,\n    pub stage: String,\n}\n\n#[derive(Debug, Clone, PartialEq)]\npub enum GpuBackend {\n    Metal,\n    Cuda,\n    Mkl,\n    Cpu,\n}\n\nimpl std::fmt::Display for GpuBackend {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        match self {\n            GpuBackend::Metal => write!(f, \"Metal\"),\n            GpuBackend::Cuda => write!(f, \"CUDA\"),\n            GpuBackend::Mkl => write!(f, \"MKL\"),\n            GpuBackend::Cpu => write!(f, \"CPU\"),\n        }\n    }\n}\n\npub struct AIAnalyzer {\n    backend: GpuBackend,\n}\n\nimpl AIAnalyzer {\n    pub async fn new(use_gpu: bool) -> Result<Self> {\n        println!(\"üß† Initializing AI analyzer...\");\n\n        // Detect and configure GPU backend\n        let backend = if use_gpu {\n            Self::detect_gpu_backend()\n        } else {\n            GpuBackend::Cpu\n        };\n\n        println!(\"üîß Using backend: {backend:?}\");\n\n        println!(\"üîç AI inference currently disabled due to token sampling issues\");\n        println!(\"üîß Using enhanced rule-based analysis for comprehensive code review\");\n\n        let analyzer = AIAnalyzer { backend };\n\n        // Display the configured backend for diagnostics\n        println!(\n            \"üîß AI Analyzer initialized with {} backend\",\n            analyzer.get_backend()\n        );\n\n        Ok(analyzer)\n    }\n\n    /// Get the GPU backend being used by this analyzer\n    pub fn get_backend(&self) -> &GpuBackend {\n        &self.backend\n    }\n\n    fn detect_gpu_backend() -> GpuBackend {\n        // Check if we're on Apple Silicon (Metal support)\n        if cfg!(target_os = \"macos\") && Self::is_apple_silicon() {\n            println!(\"üçé Apple Silicon detected, using Metal backend\");\n            GpuBackend::Metal\n        }\n        // Check for CUDA support (NVIDIA)\n        else if Self::has_cuda_support() {\n            println!(\"üü¢ NVIDIA CUDA detected, using CUDA backend\");\n            GpuBackend::Cuda\n        }\n        // Check for Intel MKL support\n        else if Self::has_mkl_support() {\n            println!(\"üîµ Intel MKL detected, using MKL backend\");\n            GpuBackend::Mkl\n        }\n        // Fallback to CPU\n        else {\n            println!(\"üíª No GPU acceleration detected, falling back to CPU\");\n            GpuBackend::Cpu\n        }\n    }\n\n    fn is_apple_silicon() -> bool {\n        // Check if we're running on Apple Silicon\n        cfg!(target_arch = \"aarch64\") && cfg!(target_os = \"macos\")\n    }\n\n    fn has_cuda_support() -> bool {\n        // Check for NVIDIA GPU presence\n        // This is a simplified check - in production you might want to check for actual CUDA runtime\n        std::process::Command::new(\"nvidia-smi\")\n            .output()\n            .map(|output| output.status.success())\n            .unwrap_or(false)\n    }\n\n    fn has_mkl_support() -> bool {\n        // Check for Intel processor\n        // This is a simplified check\n        cfg!(target_arch = \"x86_64\")\n    }\n\n    pub async fn analyze_file(\n        &self,\n        request: AnalysisRequest,\n        progress_tx: Option<mpsc::UnboundedSender<ProgressUpdate>>,\n    ) -> Result<Vec<Issue>> {\n        let _language = self.detect_language(&request.file_path);\n\n        if let Some(ref tx) = progress_tx {\n            let _ = tx.send(ProgressUpdate {\n                current_file: request.file_path.clone(),\n                progress: 0.0,\n                stage: \"Starting analysis\".to_string(),\n            });\n        }\n\n        let mut issues = Vec::new();\n\n        // AI inference is currently disabled due to token sampling issues\n        // Using enhanced rule-based analysis which provides comprehensive coverage\n        issues.extend(self.rule_based_analysis(&request)?);\n\n        // TODO: Re-enable AI analysis once token sampling issues are resolved\n        // The AI methods are preserved below for future use\n\n        if let Some(ref tx) = progress_tx {\n            let _ = tx.send(ProgressUpdate {\n                current_file: request.file_path.clone(),\n                progress: 100.0,\n                stage: \"Analysis complete\".to_string(),\n            });\n        }\n\n        Ok(issues)\n    }\n\n    fn rule_based_analysis(&self, request: &AnalysisRequest) -> Result<Vec<Issue>> {\n        let mut issues = Vec::new();\n\n        for (line_num, line) in request.content.lines().enumerate() {\n            let line_number = line_num + 1;\n            let line_lower = line.to_lowercase();\n\n            // SECURITY PATTERNS\n\n            // Hardcoded credentials\n            if (line_lower.contains(\"password\")\n                || line_lower.contains(\"api_key\")\n                || line_lower.contains(\"secret\"))\n                && line.contains(\"=\")\n                && (line.contains(\"\\\"\") || line.contains(\"'\"))\n            {\n                issues.push(Issue {\n                    file: request.file_path.clone(),\n                    line: line_number,\n                    severity: \"Critical\".to_string(),\n                    category: \"Security\".to_string(),\n                    description: \"Hardcoded credentials detected - use environment variables\"\n                        .to_string(),\n                    commit_status: request.commit_status.clone(),\n                });\n            }\n\n            // Code injection\n            if line.contains(\"eval(\") || line.contains(\"exec(\") {\n                issues.push(Issue {\n                    file: request.file_path.clone(),\n                    line: line_number,\n                    severity: \"Critical\".to_string(),\n                    category: \"Security\".to_string(),\n                    description: \"Code injection vulnerability - avoid eval/exec\".to_string(),\n                    commit_status: request.commit_status.clone(),\n                });\n            }\n\n            // SQL injection patterns\n            if line.contains(\"query\")\n                && line.contains(\"format!\")\n                && (line.contains(\"SELECT\") || line.contains(\"INSERT\") || line.contains(\"UPDATE\"))\n            {\n                issues.push(Issue {\n                    file: request.file_path.clone(),\n                    line: line_number,\n                    severity: \"Critical\".to_string(),\n                    category: \"Security\".to_string(),\n                    description: \"Potential SQL injection - use parameterized queries\".to_string(),\n                    commit_status: request.commit_status.clone(),\n                });\n            }\n\n            // Command injection patterns\n            if (line.contains(\"Command::new\")\n                || line.contains(\"subprocess\")\n                || line.contains(\"system(\"))\n                && (line.contains(\"format!\")\n                    || line.contains(\"user_input\")\n                    || line.contains(\"args\"))\n            {\n                issues.push(Issue {\n                    file: request.file_path.clone(),\n                    line: line_number,\n                    severity: \"Critical\".to_string(),\n                    category: \"Security\".to_string(),\n                    description: \"Command injection vulnerability - sanitize inputs\".to_string(),\n                    commit_status: request.commit_status.clone(),\n                });\n            }\n\n            // Path traversal patterns\n            if line.contains(\"../\")\n                && (line.contains(\"read\") || line.contains(\"open\") || line.contains(\"file\"))\n            {\n                issues.push(Issue {\n                    file: request.file_path.clone(),\n                    line: line_number,\n                    severity: \"High\".to_string(),\n                    category: \"Security\".to_string(),\n                    description: \"Path traversal vulnerability - validate file paths\".to_string(),\n                    commit_status: request.commit_status.clone(),\n                });\n            }\n\n            // PERFORMANCE PATTERNS\n\n            // Nested loops (O(n¬≤) complexity)\n            if line.contains(\"for\") && line.trim().starts_with(\"for\") {\n                // Check if there's another for loop nearby (simple heuristic)\n                let lines: Vec<&str> = request.content.lines().collect();\n                for (idx, _) in lines\n                    .iter()\n                    .enumerate()\n                    .take(std::cmp::min(line_num + 10, lines.len()))\n                    .skip(line_num + 1)\n                {\n                    if lines[idx].trim().starts_with(\"for\") {\n                        issues.push(Issue {\n                            file: request.file_path.clone(),\n                            line: line_number,\n                            severity: \"Medium\".to_string(),\n                            category: \"Performance\".to_string(),\n                            description: \"Nested loops detected - consider optimization\"\n                                .to_string(),\n                            commit_status: request.commit_status.clone(),\n                        });\n                        break;\n                    }\n                }\n            }\n\n            // Language-specific analysis\n            match request.language.as_str() {\n                \"rust\" => {\n                    // Security\n                    if line.contains(\"unsafe\") {\n                        issues.push(Issue {\n                            file: request.file_path.clone(),\n                            line: line_number,\n                            severity: \"High\".to_string(),\n                            category: \"Security\".to_string(),\n                            description: \"Unsafe code block - requires justification and review\"\n                                .to_string(),\n                            commit_status: request.commit_status.clone(),\n                        });\n                    }\n\n                    if line.contains(\"std::ptr::null\") {\n                        issues.push(Issue {\n                            file: request.file_path.clone(),\n                            line: line_number,\n                            severity: \"Critical\".to_string(),\n                            category: \"Security\".to_string(),\n                            description: \"Null pointer dereference - will cause segfault\"\n                                .to_string(),\n                            commit_status: request.commit_status.clone(),\n                        });\n                    }\n\n                    // Error handling\n                    if line.contains(\"unwrap()\") && !line.contains(\"expect(\") {\n                        issues.push(Issue {\n                            file: request.file_path.clone(),\n                            line: line_number,\n                            severity: \"Medium\".to_string(),\n                            category: \"Error Handling\".to_string(),\n                            description:\n                                \"Use expect() or proper error handling instead of unwrap()\"\n                                    .to_string(),\n                            commit_status: request.commit_status.clone(),\n                        });\n                    }\n\n                    // Performance\n                    if line.contains(\".clone()\") && line.contains(\"&\") {\n                        issues.push(Issue {\n                            file: request.file_path.clone(),\n                            line: line_number,\n                            severity: \"Low\".to_string(),\n                            category: \"Performance\".to_string(),\n                            description: \"Unnecessary clone - consider borrowing instead\"\n                                .to_string(),\n                            commit_status: request.commit_status.clone(),\n                        });\n                    }\n                }\n                \"python\" => {\n                    // Security\n                    if line.contains(\"pickle.loads\") && !line.contains(\"trusted\") {\n                        issues.push(Issue {\n                            file: request.file_path.clone(),\n                            line: line_number,\n                            severity: \"Critical\".to_string(),\n                            category: \"Security\".to_string(),\n                            description: \"Unsafe deserialization - pickle.loads is dangerous\"\n                                .to_string(),\n                            commit_status: request.commit_status.clone(),\n                        });\n                    }\n\n                    if line.contains(\"yaml.load\") && !line.contains(\"safe_load\") {\n                        issues.push(Issue {\n                            file: request.file_path.clone(),\n                            line: line_number,\n                            severity: \"High\".to_string(),\n                            category: \"Security\".to_string(),\n                            description: \"Use yaml.safe_load instead of yaml.load\".to_string(),\n                            commit_status: request.commit_status.clone(),\n                        });\n                    }\n\n                    // Performance\n                    if line.contains(\"+=\") && (line.contains(\"\\\"\") || line.contains(\"'\")) {\n                        issues.push(Issue {\n                            file: request.file_path.clone(),\n                            line: line_number,\n                            severity: \"Medium\".to_string(),\n                            category: \"Performance\".to_string(),\n                            description:\n                                \"String concatenation in loop - use join() for better performance\"\n                                    .to_string(),\n                            commit_status: request.commit_status.clone(),\n                        });\n                    }\n                }\n                \"javascript\" | \"typescript\" => {\n                    // Security\n                    if line.contains(\"innerHTML\") && line.contains(\"+\") {\n                        issues.push(Issue {\n                            file: request.file_path.clone(),\n                            line: line_number,\n                            severity: \"High\".to_string(),\n                            category: \"Security\".to_string(),\n                            description: \"XSS vulnerability - validate before setting innerHTML\"\n                                .to_string(),\n                            commit_status: request.commit_status.clone(),\n                        });\n                    }\n\n                    // Performance\n                    if line.contains(\"document.getElementById\") && line.contains(\"for\") {\n                        issues.push(Issue {\n                            file: request.file_path.clone(),\n                            line: line_number,\n                            severity: \"Medium\".to_string(),\n                            category: \"Performance\".to_string(),\n                            description: \"DOM query in loop - cache the element reference\"\n                                .to_string(),\n                            commit_status: request.commit_status.clone(),\n                        });\n                    }\n                }\n                _ => {}\n            }\n\n            // CODE QUALITY PATTERNS\n\n            if line.contains(\"TODO\") || line.contains(\"FIXME\") || line.contains(\"HACK\") {\n                issues.push(Issue {\n                    file: request.file_path.clone(),\n                    line: line_number,\n                    severity: \"Low\".to_string(),\n                    category: \"Code Quality\".to_string(),\n                    description: \"Code comment indicates incomplete implementation\".to_string(),\n                    commit_status: request.commit_status.clone(),\n                });\n            }\n\n            // Long line detection\n            if line.len() > 120 {\n                issues.push(Issue {\n                    file: request.file_path.clone(),\n                    line: line_number,\n                    severity: \"Low\".to_string(),\n                    category: \"Code Quality\".to_string(),\n                    description: format!(\n                        \"Line too long ({} chars) - consider breaking into multiple lines\",\n                        line.len()\n                    ),\n                    commit_status: request.commit_status.clone(),\n                });\n            }\n        }\n\n        Ok(issues)\n    }\n\n    fn detect_language(&self, file_path: &str) -> String {\n        let path = Path::new(file_path);\n        match path.extension().and_then(|ext| ext.to_str()) {\n            Some(\"rs\") => \"rust\".to_string(),\n            Some(\"js\") => \"javascript\".to_string(),\n            Some(\"ts\") => \"typescript\".to_string(),\n            Some(\"py\") => \"python\".to_string(),\n            Some(\"java\") => \"java\".to_string(),\n            Some(\"cpp\") | Some(\"cc\") | Some(\"cxx\") => \"cpp\".to_string(),\n            Some(\"c\") => \"c\".to_string(),\n            Some(\"go\") => \"go\".to_string(),\n            Some(\"php\") => \"php\".to_string(),\n            Some(\"rb\") => \"ruby\".to_string(),\n            Some(\"cs\") => \"csharp\".to_string(),\n            _ => \"unknown\".to_string(),\n        }\n    }\n}\n","traces":[{"line":32,"address":[],"length":0,"stats":{"Line":4}},{"line":33,"address":[],"length":0,"stats":{"Line":4}},{"line":34,"address":[],"length":0,"stats":{"Line":1}},{"line":35,"address":[],"length":0,"stats":{"Line":3}},{"line":36,"address":[],"length":0,"stats":{"Line":3}},{"line":37,"address":[],"length":0,"stats":{"Line":3}},{"line":47,"address":[],"length":0,"stats":{"Line":0}},{"line":48,"address":[],"length":0,"stats":{"Line":0}},{"line":51,"address":[],"length":0,"stats":{"Line":0}},{"line":52,"address":[],"length":0,"stats":{"Line":0}},{"line":54,"address":[],"length":0,"stats":{"Line":0}},{"line":57,"address":[],"length":0,"stats":{"Line":0}},{"line":59,"address":[],"length":0,"stats":{"Line":0}},{"line":60,"address":[],"length":0,"stats":{"Line":0}},{"line":62,"address":[],"length":0,"stats":{"Line":0}},{"line":65,"address":[],"length":0,"stats":{"Line":0}},{"line":66,"address":[],"length":0,"stats":{"Line":0}},{"line":67,"address":[],"length":0,"stats":{"Line":0}},{"line":70,"address":[],"length":0,"stats":{"Line":0}},{"line":74,"address":[],"length":0,"stats":{"Line":0}},{"line":75,"address":[],"length":0,"stats":{"Line":0}},{"line":78,"address":[],"length":0,"stats":{"Line":0}},{"line":80,"address":[],"length":0,"stats":{"Line":0}},{"line":81,"address":[],"length":0,"stats":{"Line":0}},{"line":82,"address":[],"length":0,"stats":{"Line":0}},{"line":85,"address":[],"length":0,"stats":{"Line":0}},{"line":86,"address":[],"length":0,"stats":{"Line":0}},{"line":87,"address":[],"length":0,"stats":{"Line":0}},{"line":90,"address":[],"length":0,"stats":{"Line":0}},{"line":91,"address":[],"length":0,"stats":{"Line":0}},{"line":92,"address":[],"length":0,"stats":{"Line":0}},{"line":96,"address":[],"length":0,"stats":{"Line":0}},{"line":97,"address":[],"length":0,"stats":{"Line":0}},{"line":101,"address":[],"length":0,"stats":{"Line":0}},{"line":103,"address":[],"length":0,"stats":{"Line":0}},{"line":106,"address":[],"length":0,"stats":{"Line":0}},{"line":109,"address":[],"length":0,"stats":{"Line":0}},{"line":111,"address":[],"length":0,"stats":{"Line":0}},{"line":115,"address":[],"length":0,"stats":{"Line":0}},{"line":121,"address":[],"length":0,"stats":{"Line":0}},{"line":126,"address":[],"length":0,"stats":{"Line":0}},{"line":128,"address":[],"length":0,"stats":{"Line":0}},{"line":129,"address":[],"length":0,"stats":{"Line":0}},{"line":130,"address":[],"length":0,"stats":{"Line":0}},{"line":131,"address":[],"length":0,"stats":{"Line":0}},{"line":132,"address":[],"length":0,"stats":{"Line":0}},{"line":136,"address":[],"length":0,"stats":{"Line":0}},{"line":140,"address":[],"length":0,"stats":{"Line":0}},{"line":145,"address":[],"length":0,"stats":{"Line":0}},{"line":146,"address":[],"length":0,"stats":{"Line":0}},{"line":147,"address":[],"length":0,"stats":{"Line":0}},{"line":148,"address":[],"length":0,"stats":{"Line":0}},{"line":149,"address":[],"length":0,"stats":{"Line":0}},{"line":153,"address":[],"length":0,"stats":{"Line":0}},{"line":156,"address":[],"length":0,"stats":{"Line":0}},{"line":157,"address":[],"length":0,"stats":{"Line":0}},{"line":159,"address":[],"length":0,"stats":{"Line":0}},{"line":160,"address":[],"length":0,"stats":{"Line":0}},{"line":161,"address":[],"length":0,"stats":{"Line":0}},{"line":166,"address":[],"length":0,"stats":{"Line":0}},{"line":167,"address":[],"length":0,"stats":{"Line":0}},{"line":168,"address":[],"length":0,"stats":{"Line":0}},{"line":169,"address":[],"length":0,"stats":{"Line":0}},{"line":170,"address":[],"length":0,"stats":{"Line":0}},{"line":172,"address":[],"length":0,"stats":{"Line":0}},{"line":173,"address":[],"length":0,"stats":{"Line":0}},{"line":174,"address":[],"length":0,"stats":{"Line":0}},{"line":175,"address":[],"length":0,"stats":{"Line":0}},{"line":176,"address":[],"length":0,"stats":{"Line":0}},{"line":177,"address":[],"length":0,"stats":{"Line":0}},{"line":178,"address":[],"length":0,"stats":{"Line":0}},{"line":179,"address":[],"length":0,"stats":{"Line":0}},{"line":184,"address":[],"length":0,"stats":{"Line":0}},{"line":185,"address":[],"length":0,"stats":{"Line":0}},{"line":186,"address":[],"length":0,"stats":{"Line":0}},{"line":187,"address":[],"length":0,"stats":{"Line":0}},{"line":188,"address":[],"length":0,"stats":{"Line":0}},{"line":189,"address":[],"length":0,"stats":{"Line":0}},{"line":190,"address":[],"length":0,"stats":{"Line":0}},{"line":191,"address":[],"length":0,"stats":{"Line":0}},{"line":196,"address":[],"length":0,"stats":{"Line":0}},{"line":197,"address":[],"length":0,"stats":{"Line":0}},{"line":198,"address":[],"length":0,"stats":{"Line":0}},{"line":200,"address":[],"length":0,"stats":{"Line":0}},{"line":201,"address":[],"length":0,"stats":{"Line":0}},{"line":202,"address":[],"length":0,"stats":{"Line":0}},{"line":203,"address":[],"length":0,"stats":{"Line":0}},{"line":204,"address":[],"length":0,"stats":{"Line":0}},{"line":205,"address":[],"length":0,"stats":{"Line":0}},{"line":206,"address":[],"length":0,"stats":{"Line":0}},{"line":211,"address":[],"length":0,"stats":{"Line":0}},{"line":212,"address":[],"length":0,"stats":{"Line":0}},{"line":213,"address":[],"length":0,"stats":{"Line":0}},{"line":214,"address":[],"length":0,"stats":{"Line":0}},{"line":215,"address":[],"length":0,"stats":{"Line":0}},{"line":216,"address":[],"length":0,"stats":{"Line":0}},{"line":218,"address":[],"length":0,"stats":{"Line":0}},{"line":219,"address":[],"length":0,"stats":{"Line":0}},{"line":220,"address":[],"length":0,"stats":{"Line":0}},{"line":221,"address":[],"length":0,"stats":{"Line":0}},{"line":222,"address":[],"length":0,"stats":{"Line":0}},{"line":223,"address":[],"length":0,"stats":{"Line":0}},{"line":224,"address":[],"length":0,"stats":{"Line":0}},{"line":229,"address":[],"length":0,"stats":{"Line":0}},{"line":230,"address":[],"length":0,"stats":{"Line":0}},{"line":232,"address":[],"length":0,"stats":{"Line":0}},{"line":233,"address":[],"length":0,"stats":{"Line":0}},{"line":234,"address":[],"length":0,"stats":{"Line":0}},{"line":235,"address":[],"length":0,"stats":{"Line":0}},{"line":236,"address":[],"length":0,"stats":{"Line":0}},{"line":237,"address":[],"length":0,"stats":{"Line":0}},{"line":238,"address":[],"length":0,"stats":{"Line":0}},{"line":245,"address":[],"length":0,"stats":{"Line":0}},{"line":247,"address":[],"length":0,"stats":{"Line":0}},{"line":248,"address":[],"length":0,"stats":{"Line":0}},{"line":249,"address":[],"length":0,"stats":{"Line":0}},{"line":250,"address":[],"length":0,"stats":{"Line":0}},{"line":251,"address":[],"length":0,"stats":{"Line":0}},{"line":252,"address":[],"length":0,"stats":{"Line":0}},{"line":254,"address":[],"length":0,"stats":{"Line":0}},{"line":255,"address":[],"length":0,"stats":{"Line":0}},{"line":256,"address":[],"length":0,"stats":{"Line":0}},{"line":257,"address":[],"length":0,"stats":{"Line":0}},{"line":258,"address":[],"length":0,"stats":{"Line":0}},{"line":259,"address":[],"length":0,"stats":{"Line":0}},{"line":260,"address":[],"length":0,"stats":{"Line":0}},{"line":261,"address":[],"length":0,"stats":{"Line":0}},{"line":262,"address":[],"length":0,"stats":{"Line":0}},{"line":264,"address":[],"length":0,"stats":{"Line":0}},{"line":270,"address":[],"length":0,"stats":{"Line":0}},{"line":271,"address":[],"length":0,"stats":{"Line":0}},{"line":273,"address":[],"length":0,"stats":{"Line":0}},{"line":274,"address":[],"length":0,"stats":{"Line":0}},{"line":275,"address":[],"length":0,"stats":{"Line":0}},{"line":276,"address":[],"length":0,"stats":{"Line":0}},{"line":277,"address":[],"length":0,"stats":{"Line":0}},{"line":278,"address":[],"length":0,"stats":{"Line":0}},{"line":279,"address":[],"length":0,"stats":{"Line":0}},{"line":280,"address":[],"length":0,"stats":{"Line":0}},{"line":281,"address":[],"length":0,"stats":{"Line":0}},{"line":285,"address":[],"length":0,"stats":{"Line":0}},{"line":286,"address":[],"length":0,"stats":{"Line":0}},{"line":287,"address":[],"length":0,"stats":{"Line":0}},{"line":288,"address":[],"length":0,"stats":{"Line":0}},{"line":289,"address":[],"length":0,"stats":{"Line":0}},{"line":290,"address":[],"length":0,"stats":{"Line":0}},{"line":291,"address":[],"length":0,"stats":{"Line":0}},{"line":292,"address":[],"length":0,"stats":{"Line":0}},{"line":293,"address":[],"length":0,"stats":{"Line":0}},{"line":298,"address":[],"length":0,"stats":{"Line":0}},{"line":299,"address":[],"length":0,"stats":{"Line":0}},{"line":300,"address":[],"length":0,"stats":{"Line":0}},{"line":301,"address":[],"length":0,"stats":{"Line":0}},{"line":302,"address":[],"length":0,"stats":{"Line":0}},{"line":303,"address":[],"length":0,"stats":{"Line":0}},{"line":304,"address":[],"length":0,"stats":{"Line":0}},{"line":305,"address":[],"length":0,"stats":{"Line":0}},{"line":306,"address":[],"length":0,"stats":{"Line":0}},{"line":307,"address":[],"length":0,"stats":{"Line":0}},{"line":312,"address":[],"length":0,"stats":{"Line":0}},{"line":313,"address":[],"length":0,"stats":{"Line":0}},{"line":314,"address":[],"length":0,"stats":{"Line":0}},{"line":315,"address":[],"length":0,"stats":{"Line":0}},{"line":316,"address":[],"length":0,"stats":{"Line":0}},{"line":317,"address":[],"length":0,"stats":{"Line":0}},{"line":318,"address":[],"length":0,"stats":{"Line":0}},{"line":319,"address":[],"length":0,"stats":{"Line":0}},{"line":320,"address":[],"length":0,"stats":{"Line":0}},{"line":324,"address":[],"length":0,"stats":{"Line":0}},{"line":326,"address":[],"length":0,"stats":{"Line":0}},{"line":327,"address":[],"length":0,"stats":{"Line":0}},{"line":328,"address":[],"length":0,"stats":{"Line":0}},{"line":329,"address":[],"length":0,"stats":{"Line":0}},{"line":330,"address":[],"length":0,"stats":{"Line":0}},{"line":331,"address":[],"length":0,"stats":{"Line":0}},{"line":332,"address":[],"length":0,"stats":{"Line":0}},{"line":333,"address":[],"length":0,"stats":{"Line":0}},{"line":334,"address":[],"length":0,"stats":{"Line":0}},{"line":338,"address":[],"length":0,"stats":{"Line":0}},{"line":339,"address":[],"length":0,"stats":{"Line":0}},{"line":340,"address":[],"length":0,"stats":{"Line":0}},{"line":341,"address":[],"length":0,"stats":{"Line":0}},{"line":342,"address":[],"length":0,"stats":{"Line":0}},{"line":343,"address":[],"length":0,"stats":{"Line":0}},{"line":344,"address":[],"length":0,"stats":{"Line":0}},{"line":345,"address":[],"length":0,"stats":{"Line":0}},{"line":350,"address":[],"length":0,"stats":{"Line":0}},{"line":351,"address":[],"length":0,"stats":{"Line":0}},{"line":352,"address":[],"length":0,"stats":{"Line":0}},{"line":353,"address":[],"length":0,"stats":{"Line":0}},{"line":354,"address":[],"length":0,"stats":{"Line":0}},{"line":355,"address":[],"length":0,"stats":{"Line":0}},{"line":356,"address":[],"length":0,"stats":{"Line":0}},{"line":357,"address":[],"length":0,"stats":{"Line":0}},{"line":358,"address":[],"length":0,"stats":{"Line":0}},{"line":359,"address":[],"length":0,"stats":{"Line":0}},{"line":363,"address":[],"length":0,"stats":{"Line":0}},{"line":365,"address":[],"length":0,"stats":{"Line":0}},{"line":366,"address":[],"length":0,"stats":{"Line":0}},{"line":367,"address":[],"length":0,"stats":{"Line":0}},{"line":368,"address":[],"length":0,"stats":{"Line":0}},{"line":369,"address":[],"length":0,"stats":{"Line":0}},{"line":370,"address":[],"length":0,"stats":{"Line":0}},{"line":371,"address":[],"length":0,"stats":{"Line":0}},{"line":372,"address":[],"length":0,"stats":{"Line":0}},{"line":373,"address":[],"length":0,"stats":{"Line":0}},{"line":378,"address":[],"length":0,"stats":{"Line":0}},{"line":379,"address":[],"length":0,"stats":{"Line":0}},{"line":380,"address":[],"length":0,"stats":{"Line":0}},{"line":381,"address":[],"length":0,"stats":{"Line":0}},{"line":382,"address":[],"length":0,"stats":{"Line":0}},{"line":383,"address":[],"length":0,"stats":{"Line":0}},{"line":384,"address":[],"length":0,"stats":{"Line":0}},{"line":385,"address":[],"length":0,"stats":{"Line":0}},{"line":386,"address":[],"length":0,"stats":{"Line":0}},{"line":390,"address":[],"length":0,"stats":{"Line":0}},{"line":395,"address":[],"length":0,"stats":{"Line":0}},{"line":396,"address":[],"length":0,"stats":{"Line":0}},{"line":397,"address":[],"length":0,"stats":{"Line":0}},{"line":398,"address":[],"length":0,"stats":{"Line":0}},{"line":399,"address":[],"length":0,"stats":{"Line":0}},{"line":400,"address":[],"length":0,"stats":{"Line":0}},{"line":401,"address":[],"length":0,"stats":{"Line":0}},{"line":402,"address":[],"length":0,"stats":{"Line":0}},{"line":407,"address":[],"length":0,"stats":{"Line":0}},{"line":408,"address":[],"length":0,"stats":{"Line":0}},{"line":409,"address":[],"length":0,"stats":{"Line":0}},{"line":410,"address":[],"length":0,"stats":{"Line":0}},{"line":411,"address":[],"length":0,"stats":{"Line":0}},{"line":412,"address":[],"length":0,"stats":{"Line":0}},{"line":413,"address":[],"length":0,"stats":{"Line":0}},{"line":414,"address":[],"length":0,"stats":{"Line":0}},{"line":415,"address":[],"length":0,"stats":{"Line":0}},{"line":417,"address":[],"length":0,"stats":{"Line":0}},{"line":422,"address":[],"length":0,"stats":{"Line":0}},{"line":425,"address":[],"length":0,"stats":{"Line":0}},{"line":426,"address":[],"length":0,"stats":{"Line":0}},{"line":427,"address":[],"length":0,"stats":{"Line":0}},{"line":428,"address":[],"length":0,"stats":{"Line":0}},{"line":429,"address":[],"length":0,"stats":{"Line":0}},{"line":430,"address":[],"length":0,"stats":{"Line":0}},{"line":431,"address":[],"length":0,"stats":{"Line":0}},{"line":432,"address":[],"length":0,"stats":{"Line":0}},{"line":433,"address":[],"length":0,"stats":{"Line":0}},{"line":434,"address":[],"length":0,"stats":{"Line":0}},{"line":435,"address":[],"length":0,"stats":{"Line":0}},{"line":436,"address":[],"length":0,"stats":{"Line":0}},{"line":437,"address":[],"length":0,"stats":{"Line":0}},{"line":438,"address":[],"length":0,"stats":{"Line":0}},{"line":439,"address":[],"length":0,"stats":{"Line":0}}],"covered":6,"coverable":250},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","core","analysis.rs"],"content":"use crate::args::Args;\nuse crate::core::{\n    ai_analyzer::{AIAnalyzer, AnalysisRequest, ProgressUpdate},\n    git::GitAnalyzer,\n    review::Review,\n};\nuse anyhow::Result;\nuse tokio::sync::mpsc;\n\npub async fn perform_analysis_with_progress(\n    args: &Args,\n    progress_callback: Option<Box<dyn Fn(f64, String) + Send + Sync>>,\n) -> Result<Review> {\n    println!(\"üìä Starting AI-powered analysis...\");\n\n    let git_analyzer = GitAnalyzer::new(&args.repo_path)?;\n\n    // Get changed files between branches\n    let changed_files = git_analyzer.get_changed_files(&args.source_branch, &args.target_branch)?;\n\n    println!(\"üìà Found {} changed files\", changed_files.len());\n\n    let mut review = Review {\n        files_count: changed_files.len(),\n        issues_count: 0,\n        critical_issues: 0,\n        high_issues: 0,\n        medium_issues: 0,\n        low_issues: 0,\n        issues: Vec::new(),\n    };\n\n    // Initialize AI analyzer\n    let use_gpu = args.use_gpu && !args.force_cpu;\n    if args.force_cpu {\n        println!(\"üíª CPU mode forced by user with --cpu flag\");\n    } else if args.use_gpu {\n        println!(\"üöÄ GPU acceleration enabled (auto-detected or requested)\");\n    }\n    let ai_analyzer = AIAnalyzer::new(use_gpu).await?;\n\n    // Create progress channel\n    let (progress_tx, mut progress_rx) = mpsc::unbounded_channel::<ProgressUpdate>();\n\n    // Spawn task to handle progress updates\n    if let Some(callback) = progress_callback {\n        tokio::spawn(async move {\n            while let Some(update) = progress_rx.recv().await {\n                // Format the current file with stage information\n                let status_message = if update.stage.is_empty() {\n                    update.current_file\n                } else {\n                    format!(\"{} - {}\", update.current_file, update.stage)\n                };\n                callback(update.progress, status_message);\n            }\n        });\n    }\n\n    // Analyze each file\n    let total_files = changed_files.len() as f64;\n    for (index, file_path) in changed_files.iter().enumerate() {\n        if should_analyze_file(file_path, args) {\n            let commit_status = git_analyzer\n                .get_file_status(file_path)\n                .unwrap_or(crate::core::review::CommitStatus::Committed);\n\n            let status_indicator = match commit_status {\n                crate::core::review::CommitStatus::Committed => \"üìÑ\",\n                crate::core::review::CommitStatus::Staged => \"üìë\",\n                crate::core::review::CommitStatus::Modified => \"üìù\",\n                crate::core::review::CommitStatus::Untracked => \"üìÑ\",\n            };\n\n            let file_progress = (index as f64 / total_files) * 100.0;\n            println!(\n                \"  {status_indicator} Analyzing: {file_path} ({commit_status:?}) [{file_progress:.1}%]\"\n            );\n\n            if let Ok(content) = git_analyzer.get_file_content(file_path, &args.target_branch) {\n                let request = AnalysisRequest {\n                    file_path: file_path.clone(),\n                    content,\n                    language: detect_language(file_path),\n                    commit_status,\n                };\n\n                match ai_analyzer\n                    .analyze_file(request, Some(progress_tx.clone()))\n                    .await\n                {\n                    Ok(file_issues) => {\n                        for issue in file_issues {\n                            match issue.severity.as_str() {\n                                \"Critical\" => review.critical_issues += 1,\n                                \"High\" => review.high_issues += 1,\n                                \"Medium\" => review.medium_issues += 1,\n                                \"Low\" => review.low_issues += 1,\n                                _ => {}\n                            }\n                            review.issues.push(issue);\n                            review.issues_count += 1;\n                        }\n                    }\n                    Err(e) => {\n                        eprintln!(\"‚ö†Ô∏è  Failed to analyze {file_path}: {e}\");\n                    }\n                }\n            }\n        }\n    }\n\n    // Close progress channel\n    drop(progress_tx);\n\n    println!(\n        \"‚úÖ AI analysis complete! Found {} issues.\",\n        review.issues_count\n    );\n    Ok(review)\n}\n\npub fn perform_analysis(args: &Args) -> Result<Review> {\n    // Create a simple runtime for synchronous callers\n    let rt = tokio::runtime::Runtime::new()?;\n    rt.block_on(perform_analysis_with_progress(args, None))\n}\n\nfn should_analyze_file(file_path: &str, args: &Args) -> bool {\n    // Check include patterns\n    if !args.include_patterns.is_empty() {\n        let matches_include = args\n            .include_patterns\n            .iter()\n            .any(|pattern| file_matches_pattern(file_path, pattern));\n        if !matches_include {\n            return false;\n        }\n    }\n\n    // Check exclude patterns\n    for pattern in &args.exclude_patterns {\n        if file_matches_pattern(file_path, pattern) {\n            return false;\n        }\n    }\n\n    // Default exclusions\n    if file_path.starts_with(\"target/\")\n        || file_path.contains(\"node_modules/\")\n        || file_path.ends_with(\".lock\")\n        || file_path.ends_with(\".log\")\n    {\n        return false;\n    }\n\n    true\n}\n\nfn file_matches_pattern(file_path: &str, pattern: &str) -> bool {\n    // Simple pattern matching - can be enhanced with glob\n    if pattern.starts_with(\"*.\") {\n        let extension = &pattern[1..];\n        file_path.ends_with(extension)\n    } else if let Some(prefix) = pattern.strip_suffix(\"/**\") {\n        file_path.starts_with(prefix)\n    } else {\n        file_path.contains(pattern)\n    }\n}\n\nfn detect_language(file_path: &str) -> String {\n    use std::path::Path;\n    let path = Path::new(file_path);\n    match path.extension().and_then(|ext| ext.to_str()) {\n        Some(\"rs\") => \"rust\".to_string(),\n        Some(\"js\") => \"javascript\".to_string(),\n        Some(\"ts\") => \"typescript\".to_string(),\n        Some(\"py\") => \"python\".to_string(),\n        Some(\"java\") => \"java\".to_string(),\n        Some(\"cpp\") | Some(\"cc\") | Some(\"cxx\") => \"cpp\".to_string(),\n        Some(\"c\") => \"c\".to_string(),\n        Some(\"go\") => \"go\".to_string(),\n        Some(\"php\") => \"php\".to_string(),\n        Some(\"rb\") => \"ruby\".to_string(),\n        Some(\"cs\") => \"csharp\".to_string(),\n        _ => \"unknown\".to_string(),\n    }\n}\n","traces":[{"line":10,"address":[],"length":0,"stats":{"Line":4}},{"line":14,"address":[],"length":0,"stats":{"Line":0}},{"line":16,"address":[],"length":0,"stats":{"Line":0}},{"line":19,"address":[],"length":0,"stats":{"Line":0}},{"line":21,"address":[],"length":0,"stats":{"Line":0}},{"line":24,"address":[],"length":0,"stats":{"Line":0}},{"line":30,"address":[],"length":0,"stats":{"Line":0}},{"line":34,"address":[],"length":0,"stats":{"Line":0}},{"line":35,"address":[],"length":0,"stats":{"Line":0}},{"line":36,"address":[],"length":0,"stats":{"Line":0}},{"line":37,"address":[],"length":0,"stats":{"Line":0}},{"line":38,"address":[],"length":0,"stats":{"Line":0}},{"line":40,"address":[],"length":0,"stats":{"Line":0}},{"line":43,"address":[],"length":0,"stats":{"Line":0}},{"line":46,"address":[],"length":0,"stats":{"Line":0}},{"line":47,"address":[],"length":0,"stats":{"Line":0}},{"line":48,"address":[],"length":0,"stats":{"Line":0}},{"line":50,"address":[],"length":0,"stats":{"Line":0}},{"line":51,"address":[],"length":0,"stats":{"Line":0}},{"line":53,"address":[],"length":0,"stats":{"Line":0}},{"line":55,"address":[],"length":0,"stats":{"Line":0}},{"line":61,"address":[],"length":0,"stats":{"Line":0}},{"line":62,"address":[],"length":0,"stats":{"Line":0}},{"line":63,"address":[],"length":0,"stats":{"Line":0}},{"line":64,"address":[],"length":0,"stats":{"Line":0}},{"line":65,"address":[],"length":0,"stats":{"Line":0}},{"line":66,"address":[],"length":0,"stats":{"Line":0}},{"line":68,"address":[],"length":0,"stats":{"Line":0}},{"line":69,"address":[],"length":0,"stats":{"Line":0}},{"line":70,"address":[],"length":0,"stats":{"Line":0}},{"line":71,"address":[],"length":0,"stats":{"Line":0}},{"line":72,"address":[],"length":0,"stats":{"Line":0}},{"line":75,"address":[],"length":0,"stats":{"Line":0}},{"line":76,"address":[],"length":0,"stats":{"Line":0}},{"line":77,"address":[],"length":0,"stats":{"Line":0}},{"line":80,"address":[],"length":0,"stats":{"Line":0}},{"line":82,"address":[],"length":0,"stats":{"Line":0}},{"line":84,"address":[],"length":0,"stats":{"Line":0}},{"line":88,"address":[],"length":0,"stats":{"Line":0}},{"line":89,"address":[],"length":0,"stats":{"Line":0}},{"line":90,"address":[],"length":0,"stats":{"Line":0}},{"line":92,"address":[],"length":0,"stats":{"Line":0}},{"line":93,"address":[],"length":0,"stats":{"Line":0}},{"line":94,"address":[],"length":0,"stats":{"Line":0}},{"line":95,"address":[],"length":0,"stats":{"Line":0}},{"line":96,"address":[],"length":0,"stats":{"Line":0}},{"line":97,"address":[],"length":0,"stats":{"Line":0}},{"line":98,"address":[],"length":0,"stats":{"Line":0}},{"line":99,"address":[],"length":0,"stats":{"Line":0}},{"line":101,"address":[],"length":0,"stats":{"Line":0}},{"line":102,"address":[],"length":0,"stats":{"Line":0}},{"line":105,"address":[],"length":0,"stats":{"Line":0}},{"line":106,"address":[],"length":0,"stats":{"Line":0}},{"line":114,"address":[],"length":0,"stats":{"Line":0}},{"line":116,"address":[],"length":0,"stats":{"Line":0}},{"line":117,"address":[],"length":0,"stats":{"Line":0}},{"line":120,"address":[],"length":0,"stats":{"Line":0}},{"line":123,"address":[],"length":0,"stats":{"Line":4}},{"line":125,"address":[],"length":0,"stats":{"Line":8}},{"line":126,"address":[],"length":0,"stats":{"Line":0}},{"line":129,"address":[],"length":0,"stats":{"Line":0}},{"line":131,"address":[],"length":0,"stats":{"Line":0}},{"line":132,"address":[],"length":0,"stats":{"Line":0}},{"line":133,"address":[],"length":0,"stats":{"Line":0}},{"line":135,"address":[],"length":0,"stats":{"Line":0}},{"line":136,"address":[],"length":0,"stats":{"Line":0}},{"line":137,"address":[],"length":0,"stats":{"Line":0}},{"line":142,"address":[],"length":0,"stats":{"Line":0}},{"line":143,"address":[],"length":0,"stats":{"Line":0}},{"line":144,"address":[],"length":0,"stats":{"Line":0}},{"line":149,"address":[],"length":0,"stats":{"Line":0}},{"line":150,"address":[],"length":0,"stats":{"Line":0}},{"line":151,"address":[],"length":0,"stats":{"Line":0}},{"line":152,"address":[],"length":0,"stats":{"Line":0}},{"line":154,"address":[],"length":0,"stats":{"Line":0}},{"line":157,"address":[],"length":0,"stats":{"Line":0}},{"line":160,"address":[],"length":0,"stats":{"Line":0}},{"line":162,"address":[],"length":0,"stats":{"Line":0}},{"line":163,"address":[],"length":0,"stats":{"Line":0}},{"line":164,"address":[],"length":0,"stats":{"Line":0}},{"line":165,"address":[],"length":0,"stats":{"Line":0}},{"line":166,"address":[],"length":0,"stats":{"Line":0}},{"line":168,"address":[],"length":0,"stats":{"Line":0}},{"line":172,"address":[],"length":0,"stats":{"Line":0}},{"line":174,"address":[],"length":0,"stats":{"Line":0}},{"line":175,"address":[],"length":0,"stats":{"Line":0}},{"line":176,"address":[],"length":0,"stats":{"Line":0}},{"line":177,"address":[],"length":0,"stats":{"Line":0}},{"line":178,"address":[],"length":0,"stats":{"Line":0}},{"line":179,"address":[],"length":0,"stats":{"Line":0}},{"line":180,"address":[],"length":0,"stats":{"Line":0}},{"line":181,"address":[],"length":0,"stats":{"Line":0}},{"line":182,"address":[],"length":0,"stats":{"Line":0}},{"line":183,"address":[],"length":0,"stats":{"Line":0}},{"line":184,"address":[],"length":0,"stats":{"Line":0}},{"line":185,"address":[],"length":0,"stats":{"Line":0}},{"line":186,"address":[],"length":0,"stats":{"Line":0}},{"line":187,"address":[],"length":0,"stats":{"Line":0}}],"covered":3,"coverable":98},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","core","git.rs"],"content":"use anyhow::{anyhow, Result};\nuse git2::{Repository, Status};\n\npub struct GitAnalyzer {\n    repo: Repository,\n}\n\nimpl GitAnalyzer {\n    pub fn new(repo_path: &str) -> Result<Self> {\n        let repo =\n            Repository::open(repo_path).map_err(|e| anyhow!(\"Failed to open repository: {}\", e))?;\n\n        Ok(Self { repo })\n    }\n\n    pub fn get_changed_files(\n        &self,\n        source_branch: &str,\n        target_branch: &str,\n    ) -> Result<Vec<String>> {\n        let mut all_files = Vec::new();\n        let mut committed_files = std::collections::HashSet::new();\n\n        // Get committed changes between branches\n        if source_branch != target_branch {\n            let source_commit = self.get_commit(source_branch)?;\n            let target_commit = self.get_commit(target_branch)?;\n\n            let source_tree = source_commit.tree()?;\n            let target_tree = target_commit.tree()?;\n\n            let diff = self\n                .repo\n                .diff_tree_to_tree(Some(&source_tree), Some(&target_tree), None)?;\n\n            diff.foreach(\n                &mut |delta, _progress| {\n                    if let Some(file) = delta.new_file().path() {\n                        let file_path = file.to_string_lossy().to_string();\n                        committed_files.insert(file_path.clone());\n                        all_files.push(file_path);\n                    }\n                    true\n                },\n                None,\n                None,\n                None,\n            )?;\n        }\n\n        // Get uncommitted changes (staged and modified)\n        let uncommitted_files = self.get_uncommitted_files()?;\n        for file in uncommitted_files {\n            if !committed_files.contains(&file) {\n                all_files.push(file);\n            }\n        }\n\n        Ok(all_files)\n    }\n\n    pub fn get_uncommitted_files(&self) -> Result<Vec<String>> {\n        let mut files = Vec::new();\n        let statuses = self.repo.statuses(None)?;\n\n        for entry in statuses.iter() {\n            if let Some(path) = entry.path() {\n                files.push(path.to_string());\n            }\n        }\n\n        Ok(files)\n    }\n\n    pub fn get_file_status(&self, file_path: &str) -> Result<super::review::CommitStatus> {\n        let statuses = self.repo.statuses(None)?;\n\n        for entry in statuses.iter() {\n            if let Some(path) = entry.path() {\n                if path == file_path {\n                    let status = entry.status();\n\n                    if status.contains(Status::INDEX_NEW)\n                        || status.contains(Status::INDEX_MODIFIED)\n                        || status.contains(Status::INDEX_DELETED)\n                    {\n                        return Ok(super::review::CommitStatus::Staged);\n                    }\n\n                    if status.contains(Status::WT_NEW) {\n                        return Ok(super::review::CommitStatus::Untracked);\n                    }\n\n                    if status.contains(Status::WT_MODIFIED) || status.contains(Status::WT_DELETED) {\n                        return Ok(super::review::CommitStatus::Modified);\n                    }\n                }\n            }\n        }\n\n        // If not in status, assume it's committed\n        Ok(super::review::CommitStatus::Committed)\n    }\n\n    pub fn get_file_content(&self, file_path: &str, branch: &str) -> Result<String> {\n        // First check if file has uncommitted changes\n        let file_status = self.get_file_status(file_path)?;\n\n        match file_status {\n            super::review::CommitStatus::Untracked | super::review::CommitStatus::Modified => {\n                // Read from working directory\n                let full_path = self\n                    .repo\n                    .workdir()\n                    .ok_or_else(|| anyhow!(\"Repository has no working directory\"))?\n                    .join(file_path);\n\n                std::fs::read_to_string(&full_path)\n                    .map_err(|e| anyhow!(\"Failed to read file from working directory: {}\", e))\n            }\n            super::review::CommitStatus::Staged => {\n                // Try to read from index first, fall back to working directory\n                match self.get_file_content_from_index(file_path) {\n                    Ok(content) => Ok(content),\n                    Err(_) => {\n                        let full_path = self\n                            .repo\n                            .workdir()\n                            .ok_or_else(|| anyhow!(\"Repository has no working directory\"))?\n                            .join(file_path);\n\n                        std::fs::read_to_string(&full_path).map_err(|e| {\n                            anyhow!(\"Failed to read file from working directory: {}\", e)\n                        })\n                    }\n                }\n            }\n            super::review::CommitStatus::Committed => {\n                // Read from commit\n                let commit = self.get_commit(branch)?;\n                let tree = commit.tree()?;\n\n                let entry = tree.get_path(std::path::Path::new(file_path))?;\n                let object = self\n                    .repo\n                    .find_object(entry.id(), Some(git2::ObjectType::Blob))?;\n                let blob = object\n                    .as_blob()\n                    .ok_or_else(|| anyhow!(\"Object is not a blob\"))?;\n\n                let content = std::str::from_utf8(blob.content())\n                    .map_err(|e| anyhow!(\"Invalid UTF-8 in file: {}\", e))?;\n\n                Ok(content.to_string())\n            }\n        }\n    }\n\n    fn get_file_content_from_index(&self, file_path: &str) -> Result<String> {\n        let index = self.repo.index()?;\n        let entry = index\n            .get_path(std::path::Path::new(file_path), 0)\n            .ok_or_else(|| anyhow!(\"File not found in index\"))?;\n\n        let object = self\n            .repo\n            .find_object(entry.id, Some(git2::ObjectType::Blob))?;\n        let blob = object\n            .as_blob()\n            .ok_or_else(|| anyhow!(\"Object is not a blob\"))?;\n\n        let content = std::str::from_utf8(blob.content())\n            .map_err(|e| anyhow!(\"Invalid UTF-8 in file: {}\", e))?;\n\n        Ok(content.to_string())\n    }\n\n    fn get_commit(&self, branch_name: &str) -> Result<git2::Commit<'_>> {\n        let reference = if branch_name == \"HEAD\" {\n            self.repo.head()?\n        } else {\n            self.repo\n                .find_reference(&format!(\"refs/heads/{branch_name}\"))?\n        };\n\n        let oid = reference\n            .target()\n            .ok_or_else(|| anyhow!(\"Invalid reference\"))?;\n\n        self.repo\n            .find_commit(oid)\n            .map_err(|e| anyhow!(\"Failed to find commit: {}\", e))\n    }\n}\n","traces":[{"line":9,"address":[],"length":0,"stats":{"Line":10}},{"line":10,"address":[],"length":0,"stats":{"Line":8}},{"line":11,"address":[],"length":0,"stats":{"Line":34}},{"line":13,"address":[],"length":0,"stats":{"Line":0}},{"line":16,"address":[],"length":0,"stats":{"Line":4}},{"line":21,"address":[],"length":0,"stats":{"Line":8}},{"line":22,"address":[],"length":0,"stats":{"Line":8}},{"line":25,"address":[],"length":0,"stats":{"Line":4}},{"line":26,"address":[],"length":0,"stats":{"Line":12}},{"line":27,"address":[],"length":0,"stats":{"Line":0}},{"line":29,"address":[],"length":0,"stats":{"Line":0}},{"line":30,"address":[],"length":0,"stats":{"Line":0}},{"line":32,"address":[],"length":0,"stats":{"Line":0}},{"line":33,"address":[],"length":0,"stats":{"Line":0}},{"line":34,"address":[],"length":0,"stats":{"Line":0}},{"line":36,"address":[],"length":0,"stats":{"Line":0}},{"line":37,"address":[],"length":0,"stats":{"Line":0}},{"line":38,"address":[],"length":0,"stats":{"Line":0}},{"line":39,"address":[],"length":0,"stats":{"Line":0}},{"line":40,"address":[],"length":0,"stats":{"Line":0}},{"line":41,"address":[],"length":0,"stats":{"Line":0}},{"line":43,"address":[],"length":0,"stats":{"Line":0}},{"line":45,"address":[],"length":0,"stats":{"Line":0}},{"line":46,"address":[],"length":0,"stats":{"Line":0}},{"line":47,"address":[],"length":0,"stats":{"Line":0}},{"line":52,"address":[],"length":0,"stats":{"Line":2}},{"line":53,"address":[],"length":0,"stats":{"Line":1}},{"line":54,"address":[],"length":0,"stats":{"Line":0}},{"line":55,"address":[],"length":0,"stats":{"Line":0}},{"line":59,"address":[],"length":0,"stats":{"Line":0}},{"line":62,"address":[],"length":0,"stats":{"Line":2}},{"line":63,"address":[],"length":0,"stats":{"Line":4}},{"line":64,"address":[],"length":0,"stats":{"Line":8}},{"line":66,"address":[],"length":0,"stats":{"Line":1}},{"line":67,"address":[],"length":0,"stats":{"Line":1}},{"line":68,"address":[],"length":0,"stats":{"Line":0}},{"line":72,"address":[],"length":0,"stats":{"Line":0}},{"line":75,"address":[],"length":0,"stats":{"Line":2}},{"line":76,"address":[],"length":0,"stats":{"Line":8}},{"line":78,"address":[],"length":0,"stats":{"Line":0}},{"line":79,"address":[],"length":0,"stats":{"Line":0}},{"line":80,"address":[],"length":0,"stats":{"Line":0}},{"line":81,"address":[],"length":0,"stats":{"Line":0}},{"line":83,"address":[],"length":0,"stats":{"Line":0}},{"line":84,"address":[],"length":0,"stats":{"Line":0}},{"line":85,"address":[],"length":0,"stats":{"Line":0}},{"line":87,"address":[],"length":0,"stats":{"Line":0}},{"line":90,"address":[],"length":0,"stats":{"Line":0}},{"line":91,"address":[],"length":0,"stats":{"Line":0}},{"line":94,"address":[],"length":0,"stats":{"Line":0}},{"line":95,"address":[],"length":0,"stats":{"Line":0}},{"line":102,"address":[],"length":0,"stats":{"Line":2}},{"line":105,"address":[],"length":0,"stats":{"Line":2}},{"line":107,"address":[],"length":0,"stats":{"Line":8}},{"line":109,"address":[],"length":0,"stats":{"Line":0}},{"line":112,"address":[],"length":0,"stats":{"Line":0}},{"line":113,"address":[],"length":0,"stats":{"Line":0}},{"line":115,"address":[],"length":0,"stats":{"Line":0}},{"line":116,"address":[],"length":0,"stats":{"Line":0}},{"line":118,"address":[],"length":0,"stats":{"Line":0}},{"line":119,"address":[],"length":0,"stats":{"Line":0}},{"line":123,"address":[],"length":0,"stats":{"Line":0}},{"line":124,"address":[],"length":0,"stats":{"Line":0}},{"line":126,"address":[],"length":0,"stats":{"Line":0}},{"line":127,"address":[],"length":0,"stats":{"Line":0}},{"line":129,"address":[],"length":0,"stats":{"Line":0}},{"line":130,"address":[],"length":0,"stats":{"Line":0}},{"line":132,"address":[],"length":0,"stats":{"Line":0}},{"line":133,"address":[],"length":0,"stats":{"Line":0}},{"line":140,"address":[],"length":0,"stats":{"Line":4}},{"line":141,"address":[],"length":0,"stats":{"Line":2}},{"line":143,"address":[],"length":0,"stats":{"Line":2}},{"line":144,"address":[],"length":0,"stats":{"Line":1}},{"line":145,"address":[],"length":0,"stats":{"Line":0}},{"line":146,"address":[],"length":0,"stats":{"Line":0}},{"line":147,"address":[],"length":0,"stats":{"Line":1}},{"line":149,"address":[],"length":0,"stats":{"Line":0}},{"line":151,"address":[],"length":0,"stats":{"Line":1}},{"line":152,"address":[],"length":0,"stats":{"Line":0}},{"line":154,"address":[],"length":0,"stats":{"Line":0}},{"line":159,"address":[],"length":0,"stats":{"Line":0}},{"line":160,"address":[],"length":0,"stats":{"Line":0}},{"line":161,"address":[],"length":0,"stats":{"Line":0}},{"line":162,"address":[],"length":0,"stats":{"Line":0}},{"line":163,"address":[],"length":0,"stats":{"Line":0}},{"line":165,"address":[],"length":0,"stats":{"Line":0}},{"line":166,"address":[],"length":0,"stats":{"Line":0}},{"line":167,"address":[],"length":0,"stats":{"Line":0}},{"line":168,"address":[],"length":0,"stats":{"Line":0}},{"line":170,"address":[],"length":0,"stats":{"Line":0}},{"line":172,"address":[],"length":0,"stats":{"Line":0}},{"line":173,"address":[],"length":0,"stats":{"Line":0}},{"line":175,"address":[],"length":0,"stats":{"Line":0}},{"line":178,"address":[],"length":0,"stats":{"Line":5}},{"line":179,"address":[],"length":0,"stats":{"Line":7}},{"line":180,"address":[],"length":0,"stats":{"Line":4}},{"line":182,"address":[],"length":0,"stats":{"Line":3}},{"line":183,"address":[],"length":0,"stats":{"Line":3}},{"line":186,"address":[],"length":0,"stats":{"Line":2}},{"line":188,"address":[],"length":0,"stats":{"Line":0}},{"line":190,"address":[],"length":0,"stats":{"Line":0}},{"line":191,"address":[],"length":0,"stats":{"Line":0}},{"line":192,"address":[],"length":0,"stats":{"Line":0}}],"covered":32,"coverable":103},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","core","mod.rs"],"content":"pub mod ai_analyzer;\npub mod analysis;\npub mod git;\npub mod review;\n\nuse crate::args::{Args, OutputFormat};\nuse anyhow::Result;\n\npub fn run_cli_mode(args: Args) -> Result<(), Box<dyn std::error::Error>> {\n    println!(\"üîç AI Code Review Tool v0.2.0 (CLI Mode)\");\n    println!(\"üìÇ Repository: {}\", args.repo_path);\n    println!(\n        \"üåø Comparing: {} ‚Üí {}\",\n        args.source_branch, args.target_branch\n    );\n\n    if args.show_credits {\n        show_credits();\n        return Ok(());\n    }\n\n    // Perform analysis\n    let review_result = analysis::perform_analysis(&args)?;\n\n    // Output results\n    match args.output_format {\n        OutputFormat::Summary => print_summary(&review_result),\n        OutputFormat::Detailed => print_detailed(&review_result),\n        OutputFormat::Json => print_json(&review_result)?,\n        OutputFormat::Markdown => print_markdown(&review_result),\n    }\n\n    Ok(())\n}\n\nfn show_credits() {\n    println!(\"üéâ AI Code Buddy v0.2.0 - Credits & Contributors\");\n    println!(\"==========================================\");\n    println!();\n    println!(\"üìö About AI Code Buddy:\");\n    println!(\"An intelligent code analysis tool with elegant Bevy-powered TUI\");\n    println!(\"that provides comprehensive code reviews with AI assistance.\");\n    println!();\n    println!(\"üîß Built with:\");\n    println!(\"  ‚Ä¢ Rust ü¶Ä - Systems programming language\");\n    println!(\"  ‚Ä¢ Bevy - Data-driven game engine for TUI\");\n    println!(\"  ‚Ä¢ Ratatui - Terminal UI library\");\n    println!(\"  ‚Ä¢ Git2 - Git repository analysis\");\n    println!(\"  ‚Ä¢ Kalosm - AI/ML framework\");\n    println!();\n    println!(\"üí° Want to contribute? Visit: https://github.com/edgarhsanchez/ai_code_buddy\");\n}\n\nfn print_summary(review: &review::Review) {\n    println!(\"\\nüéØ Code Review Summary\");\n    println!(\"==========================================\");\n    println!(\"üìÅ Files analyzed: {}\", review.files_count);\n    println!(\"üêõ Total issues: {}\", review.issues_count);\n    println!(\"‚ö†Ô∏è  Severity breakdown:\");\n    println!(\"  üö® Critical: {}\", review.critical_issues);\n    println!(\"  ‚ö†Ô∏è  High: {}\", review.high_issues);\n    println!(\"  üî∂ Medium: {}\", review.medium_issues);\n    println!(\"  ‚ÑπÔ∏è  Low: {}\", review.low_issues);\n}\n\nfn print_detailed(review: &review::Review) {\n    print_summary(review);\n    println!(\"\\nüîç Detailed Analysis:\");\n    println!(\"==========================================\");\n    for issue in &review.issues {\n        let severity_icon = match issue.severity.as_str() {\n            \"Critical\" => \"üö®\",\n            \"High\" => \"‚ö†Ô∏è\",\n            \"Medium\" => \"üî∂\",\n            \"Low\" => \"‚ÑπÔ∏è\",\n            _ => \"üí°\",\n        };\n        let commit_icon = match issue.commit_status {\n            review::CommitStatus::Committed => \"‚úÖ\",\n            review::CommitStatus::Staged => \"üü°\",\n            review::CommitStatus::Modified => \"üî¥\",\n            review::CommitStatus::Untracked => \"üÜï\",\n        };\n        let status_text = match issue.commit_status {\n            review::CommitStatus::Committed => \"committed\",\n            review::CommitStatus::Staged => \"staged\",\n            review::CommitStatus::Modified => \"modified\",\n            review::CommitStatus::Untracked => \"untracked\",\n        };\n        println!(\n            \"{} {} {} (Line {}) [{}]: {}\",\n            severity_icon, commit_icon, issue.file, issue.line, status_text, issue.description\n        );\n    }\n}\n\nfn print_json(review: &review::Review) -> Result<()> {\n    let json = serde_json::to_string_pretty(review)?;\n    println!(\"{json}\");\n    Ok(())\n}\n\nfn print_markdown(review: &review::Review) {\n    println!(\"# Code Review Report\\n\");\n    println!(\"## Summary\\n\");\n    println!(\"- **Files analyzed**: {}\", review.files_count);\n    println!(\"- **Total issues**: {}\", review.issues_count);\n    println!(\"- **Critical**: {}\", review.critical_issues);\n    println!(\"- **High**: {}\", review.high_issues);\n    println!(\"- **Medium**: {}\", review.medium_issues);\n    println!(\"- **Low**: {}\", review.low_issues);\n    println!(\"\\n## Issues\\n\");\n    for issue in &review.issues {\n        let status_badge = match issue.commit_status {\n            review::CommitStatus::Committed => {\n                \"![Committed](https://img.shields.io/badge/status-committed-green)\"\n            }\n            review::CommitStatus::Staged => {\n                \"![Staged](https://img.shields.io/badge/status-staged-yellow)\"\n            }\n            review::CommitStatus::Modified => {\n                \"![Modified](https://img.shields.io/badge/status-modified-red)\"\n            }\n            review::CommitStatus::Untracked => {\n                \"![Untracked](https://img.shields.io/badge/status-untracked-blue)\"\n            }\n        };\n        println!(\n            \"- **{}:{}** - {} - {} {} - {}\",\n            issue.file, issue.line, issue.severity, status_badge, issue.category, issue.description\n        );\n    }\n}\n","traces":[{"line":9,"address":[],"length":0,"stats":{"Line":0}},{"line":10,"address":[],"length":0,"stats":{"Line":0}},{"line":11,"address":[],"length":0,"stats":{"Line":0}},{"line":12,"address":[],"length":0,"stats":{"Line":0}},{"line":13,"address":[],"length":0,"stats":{"Line":0}},{"line":17,"address":[],"length":0,"stats":{"Line":0}},{"line":18,"address":[],"length":0,"stats":{"Line":0}},{"line":19,"address":[],"length":0,"stats":{"Line":0}},{"line":23,"address":[],"length":0,"stats":{"Line":0}},{"line":26,"address":[],"length":0,"stats":{"Line":0}},{"line":27,"address":[],"length":0,"stats":{"Line":0}},{"line":28,"address":[],"length":0,"stats":{"Line":0}},{"line":29,"address":[],"length":0,"stats":{"Line":0}},{"line":30,"address":[],"length":0,"stats":{"Line":0}},{"line":33,"address":[],"length":0,"stats":{"Line":0}},{"line":36,"address":[],"length":0,"stats":{"Line":0}},{"line":37,"address":[],"length":0,"stats":{"Line":0}},{"line":38,"address":[],"length":0,"stats":{"Line":0}},{"line":39,"address":[],"length":0,"stats":{"Line":0}},{"line":40,"address":[],"length":0,"stats":{"Line":0}},{"line":41,"address":[],"length":0,"stats":{"Line":0}},{"line":42,"address":[],"length":0,"stats":{"Line":0}},{"line":43,"address":[],"length":0,"stats":{"Line":0}},{"line":44,"address":[],"length":0,"stats":{"Line":0}},{"line":45,"address":[],"length":0,"stats":{"Line":0}},{"line":46,"address":[],"length":0,"stats":{"Line":0}},{"line":47,"address":[],"length":0,"stats":{"Line":0}},{"line":48,"address":[],"length":0,"stats":{"Line":0}},{"line":49,"address":[],"length":0,"stats":{"Line":0}},{"line":50,"address":[],"length":0,"stats":{"Line":0}},{"line":51,"address":[],"length":0,"stats":{"Line":0}},{"line":54,"address":[],"length":0,"stats":{"Line":0}},{"line":55,"address":[],"length":0,"stats":{"Line":0}},{"line":56,"address":[],"length":0,"stats":{"Line":0}},{"line":57,"address":[],"length":0,"stats":{"Line":0}},{"line":58,"address":[],"length":0,"stats":{"Line":0}},{"line":59,"address":[],"length":0,"stats":{"Line":0}},{"line":60,"address":[],"length":0,"stats":{"Line":0}},{"line":61,"address":[],"length":0,"stats":{"Line":0}},{"line":62,"address":[],"length":0,"stats":{"Line":0}},{"line":63,"address":[],"length":0,"stats":{"Line":0}},{"line":66,"address":[],"length":0,"stats":{"Line":0}},{"line":67,"address":[],"length":0,"stats":{"Line":0}},{"line":68,"address":[],"length":0,"stats":{"Line":0}},{"line":69,"address":[],"length":0,"stats":{"Line":0}},{"line":70,"address":[],"length":0,"stats":{"Line":0}},{"line":71,"address":[],"length":0,"stats":{"Line":0}},{"line":72,"address":[],"length":0,"stats":{"Line":0}},{"line":73,"address":[],"length":0,"stats":{"Line":0}},{"line":74,"address":[],"length":0,"stats":{"Line":0}},{"line":75,"address":[],"length":0,"stats":{"Line":0}},{"line":76,"address":[],"length":0,"stats":{"Line":0}},{"line":78,"address":[],"length":0,"stats":{"Line":0}},{"line":79,"address":[],"length":0,"stats":{"Line":0}},{"line":80,"address":[],"length":0,"stats":{"Line":0}},{"line":81,"address":[],"length":0,"stats":{"Line":0}},{"line":82,"address":[],"length":0,"stats":{"Line":0}},{"line":84,"address":[],"length":0,"stats":{"Line":0}},{"line":85,"address":[],"length":0,"stats":{"Line":0}},{"line":86,"address":[],"length":0,"stats":{"Line":0}},{"line":87,"address":[],"length":0,"stats":{"Line":0}},{"line":88,"address":[],"length":0,"stats":{"Line":0}},{"line":90,"address":[],"length":0,"stats":{"Line":0}},{"line":91,"address":[],"length":0,"stats":{"Line":0}},{"line":97,"address":[],"length":0,"stats":{"Line":0}},{"line":98,"address":[],"length":0,"stats":{"Line":0}},{"line":99,"address":[],"length":0,"stats":{"Line":0}},{"line":100,"address":[],"length":0,"stats":{"Line":0}},{"line":103,"address":[],"length":0,"stats":{"Line":0}},{"line":104,"address":[],"length":0,"stats":{"Line":0}},{"line":105,"address":[],"length":0,"stats":{"Line":0}},{"line":106,"address":[],"length":0,"stats":{"Line":0}},{"line":107,"address":[],"length":0,"stats":{"Line":0}},{"line":108,"address":[],"length":0,"stats":{"Line":0}},{"line":109,"address":[],"length":0,"stats":{"Line":0}},{"line":110,"address":[],"length":0,"stats":{"Line":0}},{"line":111,"address":[],"length":0,"stats":{"Line":0}},{"line":112,"address":[],"length":0,"stats":{"Line":0}},{"line":113,"address":[],"length":0,"stats":{"Line":0}},{"line":114,"address":[],"length":0,"stats":{"Line":0}},{"line":116,"address":[],"length":0,"stats":{"Line":0}},{"line":119,"address":[],"length":0,"stats":{"Line":0}},{"line":122,"address":[],"length":0,"stats":{"Line":0}},{"line":125,"address":[],"length":0,"stats":{"Line":0}},{"line":128,"address":[],"length":0,"stats":{"Line":0}},{"line":129,"address":[],"length":0,"stats":{"Line":0}}],"covered":0,"coverable":86},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","core","review.rs"],"content":"use serde::{Deserialize, Serialize};\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct Review {\n    pub files_count: usize,\n    pub issues_count: usize,\n    pub critical_issues: usize,\n    pub high_issues: usize,\n    pub medium_issues: usize,\n    pub low_issues: usize,\n    pub issues: Vec<Issue>,\n}\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct Issue {\n    pub file: String,\n    pub line: usize,\n    pub severity: String,\n    pub category: String,\n    pub description: String,\n    pub commit_status: CommitStatus,\n}\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub enum CommitStatus {\n    Committed,\n    Staged,\n    Modified,\n    Untracked,\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","events","analysis.rs"],"content":"use bevy::prelude::*;\nuse bevy_ratatui::event::{KeyEvent, MouseEvent};\n\n#[derive(Debug, Clone, Event)]\npub enum AnalysisEvent {\n    KeyEvent(KeyEvent),\n    MouseEvent(MouseEvent),\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","events","app.rs"],"content":"use crate::bevy_states::app::AppState;\nuse bevy::prelude::*;\n\n#[derive(Debug, Clone, Event)]\npub enum AppEvent {\n    SwitchTo(AppState),\n    Exit,\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","events","overview.rs"],"content":"use bevy::prelude::*;\nuse bevy_ratatui::event::{KeyEvent, MouseEvent};\n\n#[derive(Debug, Clone, Event)]\npub enum OverviewEvent {\n    KeyEvent(KeyEvent),\n    MouseEvent(MouseEvent),\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","events","reports.rs"],"content":"use bevy::prelude::*;\nuse bevy_ratatui::event::{KeyEvent, MouseEvent};\n\n#[derive(Debug, Clone, Event)]\npub enum ReportsEvent {\n    KeyEvent(KeyEvent),\n    MouseEvent(MouseEvent),\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","lib.rs"],"content":"pub mod args;\npub mod core;\npub mod theme;\n\npub mod widgets {\n    pub mod analysis;\n    pub mod overview;\n    pub mod reports;\n}\n\npub mod widget_states {\n    pub mod analysis;\n    pub mod overview;\n    pub mod reports;\n}\n\npub mod events {\n    pub mod analysis;\n    pub mod app;\n    pub mod overview;\n    pub mod reports;\n}\n\npub mod bevy_states {\n    pub mod app;\n}\n\n// Re-export commonly used types for easier testing\npub use args::{Args, OutputFormat};\npub use core::analysis::perform_analysis;\npub use core::review::Review;\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","main.rs"],"content":"mod widgets {\n    pub mod analysis;\n    pub mod overview;\n    pub mod reports;\n}\n\nmod widget_states {\n    pub mod analysis;\n    pub mod overview;\n    pub mod reports;\n}\n\nmod events {\n    pub mod analysis;\n    pub mod app;\n    pub mod overview;\n    pub mod reports;\n}\n\nmod bevy_states {\n    pub mod app;\n}\n\nmod args;\nmod core;\nmod theme;\n\nuse std::{error::Error, io::stdout, time::Duration};\n\nuse bevy_states::app::AppState;\nuse clap::Parser;\nuse events::app::AppEvent;\nuse widgets::{analysis::AnalysisPlugin, overview::OverviewPlugin, reports::ReportsPlugin};\n\nuse bevy::{app::ScheduleRunnerPlugin, prelude::*, state::app::StatesPlugin};\nuse bevy_ratatui::{\n    event::{KeyEvent, MouseEvent},\n    RatatuiPlugins,\n};\nuse crossterm::{\n    cursor::{DisableBlinking, EnableBlinking, SetCursorStyle},\n    event::{DisableBracketedPaste, DisableMouseCapture, EnableBracketedPaste, EnableMouseCapture},\n    terminal::{disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen},\n    ExecutableCommand,\n};\n\nfn main() -> Result<(), Box<dyn Error>> {\n    // Parse command line arguments\n    let args = args::Args::parse();\n\n    // Handle CLI mode\n    if args.cli_mode {\n        return core::run_cli_mode(args);\n    }\n\n    let frame_rate = Duration::from_secs_f64(1.0 / 60.0);\n    stdout().execute(EnterAlternateScreen)?;\n    stdout().execute(EnableMouseCapture)?;\n    stdout().execute(EnableBlinking)?;\n    stdout().execute(SetCursorStyle::BlinkingBar)?;\n    stdout().execute(EnableBracketedPaste)?;\n    enable_raw_mode()?;\n\n    App::new()\n        .add_plugins(bevy::log::LogPlugin::default())\n        .add_plugins(bevy_tokio_tasks::TokioTasksPlugin::default())\n        .add_plugins(RatatuiPlugins {\n            enable_mouse_capture: true,\n            ..default()\n        })\n        .add_plugins(MinimalPlugins.set(ScheduleRunnerPlugin::run_loop(frame_rate)))\n        .add_plugins(StatesPlugin)\n        .insert_resource(args)\n        .init_state::<AppState>()\n        .add_plugins(OverviewPlugin)\n        .add_plugins(AnalysisPlugin)\n        .add_plugins(ReportsPlugin)\n        .add_systems(Startup, initialize_app)\n        .add_systems(PreUpdate, keyboard_events_handler)\n        .add_systems(PreUpdate, mouse_events_handler)\n        .add_systems(PreUpdate, app_events_handler)\n        .add_event::<AppEvent>()\n        .run();\n\n    disable_raw_mode()?;\n    stdout().execute(DisableBracketedPaste)?;\n    stdout().execute(SetCursorStyle::DefaultUserShape)?;\n    stdout().execute(DisableBlinking)?;\n    stdout().execute(DisableMouseCapture)?;\n    stdout().execute(LeaveAlternateScreen)?;\n    ratatui::restore();\n    Ok(())\n}\n\nfn initialize_app(mut next_state: ResMut<NextState<AppState>>, args: Res<args::Args>) {\n    println!(\"üöÄ AI Code Buddy v0.2.0 - Initializing...\");\n    println!(\"üìÇ Repository: {}\", args.repo_path);\n    println!(\n        \"üåø Branches: {} ‚Üí {}\",\n        args.source_branch, args.target_branch\n    );\n\n    next_state.set(AppState::Overview);\n}\n\nfn app_events_handler(\n    _app_state: Res<State<AppState>>,\n    mut send_app_state: ResMut<NextState<AppState>>,\n    mut app_events: EventReader<AppEvent>,\n    mut app_exit: EventWriter<AppExit>,\n) {\n    for event in app_events.read() {\n        match event {\n            AppEvent::SwitchTo(new_state) => {\n                send_app_state.set(*new_state);\n            }\n            AppEvent::Exit => {\n                app_exit.send_default();\n            }\n        }\n    }\n}\n\nfn keyboard_events_handler(\n    app_state: Res<State<AppState>>,\n    mut keyboard_events: EventReader<KeyEvent>,\n    mut overview_events: EventWriter<events::overview::OverviewEvent>,\n    mut analysis_events: EventWriter<events::analysis::AnalysisEvent>,\n    mut reports_events: EventWriter<events::reports::ReportsEvent>,\n    mut app_events: EventWriter<AppEvent>,\n) {\n    let app_state = app_state.get();\n\n    for event in keyboard_events.read() {\n        // Global key bindings\n        if let crossterm::event::KeyCode::Char('q') = event.code {\n            if event.kind == crossterm::event::KeyEventKind::Release {\n                app_events.send(AppEvent::Exit);\n                continue;\n            }\n        }\n\n        match app_state {\n            AppState::Overview => {\n                overview_events.send(events::overview::OverviewEvent::KeyEvent(event.clone()));\n            }\n            AppState::Analysis => {\n                analysis_events.send(events::analysis::AnalysisEvent::KeyEvent(event.clone()));\n            }\n            AppState::Reports => {\n                reports_events.send(events::reports::ReportsEvent::KeyEvent(event.clone()));\n            }\n        }\n    }\n}\n\nfn mouse_events_handler(\n    app_state: Res<State<AppState>>,\n    mut mouse_events: EventReader<MouseEvent>,\n    mut overview_events: EventWriter<events::overview::OverviewEvent>,\n    mut analysis_events: EventWriter<events::analysis::AnalysisEvent>,\n    mut reports_events: EventWriter<events::reports::ReportsEvent>,\n) {\n    let app_state = app_state.get();\n\n    for event in mouse_events.read() {\n        match app_state {\n            AppState::Overview => {\n                overview_events.send(events::overview::OverviewEvent::MouseEvent(*event));\n            }\n            AppState::Analysis => {\n                analysis_events.send(events::analysis::AnalysisEvent::MouseEvent(*event));\n            }\n            AppState::Reports => {\n                reports_events.send(events::reports::ReportsEvent::MouseEvent(*event));\n            }\n        }\n    }\n}\n","traces":[{"line":47,"address":[],"length":0,"stats":{"Line":0}},{"line":49,"address":[],"length":0,"stats":{"Line":0}},{"line":52,"address":[],"length":0,"stats":{"Line":0}},{"line":53,"address":[],"length":0,"stats":{"Line":0}},{"line":56,"address":[],"length":0,"stats":{"Line":0}},{"line":57,"address":[],"length":0,"stats":{"Line":0}},{"line":58,"address":[],"length":0,"stats":{"Line":0}},{"line":59,"address":[],"length":0,"stats":{"Line":0}},{"line":60,"address":[],"length":0,"stats":{"Line":0}},{"line":61,"address":[],"length":0,"stats":{"Line":0}},{"line":62,"address":[],"length":0,"stats":{"Line":0}},{"line":64,"address":[],"length":0,"stats":{"Line":0}},{"line":65,"address":[],"length":0,"stats":{"Line":0}},{"line":66,"address":[],"length":0,"stats":{"Line":0}},{"line":67,"address":[],"length":0,"stats":{"Line":0}},{"line":68,"address":[],"length":0,"stats":{"Line":0}},{"line":69,"address":[],"length":0,"stats":{"Line":0}},{"line":71,"address":[],"length":0,"stats":{"Line":0}},{"line":72,"address":[],"length":0,"stats":{"Line":0}},{"line":73,"address":[],"length":0,"stats":{"Line":0}},{"line":75,"address":[],"length":0,"stats":{"Line":0}},{"line":76,"address":[],"length":0,"stats":{"Line":0}},{"line":77,"address":[],"length":0,"stats":{"Line":0}},{"line":78,"address":[],"length":0,"stats":{"Line":0}},{"line":79,"address":[],"length":0,"stats":{"Line":0}},{"line":80,"address":[],"length":0,"stats":{"Line":0}},{"line":81,"address":[],"length":0,"stats":{"Line":0}},{"line":85,"address":[],"length":0,"stats":{"Line":0}},{"line":86,"address":[],"length":0,"stats":{"Line":0}},{"line":87,"address":[],"length":0,"stats":{"Line":0}},{"line":88,"address":[],"length":0,"stats":{"Line":0}},{"line":89,"address":[],"length":0,"stats":{"Line":0}},{"line":90,"address":[],"length":0,"stats":{"Line":0}},{"line":91,"address":[],"length":0,"stats":{"Line":0}},{"line":92,"address":[],"length":0,"stats":{"Line":0}},{"line":95,"address":[],"length":0,"stats":{"Line":0}},{"line":96,"address":[],"length":0,"stats":{"Line":0}},{"line":97,"address":[],"length":0,"stats":{"Line":0}},{"line":98,"address":[],"length":0,"stats":{"Line":0}},{"line":99,"address":[],"length":0,"stats":{"Line":0}},{"line":100,"address":[],"length":0,"stats":{"Line":0}},{"line":103,"address":[],"length":0,"stats":{"Line":0}},{"line":106,"address":[],"length":0,"stats":{"Line":0}},{"line":112,"address":[],"length":0,"stats":{"Line":0}},{"line":113,"address":[],"length":0,"stats":{"Line":0}},{"line":114,"address":[],"length":0,"stats":{"Line":0}},{"line":115,"address":[],"length":0,"stats":{"Line":0}},{"line":117,"address":[],"length":0,"stats":{"Line":0}},{"line":118,"address":[],"length":0,"stats":{"Line":0}},{"line":124,"address":[],"length":0,"stats":{"Line":0}},{"line":132,"address":[],"length":0,"stats":{"Line":0}},{"line":134,"address":[],"length":0,"stats":{"Line":0}},{"line":136,"address":[],"length":0,"stats":{"Line":0}},{"line":137,"address":[],"length":0,"stats":{"Line":0}},{"line":138,"address":[],"length":0,"stats":{"Line":0}},{"line":139,"address":[],"length":0,"stats":{"Line":0}},{"line":143,"address":[],"length":0,"stats":{"Line":0}},{"line":144,"address":[],"length":0,"stats":{"Line":0}},{"line":145,"address":[],"length":0,"stats":{"Line":0}},{"line":147,"address":[],"length":0,"stats":{"Line":0}},{"line":148,"address":[],"length":0,"stats":{"Line":0}},{"line":150,"address":[],"length":0,"stats":{"Line":0}},{"line":151,"address":[],"length":0,"stats":{"Line":0}},{"line":157,"address":[],"length":0,"stats":{"Line":0}},{"line":164,"address":[],"length":0,"stats":{"Line":0}},{"line":166,"address":[],"length":0,"stats":{"Line":0}},{"line":167,"address":[],"length":0,"stats":{"Line":0}},{"line":168,"address":[],"length":0,"stats":{"Line":0}},{"line":169,"address":[],"length":0,"stats":{"Line":0}},{"line":171,"address":[],"length":0,"stats":{"Line":0}},{"line":172,"address":[],"length":0,"stats":{"Line":0}},{"line":174,"address":[],"length":0,"stats":{"Line":0}},{"line":175,"address":[],"length":0,"stats":{"Line":0}}],"covered":0,"coverable":73},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","theme.rs"],"content":"use ratatui::style::{Color, Modifier, Style};\n\npub struct Theme {\n    pub primary: Color,\n    pub secondary: Color,\n    pub accent: Color,\n    pub background: Color,\n    pub error: Color,\n    pub warning: Color,\n    pub success: Color,\n    pub info: Color,\n    pub text_primary: Color,\n}\n\nimpl Default for Theme {\n    fn default() -> Self {\n        Self {\n            primary: Color::Cyan,\n            secondary: Color::Blue,\n            accent: Color::Magenta,\n            background: Color::Black,\n            error: Color::Red,\n            warning: Color::Yellow,\n            success: Color::Green,\n            info: Color::Blue,\n            text_primary: Color::White,\n        }\n    }\n}\n\nimpl Theme {\n    pub fn title_style(&self) -> Style {\n        Style::default()\n            .fg(self.primary)\n            .add_modifier(Modifier::BOLD)\n    }\n\n    pub fn header_style(&self) -> Style {\n        Style::default()\n            .fg(self.secondary)\n            .add_modifier(Modifier::BOLD)\n    }\n\n    pub fn success_style(&self) -> Style {\n        Style::default()\n            .fg(self.success)\n            .add_modifier(Modifier::BOLD)\n    }\n\n    pub fn error_style(&self) -> Style {\n        Style::default().fg(self.error).add_modifier(Modifier::BOLD)\n    }\n\n    pub fn warning_style(&self) -> Style {\n        Style::default()\n            .fg(self.warning)\n            .add_modifier(Modifier::BOLD)\n    }\n\n    pub fn info_style(&self) -> Style {\n        Style::default().fg(self.info)\n    }\n\n    pub fn selected_style(&self) -> Style {\n        Style::default()\n            .bg(self.primary)\n            .fg(self.background)\n            .add_modifier(Modifier::BOLD)\n    }\n\n    pub fn button_style(&self, pressed: bool) -> Style {\n        if pressed {\n            Style::default()\n                .bg(self.accent)\n                .fg(self.background)\n                .add_modifier(Modifier::BOLD)\n        } else {\n            Style::default().fg(self.primary)\n        }\n    }\n\n    pub fn button_hover_style(&self) -> Style {\n        Style::default()\n            .bg(self.secondary)\n            .fg(self.text_primary)\n            .add_modifier(Modifier::BOLD)\n    }\n\n    pub fn button_normal_style(&self) -> Style {\n        Style::default()\n            .fg(self.primary)\n            .add_modifier(Modifier::DIM)\n    }\n\n    pub fn primary_style(&self) -> Style {\n        Style::default().fg(self.primary)\n    }\n}\n\npub static THEME: Theme = Theme {\n    primary: Color::Cyan,\n    secondary: Color::Blue,\n    accent: Color::Magenta,\n    background: Color::Black,\n    error: Color::Red,\n    warning: Color::Yellow,\n    success: Color::Green,\n    info: Color::Blue,\n    text_primary: Color::White,\n};\n","traces":[{"line":16,"address":[],"length":0,"stats":{"Line":13}},{"line":32,"address":[],"length":0,"stats":{"Line":2}},{"line":33,"address":[],"length":0,"stats":{"Line":2}},{"line":34,"address":[],"length":0,"stats":{"Line":4}},{"line":35,"address":[],"length":0,"stats":{"Line":2}},{"line":38,"address":[],"length":0,"stats":{"Line":1}},{"line":39,"address":[],"length":0,"stats":{"Line":1}},{"line":40,"address":[],"length":0,"stats":{"Line":2}},{"line":41,"address":[],"length":0,"stats":{"Line":1}},{"line":44,"address":[],"length":0,"stats":{"Line":1}},{"line":45,"address":[],"length":0,"stats":{"Line":1}},{"line":46,"address":[],"length":0,"stats":{"Line":2}},{"line":47,"address":[],"length":0,"stats":{"Line":1}},{"line":50,"address":[],"length":0,"stats":{"Line":1}},{"line":51,"address":[],"length":0,"stats":{"Line":4}},{"line":54,"address":[],"length":0,"stats":{"Line":1}},{"line":55,"address":[],"length":0,"stats":{"Line":1}},{"line":56,"address":[],"length":0,"stats":{"Line":2}},{"line":57,"address":[],"length":0,"stats":{"Line":1}},{"line":60,"address":[],"length":0,"stats":{"Line":1}},{"line":61,"address":[],"length":0,"stats":{"Line":3}},{"line":64,"address":[],"length":0,"stats":{"Line":1}},{"line":65,"address":[],"length":0,"stats":{"Line":1}},{"line":66,"address":[],"length":0,"stats":{"Line":2}},{"line":67,"address":[],"length":0,"stats":{"Line":2}},{"line":68,"address":[],"length":0,"stats":{"Line":1}},{"line":71,"address":[],"length":0,"stats":{"Line":2}},{"line":72,"address":[],"length":0,"stats":{"Line":2}},{"line":73,"address":[],"length":0,"stats":{"Line":1}},{"line":74,"address":[],"length":0,"stats":{"Line":2}},{"line":75,"address":[],"length":0,"stats":{"Line":2}},{"line":76,"address":[],"length":0,"stats":{"Line":1}},{"line":78,"address":[],"length":0,"stats":{"Line":1}},{"line":82,"address":[],"length":0,"stats":{"Line":1}},{"line":83,"address":[],"length":0,"stats":{"Line":1}},{"line":84,"address":[],"length":0,"stats":{"Line":2}},{"line":85,"address":[],"length":0,"stats":{"Line":2}},{"line":86,"address":[],"length":0,"stats":{"Line":1}},{"line":89,"address":[],"length":0,"stats":{"Line":1}},{"line":90,"address":[],"length":0,"stats":{"Line":1}},{"line":91,"address":[],"length":0,"stats":{"Line":2}},{"line":92,"address":[],"length":0,"stats":{"Line":1}},{"line":95,"address":[],"length":0,"stats":{"Line":1}},{"line":96,"address":[],"length":0,"stats":{"Line":3}}],"covered":44,"coverable":44},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","widget_states","analysis.rs"],"content":"use crate::core::review::Review;\nuse bevy::prelude::*;\n\n#[derive(Debug, Clone, Resource)]\npub struct AnalysisWidgetState {\n    pub is_analyzing: bool,\n    pub progress: f64,\n    pub current_file: String,\n    pub review: Option<Review>,\n    pub selected_issue: usize,\n}\n\nimpl Default for AnalysisWidgetState {\n    fn default() -> Self {\n        Self {\n            is_analyzing: false,\n            progress: 0.0,\n            current_file: String::new(),\n            review: None,\n            selected_issue: 0,\n        }\n    }\n}\n\nimpl AnalysisWidgetState {\n    pub fn start_analysis(&mut self) {\n        self.is_analyzing = true;\n        self.progress = 0.0;\n        self.current_file.clear();\n        self.review = None;\n    }\n\n    pub fn update_progress(&mut self, progress: f64, current_file: String) {\n        self.progress = progress;\n        self.current_file = current_file;\n    }\n\n    pub fn complete_analysis(&mut self, review: Review) {\n        self.is_analyzing = false;\n        self.progress = 100.0;\n        self.review = Some(review);\n        self.selected_issue = 0;\n    }\n\n    pub fn move_issue_selection(&mut self, direction: i32) {\n        if let Some(review) = &self.review {\n            if !review.issues.is_empty() {\n                let new_selection = (self.selected_issue as i32 + direction)\n                    .max(0)\n                    .min(review.issues.len() as i32 - 1)\n                    as usize;\n                self.selected_issue = new_selection;\n            }\n        }\n    }\n}\n","traces":[{"line":14,"address":[],"length":0,"stats":{"Line":9}},{"line":18,"address":[],"length":0,"stats":{"Line":9}},{"line":26,"address":[],"length":0,"stats":{"Line":4}},{"line":27,"address":[],"length":0,"stats":{"Line":4}},{"line":28,"address":[],"length":0,"stats":{"Line":4}},{"line":29,"address":[],"length":0,"stats":{"Line":8}},{"line":30,"address":[],"length":0,"stats":{"Line":8}},{"line":33,"address":[],"length":0,"stats":{"Line":3}},{"line":34,"address":[],"length":0,"stats":{"Line":3}},{"line":35,"address":[],"length":0,"stats":{"Line":6}},{"line":38,"address":[],"length":0,"stats":{"Line":5}},{"line":39,"address":[],"length":0,"stats":{"Line":5}},{"line":40,"address":[],"length":0,"stats":{"Line":5}},{"line":41,"address":[],"length":0,"stats":{"Line":10}},{"line":42,"address":[],"length":0,"stats":{"Line":5}},{"line":45,"address":[],"length":0,"stats":{"Line":9}},{"line":46,"address":[],"length":0,"stats":{"Line":18}},{"line":47,"address":[],"length":0,"stats":{"Line":7}},{"line":48,"address":[],"length":0,"stats":{"Line":7}},{"line":49,"address":[],"length":0,"stats":{"Line":7}},{"line":50,"address":[],"length":0,"stats":{"Line":7}},{"line":51,"address":[],"length":0,"stats":{"Line":7}},{"line":52,"address":[],"length":0,"stats":{"Line":7}}],"covered":23,"coverable":23},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","widget_states","overview.rs"],"content":"use bevy::prelude::*;\nuse ratatui::layout::{Position, Rect};\nuse std::collections::HashMap;\n\n#[derive(Debug, Clone, Eq, PartialEq, Hash)]\npub enum OverviewComponent {\n    StartAnalysis,\n    ViewReports,\n    Settings,\n    Help,\n    Exit,\n}\n\n#[derive(Debug, Clone, Resource)]\npub struct OverviewWidgetState {\n    pub selected_component: OverviewComponent,\n    pub hovered_component: Option<OverviewComponent>,\n    pub registered_components: HashMap<OverviewComponent, Rect>,\n    pub repo_info: RepoInfo,\n    pub show_help: bool,\n}\n\n#[derive(Debug, Clone)]\npub struct RepoInfo {\n    pub path: String,\n    pub source_branch: String,\n    pub target_branch: String,\n    pub files_to_analyze: usize,\n}\n\nimpl Default for OverviewWidgetState {\n    fn default() -> Self {\n        Self {\n            selected_component: OverviewComponent::StartAnalysis,\n            hovered_component: None,\n            registered_components: HashMap::new(),\n            show_help: false,\n            repo_info: RepoInfo {\n                path: \".\".to_string(),\n                source_branch: \"main\".to_string(),\n                target_branch: \"HEAD\".to_string(),\n                files_to_analyze: 0,\n            },\n        }\n    }\n}\n\nimpl OverviewWidgetState {\n    pub fn is_over(&self, component: OverviewComponent, x: u16, y: u16) -> bool {\n        if let Some(rect) = self.registered_components.get(&component) {\n            rect.contains(Position { x, y })\n        } else {\n            false\n        }\n    }\n\n    pub fn update_hover(&mut self, x: u16, y: u16) {\n        self.hovered_component = None;\n        for (component, rect) in &self.registered_components {\n            if rect.contains(Position { x, y }) {\n                self.hovered_component = Some(component.clone());\n                break;\n            }\n        }\n    }\n\n    pub fn move_selection(&mut self, direction: SelectionDirection) {\n        self.selected_component = match direction {\n            SelectionDirection::Next => match self.selected_component {\n                OverviewComponent::StartAnalysis => OverviewComponent::ViewReports,\n                OverviewComponent::ViewReports => OverviewComponent::Settings,\n                OverviewComponent::Settings => OverviewComponent::Help,\n                OverviewComponent::Help => OverviewComponent::Exit,\n                OverviewComponent::Exit => OverviewComponent::StartAnalysis,\n            },\n            SelectionDirection::Previous => match self.selected_component {\n                OverviewComponent::StartAnalysis => OverviewComponent::Exit,\n                OverviewComponent::ViewReports => OverviewComponent::StartAnalysis,\n                OverviewComponent::Settings => OverviewComponent::ViewReports,\n                OverviewComponent::Help => OverviewComponent::Settings,\n                OverviewComponent::Exit => OverviewComponent::Help,\n            },\n        }\n    }\n}\n\n#[derive(Debug)]\npub enum SelectionDirection {\n    Next,\n    Previous,\n}\n","traces":[{"line":32,"address":[],"length":0,"stats":{"Line":8}},{"line":36,"address":[],"length":0,"stats":{"Line":16}},{"line":38,"address":[],"length":0,"stats":{"Line":8}},{"line":49,"address":[],"length":0,"stats":{"Line":8}},{"line":50,"address":[],"length":0,"stats":{"Line":23}},{"line":51,"address":[],"length":0,"stats":{"Line":0}},{"line":53,"address":[],"length":0,"stats":{"Line":1}},{"line":57,"address":[],"length":0,"stats":{"Line":5}},{"line":58,"address":[],"length":0,"stats":{"Line":5}},{"line":59,"address":[],"length":0,"stats":{"Line":38}},{"line":60,"address":[],"length":0,"stats":{"Line":36}},{"line":61,"address":[],"length":0,"stats":{"Line":3}},{"line":62,"address":[],"length":0,"stats":{"Line":0}},{"line":67,"address":[],"length":0,"stats":{"Line":10}},{"line":68,"address":[],"length":0,"stats":{"Line":10}},{"line":69,"address":[],"length":0,"stats":{"Line":5}},{"line":70,"address":[],"length":0,"stats":{"Line":1}},{"line":71,"address":[],"length":0,"stats":{"Line":1}},{"line":72,"address":[],"length":0,"stats":{"Line":1}},{"line":73,"address":[],"length":0,"stats":{"Line":1}},{"line":74,"address":[],"length":0,"stats":{"Line":1}},{"line":76,"address":[],"length":0,"stats":{"Line":5}},{"line":77,"address":[],"length":0,"stats":{"Line":1}},{"line":78,"address":[],"length":0,"stats":{"Line":1}},{"line":79,"address":[],"length":0,"stats":{"Line":1}},{"line":80,"address":[],"length":0,"stats":{"Line":1}},{"line":81,"address":[],"length":0,"stats":{"Line":1}}],"covered":25,"coverable":27},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","widget_states","reports.rs"],"content":"use crate::core::review::Review;\nuse bevy::prelude::*;\nuse serde_json;\n\n#[derive(Debug, Clone, Resource)]\npub struct ReportsWidgetState {\n    pub review: Option<Review>,\n    pub selected_format: ReportFormat,\n    pub export_status: ExportStatus,\n    pub generated_report: Option<String>,\n    pub view_mode: ViewMode,\n}\n\n#[derive(Debug, Clone, PartialEq)]\npub enum ViewMode {\n    Selection, // Format selection and preview\n    Report,    // Full report display\n}\n\n#[derive(Debug, Clone, PartialEq)]\npub enum ReportFormat {\n    Summary,\n    Detailed,\n    Json,\n    Markdown,\n}\n\n#[derive(Debug, Clone)]\npub enum ExportStatus {\n    None,\n    Exporting(String), // format\n    Success(String),   // path\n}\n\nimpl Default for ReportsWidgetState {\n    fn default() -> Self {\n        Self {\n            review: None,\n            selected_format: ReportFormat::Summary,\n            export_status: ExportStatus::None,\n            generated_report: None,\n            view_mode: ViewMode::Selection,\n        }\n    }\n}\n\nimpl ReportsWidgetState {\n    pub fn set_review(&mut self, review: Review) {\n        self.review = Some(review);\n    }\n\n    pub fn next_format(&mut self) {\n        self.selected_format = match self.selected_format {\n            ReportFormat::Summary => ReportFormat::Detailed,\n            ReportFormat::Detailed => ReportFormat::Json,\n            ReportFormat::Json => ReportFormat::Markdown,\n            ReportFormat::Markdown => ReportFormat::Summary,\n        };\n    }\n\n    pub fn previous_format(&mut self) {\n        self.selected_format = match self.selected_format {\n            ReportFormat::Summary => ReportFormat::Markdown,\n            ReportFormat::Detailed => ReportFormat::Summary,\n            ReportFormat::Json => ReportFormat::Detailed,\n            ReportFormat::Markdown => ReportFormat::Json,\n        };\n    }\n\n    pub fn start_export(&mut self, format: String) {\n        self.export_status = ExportStatus::Exporting(format);\n    }\n\n    pub fn complete_export(&mut self, path: String) {\n        self.export_status = ExportStatus::Success(path);\n    }\n\n    pub fn generate_report(&mut self) -> Option<String> {\n        if let Some(review) = &self.review {\n            let report_content = match self.selected_format {\n                ReportFormat::Summary => self.generate_summary_report(review),\n                ReportFormat::Detailed => self.generate_detailed_report(review),\n                ReportFormat::Json => self.generate_json_report(review),\n                ReportFormat::Markdown => self.generate_markdown_report(review),\n            };\n            self.generated_report = Some(report_content.clone());\n            self.view_mode = ViewMode::Report;\n            Some(report_content)\n        } else {\n            None\n        }\n    }\n\n    pub fn back_to_selection(&mut self) {\n        self.view_mode = ViewMode::Selection;\n    }\n\n    fn generate_summary_report(&self, review: &Review) -> String {\n        format!(\n            \"ü§ñ AI Code Review Summary\\n\\\n             ========================\\n\\n\\\n             üìä Analysis Results:\\n\\\n             ‚Ä¢ Files analyzed: {}\\n\\\n             ‚Ä¢ Total issues found: {}\\n\\n\\\n             üö® Issue Breakdown:\\n\\\n             ‚Ä¢ Critical: {} issues\\n\\\n             ‚Ä¢ High: {} issues\\n\\\n             ‚Ä¢ Medium: {} issues\\n\\\n             ‚Ä¢ Low: {} issues\\n\\n\\\n             üìã Recommendations:\\n\\\n             {} Focus on addressing Critical and High severity issues first.\\n\\\n             {} Review Medium issues for code quality improvements.\\n\\\n             {} Low severity issues can be addressed as time permits.\\n\\n\\\n             üéØ Next Steps:\\n\\\n             1. Review each Critical issue immediately\\n\\\n             2. Plan fixes for High severity issues\\n\\\n             3. Consider Medium issues for future iterations\\n\\\n             4. Use the detailed report for specific guidance\",\n            review.files_count,\n            review.issues_count,\n            review.critical_issues,\n            review.high_issues,\n            review.medium_issues,\n            review.low_issues,\n            if review.critical_issues > 0 {\n                \"‚ö†Ô∏è\"\n            } else {\n                \"‚úÖ\"\n            },\n            if review.medium_issues > 0 {\n                \"üìù\"\n            } else {\n                \"‚úÖ\"\n            },\n            if review.low_issues > 0 { \"üí°\" } else { \"‚úÖ\" }\n        )\n    }\n\n    fn generate_detailed_report(&self, review: &Review) -> String {\n        let mut report = format!(\n            \"ü§ñ AI Code Review - Detailed Report\\n\\\n             ===================================\\n\\n\\\n             üìä Overview:\\n\\\n             ‚Ä¢ Repository analyzed\\n\\\n             ‚Ä¢ Files processed: {}\\n\\\n             ‚Ä¢ Total issues: {}\\n\\n\",\n            review.files_count, review.issues_count\n        );\n\n        if review.issues.is_empty() {\n            report.push_str(\"üéâ No issues found! Your code looks great!\\n\");\n            return report;\n        }\n\n        // Group issues by severity\n        let mut critical_issues = Vec::new();\n        let mut high_issues = Vec::new();\n        let mut medium_issues = Vec::new();\n        let mut low_issues = Vec::new();\n\n        for issue in &review.issues {\n            match issue.severity.as_str() {\n                \"Critical\" => critical_issues.push(issue),\n                \"High\" => high_issues.push(issue),\n                \"Medium\" => medium_issues.push(issue),\n                \"Low\" => low_issues.push(issue),\n                _ => low_issues.push(issue),\n            }\n        }\n\n        // Critical issues\n        if !critical_issues.is_empty() {\n            report.push_str(\"üö® CRITICAL ISSUES (Immediate Action Required):\\n\");\n            report.push_str(\"=====================================================\\n\\n\");\n            for (i, issue) in critical_issues.iter().enumerate() {\n                report.push_str(&format!(\n                    \"{}. File: {}\\n   Line: {}\\n   Category: {}\\n   Issue: {}\\n\\n\",\n                    i + 1,\n                    issue.file,\n                    issue.line,\n                    issue.category,\n                    issue.description\n                ));\n            }\n        }\n\n        // High issues\n        if !high_issues.is_empty() {\n            report.push_str(\"‚ö†Ô∏è  HIGH PRIORITY ISSUES:\\n\");\n            report.push_str(\"=========================\\n\\n\");\n            for (i, issue) in high_issues.iter().enumerate() {\n                report.push_str(&format!(\n                    \"{}. File: {}\\n   Line: {}\\n   Category: {}\\n   Issue: {}\\n\\n\",\n                    i + 1,\n                    issue.file,\n                    issue.line,\n                    issue.category,\n                    issue.description\n                ));\n            }\n        }\n\n        // Medium issues\n        if !medium_issues.is_empty() {\n            report.push_str(\"üî∂ MEDIUM PRIORITY ISSUES:\\n\");\n            report.push_str(\"==========================\\n\\n\");\n            for (i, issue) in medium_issues.iter().enumerate() {\n                report.push_str(&format!(\n                    \"{}. File: {}\\n   Line: {}\\n   Category: {}\\n   Issue: {}\\n\\n\",\n                    i + 1,\n                    issue.file,\n                    issue.line,\n                    issue.category,\n                    issue.description\n                ));\n            }\n        }\n\n        // Low issues\n        if !low_issues.is_empty() {\n            report.push_str(\"‚ÑπÔ∏è  LOW PRIORITY ISSUES:\\n\");\n            report.push_str(\"========================\\n\\n\");\n            for (i, issue) in low_issues.iter().enumerate() {\n                report.push_str(&format!(\n                    \"{}. File: {}\\n   Line: {}\\n   Category: {}\\n   Issue: {}\\n\\n\",\n                    i + 1,\n                    issue.file,\n                    issue.line,\n                    issue.category,\n                    issue.description\n                ));\n            }\n        }\n\n        report.push_str(\"\\nüìù End of Report\\n\");\n        report\n    }\n\n    fn generate_json_report(&self, review: &Review) -> String {\n        // Use serde to generate proper JSON\n        match serde_json::to_string_pretty(review) {\n            Ok(json) => json,\n            Err(_) => \"Error generating JSON report\".to_string(),\n        }\n    }\n\n    fn generate_markdown_report(&self, review: &Review) -> String {\n        let mut report = format!(\n            \"# ü§ñ AI Code Review Report\\n\\n\\\n             ## üìä Summary\\n\\n\\\n             - **Files analyzed:** {}\\n\\\n             - **Total issues:** {}\\n\\\n             - **Critical issues:** {}\\n\\\n             - **High priority:** {}\\n\\\n             - **Medium priority:** {}\\n\\\n             - **Low priority:** {}\\n\\n\",\n            review.files_count,\n            review.issues_count,\n            review.critical_issues,\n            review.high_issues,\n            review.medium_issues,\n            review.low_issues\n        );\n\n        if review.issues.is_empty() {\n            report.push_str(\"## üéâ Results\\n\\nNo issues found! Your code looks great!\\n\");\n            return report;\n        }\n\n        report.push_str(\"## üìã Issues by Severity\\n\\n\");\n\n        // Group and display issues by severity\n        for severity in [\"Critical\", \"High\", \"Medium\", \"Low\"] {\n            let severity_issues: Vec<_> = review\n                .issues\n                .iter()\n                .filter(|issue| issue.severity == severity)\n                .collect();\n\n            if !severity_issues.is_empty() {\n                let icon = match severity {\n                    \"Critical\" => \"üö®\",\n                    \"High\" => \"‚ö†Ô∏è\",\n                    \"Medium\" => \"üî∂\",\n                    \"Low\" => \"‚ÑπÔ∏è\",\n                    _ => \"üìù\",\n                };\n\n                report.push_str(&format!(\"### {icon} {severity} Priority Issues\\n\\n\"));\n\n                for issue in severity_issues {\n                    report.push_str(&format!(\n                        \"- **File:** `{}`\\n  **Line:** {}\\n  **Category:** {}\\n  **Issue:** {}\\n\\n\",\n                        issue.file, issue.line, issue.category, issue.description\n                    ));\n                }\n            }\n        }\n\n        report.push_str(\"---\\n\\n*Report generated by AI Code Buddy*\\n\");\n        report\n    }\n}\n","traces":[{"line":36,"address":[],"length":0,"stats":{"Line":10}},{"line":48,"address":[],"length":0,"stats":{"Line":5}},{"line":49,"address":[],"length":0,"stats":{"Line":10}},{"line":52,"address":[],"length":0,"stats":{"Line":4}},{"line":53,"address":[],"length":0,"stats":{"Line":4}},{"line":54,"address":[],"length":0,"stats":{"Line":1}},{"line":55,"address":[],"length":0,"stats":{"Line":1}},{"line":56,"address":[],"length":0,"stats":{"Line":1}},{"line":57,"address":[],"length":0,"stats":{"Line":1}},{"line":61,"address":[],"length":0,"stats":{"Line":4}},{"line":62,"address":[],"length":0,"stats":{"Line":4}},{"line":63,"address":[],"length":0,"stats":{"Line":1}},{"line":64,"address":[],"length":0,"stats":{"Line":1}},{"line":65,"address":[],"length":0,"stats":{"Line":1}},{"line":66,"address":[],"length":0,"stats":{"Line":1}},{"line":70,"address":[],"length":0,"stats":{"Line":1}},{"line":71,"address":[],"length":0,"stats":{"Line":2}},{"line":74,"address":[],"length":0,"stats":{"Line":1}},{"line":75,"address":[],"length":0,"stats":{"Line":2}},{"line":78,"address":[],"length":0,"stats":{"Line":5}},{"line":79,"address":[],"length":0,"stats":{"Line":9}},{"line":80,"address":[],"length":0,"stats":{"Line":0}},{"line":81,"address":[],"length":0,"stats":{"Line":4}},{"line":82,"address":[],"length":0,"stats":{"Line":0}},{"line":83,"address":[],"length":0,"stats":{"Line":0}},{"line":84,"address":[],"length":0,"stats":{"Line":0}},{"line":86,"address":[],"length":0,"stats":{"Line":0}},{"line":87,"address":[],"length":0,"stats":{"Line":0}},{"line":88,"address":[],"length":0,"stats":{"Line":0}},{"line":90,"address":[],"length":0,"stats":{"Line":1}},{"line":94,"address":[],"length":0,"stats":{"Line":1}},{"line":95,"address":[],"length":0,"stats":{"Line":1}},{"line":98,"address":[],"length":0,"stats":{"Line":4}},{"line":99,"address":[],"length":0,"stats":{"Line":4}},{"line":125,"address":[],"length":0,"stats":{"Line":4}},{"line":126,"address":[],"length":0,"stats":{"Line":2}},{"line":128,"address":[],"length":0,"stats":{"Line":2}},{"line":130,"address":[],"length":0,"stats":{"Line":4}},{"line":131,"address":[],"length":0,"stats":{"Line":3}},{"line":133,"address":[],"length":0,"stats":{"Line":1}},{"line":135,"address":[],"length":0,"stats":{"Line":8}},{"line":139,"address":[],"length":0,"stats":{"Line":0}},{"line":140,"address":[],"length":0,"stats":{"Line":0}},{"line":150,"address":[],"length":0,"stats":{"Line":0}},{"line":151,"address":[],"length":0,"stats":{"Line":0}},{"line":152,"address":[],"length":0,"stats":{"Line":0}},{"line":156,"address":[],"length":0,"stats":{"Line":0}},{"line":157,"address":[],"length":0,"stats":{"Line":0}},{"line":158,"address":[],"length":0,"stats":{"Line":0}},{"line":159,"address":[],"length":0,"stats":{"Line":0}},{"line":161,"address":[],"length":0,"stats":{"Line":0}},{"line":162,"address":[],"length":0,"stats":{"Line":0}},{"line":163,"address":[],"length":0,"stats":{"Line":0}},{"line":164,"address":[],"length":0,"stats":{"Line":0}},{"line":165,"address":[],"length":0,"stats":{"Line":0}},{"line":166,"address":[],"length":0,"stats":{"Line":0}},{"line":167,"address":[],"length":0,"stats":{"Line":0}},{"line":172,"address":[],"length":0,"stats":{"Line":0}},{"line":173,"address":[],"length":0,"stats":{"Line":0}},{"line":174,"address":[],"length":0,"stats":{"Line":0}},{"line":175,"address":[],"length":0,"stats":{"Line":0}},{"line":176,"address":[],"length":0,"stats":{"Line":0}},{"line":177,"address":[],"length":0,"stats":{"Line":0}},{"line":178,"address":[],"length":0,"stats":{"Line":0}},{"line":179,"address":[],"length":0,"stats":{"Line":0}},{"line":180,"address":[],"length":0,"stats":{"Line":0}},{"line":181,"address":[],"length":0,"stats":{"Line":0}},{"line":182,"address":[],"length":0,"stats":{"Line":0}},{"line":188,"address":[],"length":0,"stats":{"Line":0}},{"line":189,"address":[],"length":0,"stats":{"Line":0}},{"line":190,"address":[],"length":0,"stats":{"Line":0}},{"line":191,"address":[],"length":0,"stats":{"Line":0}},{"line":192,"address":[],"length":0,"stats":{"Line":0}},{"line":193,"address":[],"length":0,"stats":{"Line":0}},{"line":194,"address":[],"length":0,"stats":{"Line":0}},{"line":195,"address":[],"length":0,"stats":{"Line":0}},{"line":196,"address":[],"length":0,"stats":{"Line":0}},{"line":197,"address":[],"length":0,"stats":{"Line":0}},{"line":198,"address":[],"length":0,"stats":{"Line":0}},{"line":204,"address":[],"length":0,"stats":{"Line":0}},{"line":205,"address":[],"length":0,"stats":{"Line":0}},{"line":206,"address":[],"length":0,"stats":{"Line":0}},{"line":207,"address":[],"length":0,"stats":{"Line":0}},{"line":208,"address":[],"length":0,"stats":{"Line":0}},{"line":209,"address":[],"length":0,"stats":{"Line":0}},{"line":210,"address":[],"length":0,"stats":{"Line":0}},{"line":211,"address":[],"length":0,"stats":{"Line":0}},{"line":212,"address":[],"length":0,"stats":{"Line":0}},{"line":213,"address":[],"length":0,"stats":{"Line":0}},{"line":214,"address":[],"length":0,"stats":{"Line":0}},{"line":220,"address":[],"length":0,"stats":{"Line":0}},{"line":221,"address":[],"length":0,"stats":{"Line":0}},{"line":222,"address":[],"length":0,"stats":{"Line":0}},{"line":223,"address":[],"length":0,"stats":{"Line":0}},{"line":224,"address":[],"length":0,"stats":{"Line":0}},{"line":225,"address":[],"length":0,"stats":{"Line":0}},{"line":226,"address":[],"length":0,"stats":{"Line":0}},{"line":227,"address":[],"length":0,"stats":{"Line":0}},{"line":228,"address":[],"length":0,"stats":{"Line":0}},{"line":229,"address":[],"length":0,"stats":{"Line":0}},{"line":230,"address":[],"length":0,"stats":{"Line":0}},{"line":235,"address":[],"length":0,"stats":{"Line":0}},{"line":236,"address":[],"length":0,"stats":{"Line":0}},{"line":239,"address":[],"length":0,"stats":{"Line":0}},{"line":241,"address":[],"length":0,"stats":{"Line":0}},{"line":242,"address":[],"length":0,"stats":{"Line":0}},{"line":243,"address":[],"length":0,"stats":{"Line":0}},{"line":247,"address":[],"length":0,"stats":{"Line":0}},{"line":248,"address":[],"length":0,"stats":{"Line":0}},{"line":265,"address":[],"length":0,"stats":{"Line":0}},{"line":266,"address":[],"length":0,"stats":{"Line":0}},{"line":267,"address":[],"length":0,"stats":{"Line":0}},{"line":270,"address":[],"length":0,"stats":{"Line":0}},{"line":273,"address":[],"length":0,"stats":{"Line":0}},{"line":274,"address":[],"length":0,"stats":{"Line":0}},{"line":275,"address":[],"length":0,"stats":{"Line":0}},{"line":277,"address":[],"length":0,"stats":{"Line":0}},{"line":280,"address":[],"length":0,"stats":{"Line":0}},{"line":281,"address":[],"length":0,"stats":{"Line":0}},{"line":282,"address":[],"length":0,"stats":{"Line":0}},{"line":283,"address":[],"length":0,"stats":{"Line":0}},{"line":284,"address":[],"length":0,"stats":{"Line":0}},{"line":285,"address":[],"length":0,"stats":{"Line":0}},{"line":286,"address":[],"length":0,"stats":{"Line":0}},{"line":289,"address":[],"length":0,"stats":{"Line":0}},{"line":291,"address":[],"length":0,"stats":{"Line":0}},{"line":292,"address":[],"length":0,"stats":{"Line":0}},{"line":293,"address":[],"length":0,"stats":{"Line":0}},{"line":294,"address":[],"length":0,"stats":{"Line":0}},{"line":300,"address":[],"length":0,"stats":{"Line":0}},{"line":301,"address":[],"length":0,"stats":{"Line":0}}],"covered":34,"coverable":131},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","widgets","analysis.rs"],"content":"use bevy::prelude::*;\nuse bevy_ratatui::{error::exit_on_error, terminal::RatatuiContext};\nuse bevy_tokio_tasks::TokioTasksRuntime;\nuse crossterm::event::{KeyCode, KeyEventKind};\nuse ratatui::{\n    buffer::Buffer,\n    layout::{Alignment, Constraint, Direction, Layout, Rect},\n    style::Style,\n    text::{Line, Span},\n    widgets::{Block, Borders, Gauge, List, ListItem, Paragraph, StatefulWidgetRef, WidgetRef},\n};\n\nuse crate::{\n    args::Args,\n    bevy_states::app::AppState,\n    core,\n    events::{analysis::AnalysisEvent, app::AppEvent},\n    theme::THEME,\n    widget_states::analysis::AnalysisWidgetState,\n};\n\npub struct AnalysisPlugin;\n\nimpl Plugin for AnalysisPlugin {\n    fn build(&self, app: &mut App) {\n        app.add_event::<AnalysisEvent>()\n            .init_resource::<AnalysisWidgetState>()\n            .add_systems(PreUpdate, analysis_event_handler)\n            .add_systems(Update, render_analysis.pipe(exit_on_error));\n    }\n}\n\nfn analysis_event_handler(\n    mut analysis_events: EventReader<AnalysisEvent>,\n    mut analysis_state: ResMut<AnalysisWidgetState>,\n    mut app_events: EventWriter<AppEvent>,\n    args: Res<Args>,\n    tokio_runtime: ResMut<TokioTasksRuntime>,\n) {\n    for event in analysis_events.read() {\n        match event {\n            AnalysisEvent::KeyEvent(key_event) => {\n                match key_event.code {\n                    KeyCode::Esc => {\n                        // Always allow going back to overview with Escape\n                        // If analysis is running, this will stop it and go back\n                        if analysis_state.is_analyzing {\n                            analysis_state.is_analyzing = false;\n                        }\n                        app_events.send(AppEvent::SwitchTo(AppState::Overview));\n                    }\n                    _ => {\n                        // Only handle other keys on release to avoid double-triggering\n                        if key_event.kind == KeyEventKind::Release {\n                            match key_event.code {\n                                KeyCode::Enter => {\n                                    if !analysis_state.is_analyzing\n                                        && analysis_state.review.is_none()\n                                    {\n                                        start_analysis(&mut analysis_state, &args, &tokio_runtime);\n                                    }\n                                }\n                                KeyCode::Up => {\n                                    if !analysis_state.is_analyzing {\n                                        analysis_state.move_issue_selection(-1);\n                                    }\n                                }\n                                KeyCode::Down => {\n                                    if !analysis_state.is_analyzing {\n                                        analysis_state.move_issue_selection(1);\n                                    }\n                                }\n                                KeyCode::Char('r') => {\n                                    if !analysis_state.is_analyzing {\n                                        app_events.send(AppEvent::SwitchTo(AppState::Reports));\n                                    }\n                                }\n                                _ => {}\n                            }\n                        }\n                    }\n                }\n            }\n            AnalysisEvent::MouseEvent(_mouse_event) => {\n                // Handle mouse events if needed\n            }\n        }\n    }\n}\n\nfn start_analysis(\n    analysis_state: &mut AnalysisWidgetState,\n    args: &Args,\n    tokio_runtime: &TokioTasksRuntime,\n) {\n    analysis_state.start_analysis();\n\n    let args = args.clone();\n    tokio_runtime.spawn_background_task(|mut ctx| async move {\n        // Create a channel for progress updates\n        use tokio::sync::mpsc;\n        let (progress_tx, mut progress_rx) = mpsc::unbounded_channel();\n\n        // Spawn task to handle progress updates\n        let ctx_clone = ctx.clone();\n        tokio::spawn(async move {\n            let mut ctx = ctx_clone;\n            while let Some((progress, current_file)) = progress_rx.recv().await {\n                ctx.run_on_main_thread(move |ctx| {\n                    if let Some(mut analysis_state) =\n                        ctx.world.get_resource_mut::<AnalysisWidgetState>()\n                    {\n                        analysis_state.update_progress(progress, current_file);\n                    }\n                })\n                .await;\n            }\n        });\n\n        // Create progress callback that sends to channel\n        let progress_callback = {\n            let tx = progress_tx.clone();\n            Box::new(move |progress: f64, current_file: String| {\n                let _ = tx.send((progress, current_file));\n            }) as Box<dyn Fn(f64, String) + Send + Sync>\n        };\n\n        // Perform actual AI-powered analysis\n        match core::analysis::perform_analysis_with_progress(&args, Some(progress_callback)).await {\n            Ok(review) => {\n                // Close progress channel\n                drop(progress_tx);\n\n                ctx.run_on_main_thread(move |ctx| {\n                    if let Some(mut analysis_state) =\n                        ctx.world.get_resource_mut::<AnalysisWidgetState>()\n                    {\n                        analysis_state.complete_analysis(review);\n                    }\n                })\n                .await;\n            }\n            Err(e) => {\n                eprintln!(\"AI analysis failed: {e}\");\n                drop(progress_tx);\n\n                ctx.run_on_main_thread(move |ctx| {\n                    if let Some(mut analysis_state) =\n                        ctx.world.get_resource_mut::<AnalysisWidgetState>()\n                    {\n                        analysis_state.is_analyzing = false;\n                    }\n                })\n                .await;\n            }\n        }\n    });\n}\n\nfn render_analysis(\n    app_state: Res<State<AppState>>,\n    mut ratatui_context: ResMut<RatatuiContext>,\n    mut analysis_state: ResMut<AnalysisWidgetState>,\n) -> color_eyre::Result<()> {\n    if app_state.get() != &AppState::Analysis {\n        return Ok(());\n    }\n\n    ratatui_context.draw(|frame| {\n        let area = frame.area();\n        frame.render_stateful_widget_ref(AnalysisWidget, area, &mut analysis_state);\n    })?;\n\n    Ok(())\n}\n\nstruct AnalysisWidget;\n\nimpl StatefulWidgetRef for AnalysisWidget {\n    type State = AnalysisWidgetState;\n\n    fn render_ref(&self, area: Rect, buf: &mut Buffer, state: &mut Self::State) {\n        let chunks = Layout::default()\n            .direction(Direction::Vertical)\n            .constraints([\n                Constraint::Length(3), // Title\n                Constraint::Min(10),   // Content\n                Constraint::Length(3), // Status bar\n            ])\n            .split(area);\n\n        // Render title\n        let title = Paragraph::new(\"üîç Code Analysis\")\n            .style(THEME.title_style())\n            .alignment(Alignment::Center)\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .border_style(THEME.header_style()),\n            );\n        title.render_ref(chunks[0], buf);\n\n        // Render content based on state\n        if state.is_analyzing {\n            self.render_analysis_progress(chunks[1], buf, state);\n        } else if let Some(review) = &state.review {\n            self.render_results(chunks[1], buf, state, review);\n        } else {\n            self.render_start_screen(chunks[1], buf);\n        }\n\n        // Render status bar\n        self.render_status_bar(chunks[2], buf, state);\n    }\n}\n\nimpl AnalysisWidget {\n    fn render_start_screen(&self, area: Rect, buf: &mut Buffer) {\n        let content = Paragraph::new(vec![\n            Line::from(\"\"),\n            Line::from(\"Press Enter to start the code analysis\"),\n            Line::from(\"\"),\n            Line::from(\"This will analyze your Git repository for:\"),\n            Line::from(\"‚Ä¢ Security vulnerabilities\"),\n            Line::from(\"‚Ä¢ Performance issues\"),\n            Line::from(\"‚Ä¢ Code quality problems\"),\n            Line::from(\"‚Ä¢ Best practice violations\"),\n        ])\n        .alignment(Alignment::Center)\n        .block(\n            Block::default()\n                .borders(Borders::ALL)\n                .title(\"Ready to Analyze\")\n                .title_style(THEME.header_style()),\n        );\n\n        content.render_ref(area, buf);\n    }\n\n    fn render_analysis_progress(&self, area: Rect, buf: &mut Buffer, state: &AnalysisWidgetState) {\n        let chunks = Layout::default()\n            .direction(Direction::Vertical)\n            .constraints([\n                Constraint::Length(5), // Progress bar\n                Constraint::Min(3),    // Current file\n            ])\n            .split(area);\n\n        // Progress bar\n        let progress = Gauge::default()\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .title(\"Analysis Progress\")\n                    .title_style(THEME.header_style()),\n            )\n            .gauge_style(THEME.success_style())\n            .percent(state.progress as u16)\n            .label(format!(\"{:.1}%\", state.progress));\n\n        progress.render_ref(chunks[0], buf);\n\n        // Current file\n        let current_file = Paragraph::new(vec![\n            Line::from(\"\"),\n            Line::from(vec![\n                Span::styled(\"Currently analyzing: \", THEME.info_style()),\n                Span::raw(&state.current_file),\n            ]),\n        ])\n        .alignment(Alignment::Center)\n        .block(\n            Block::default()\n                .borders(Borders::ALL)\n                .title(\"Status\")\n                .title_style(THEME.header_style()),\n        );\n\n        current_file.render_ref(chunks[1], buf);\n    }\n\n    fn render_results(\n        &self,\n        area: Rect,\n        buf: &mut Buffer,\n        state: &AnalysisWidgetState,\n        review: &crate::core::review::Review,\n    ) {\n        let chunks = Layout::default()\n            .direction(Direction::Horizontal)\n            .constraints([\n                Constraint::Percentage(30), // Summary\n                Constraint::Percentage(70), // Issue list\n            ])\n            .split(area);\n\n        // Summary\n        self.render_summary(chunks[0], buf, review);\n\n        // Issue list\n        self.render_issue_list(chunks[1], buf, state, review);\n    }\n\n    fn render_summary(&self, area: Rect, buf: &mut Buffer, review: &crate::core::review::Review) {\n        let summary_lines = vec![\n            Line::from(\"\"),\n            Line::from(vec![\n                Span::styled(\"üìÅ Files: \", THEME.info_style()),\n                Span::raw(format!(\"{}\", review.files_count)),\n            ]),\n            Line::from(\"\"),\n            Line::from(vec![\n                Span::styled(\"üêõ Total Issues: \", THEME.info_style()),\n                Span::raw(format!(\"{}\", review.issues_count)),\n            ]),\n            Line::from(\"\"),\n            Line::from(vec![\n                Span::styled(\"üö® Critical: \", THEME.error_style()),\n                Span::raw(format!(\"{}\", review.critical_issues)),\n            ]),\n            Line::from(vec![\n                Span::styled(\"‚ö†Ô∏è  High: \", THEME.warning_style()),\n                Span::raw(format!(\"{}\", review.high_issues)),\n            ]),\n            Line::from(vec![\n                Span::styled(\"üî∂ Medium: \", THEME.warning_style()),\n                Span::raw(format!(\"{}\", review.medium_issues)),\n            ]),\n            Line::from(vec![\n                Span::styled(\"‚ÑπÔ∏è  Low: \", THEME.info_style()),\n                Span::raw(format!(\"{}\", review.low_issues)),\n            ]),\n        ];\n\n        let summary = Paragraph::new(summary_lines).block(\n            Block::default()\n                .borders(Borders::ALL)\n                .title(\"Summary\")\n                .title_style(THEME.header_style()),\n        );\n\n        summary.render_ref(area, buf);\n    }\n\n    fn render_issue_list(\n        &self,\n        area: Rect,\n        buf: &mut Buffer,\n        state: &AnalysisWidgetState,\n        review: &crate::core::review::Review,\n    ) {\n        if review.issues.is_empty() {\n            let no_issues = Paragraph::new(vec![\n                Line::from(\"\"),\n                Line::from(\"üéâ No issues found!\"),\n                Line::from(\"\"),\n                Line::from(\"Your code looks clean. Great job!\"),\n            ])\n            .alignment(Alignment::Center)\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .title(\"Issues\")\n                    .title_style(THEME.header_style()),\n            );\n            no_issues.render_ref(area, buf);\n            return;\n        }\n\n        let items: Vec<ListItem> = review\n            .issues\n            .iter()\n            .enumerate()\n            .map(|(i, issue)| {\n                let severity_icon = match issue.severity.as_str() {\n                    \"Critical\" => \"üö®\",\n                    \"High\" => \"‚ö†Ô∏è\",\n                    \"Medium\" => \"üî∂\",\n                    \"Low\" => \"‚ÑπÔ∏è\",\n                    _ => \"üí°\",\n                };\n\n                let severity_style = match issue.severity.as_str() {\n                    \"Critical\" => THEME.error_style(),\n                    \"High\" => THEME.warning_style(),\n                    \"Medium\" => THEME.warning_style(),\n                    \"Low\" => THEME.info_style(),\n                    _ => Style::default(),\n                };\n\n                let is_selected = i == state.selected_issue;\n\n                // Create a multi-line item for better readability\n                let lines = vec![\n                    Line::from(vec![\n                        Span::styled(format!(\"{severity_icon} \"), severity_style),\n                        Span::styled(issue.severity.to_string(), severity_style),\n                        Span::raw(\"  \"),\n                        Span::styled(format!(\"{}:{}\", issue.file, issue.line), THEME.info_style()),\n                    ]),\n                    Line::from(vec![\n                        Span::raw(\"   \"),\n                        Span::styled(format!(\"{}: \", issue.category), THEME.header_style()),\n                        Span::raw(issue.description.to_string()),\n                    ]),\n                    Line::from(\"\"), // Empty line for spacing\n                ];\n\n                let style = if is_selected {\n                    THEME.selected_style()\n                } else {\n                    Style::default()\n                };\n\n                ListItem::new(lines).style(style)\n            })\n            .collect();\n\n        let issue_list = List::new(items)\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .title(format!(\n                        \"Issues ({}/{})\",\n                        state.selected_issue + 1,\n                        review.issues.len().max(1)\n                    ))\n                    .title_style(THEME.header_style()),\n            )\n            .highlight_style(THEME.selected_style());\n\n        WidgetRef::render_ref(&issue_list, area, buf);\n    }\n\n    fn render_status_bar(&self, area: Rect, buf: &mut Buffer, state: &AnalysisWidgetState) {\n        let status_text = if state.is_analyzing {\n            \"Analysis in progress... Please wait\"\n        } else if state.review.is_some() {\n            \"Use ‚Üë‚Üì to navigate issues, R for reports, Esc to go back\"\n        } else {\n            \"Enter to start analysis, Esc to go back\"\n        };\n\n        let status = Paragraph::new(status_text)\n            .style(THEME.info_style())\n            .alignment(Alignment::Center)\n            .block(\n                Block::default()\n                    .borders(Borders::TOP)\n                    .border_style(THEME.info_style()),\n            );\n\n        status.render_ref(area, buf);\n    }\n}\n","traces":[{"line":25,"address":[],"length":0,"stats":{"Line":0}},{"line":26,"address":[],"length":0,"stats":{"Line":0}},{"line":28,"address":[],"length":0,"stats":{"Line":0}},{"line":29,"address":[],"length":0,"stats":{"Line":0}},{"line":33,"address":[],"length":0,"stats":{"Line":0}},{"line":40,"address":[],"length":0,"stats":{"Line":0}},{"line":41,"address":[],"length":0,"stats":{"Line":0}},{"line":42,"address":[],"length":0,"stats":{"Line":0}},{"line":43,"address":[],"length":0,"stats":{"Line":0}},{"line":47,"address":[],"length":0,"stats":{"Line":0}},{"line":48,"address":[],"length":0,"stats":{"Line":0}},{"line":50,"address":[],"length":0,"stats":{"Line":0}},{"line":54,"address":[],"length":0,"stats":{"Line":0}},{"line":55,"address":[],"length":0,"stats":{"Line":0}},{"line":57,"address":[],"length":0,"stats":{"Line":0}},{"line":58,"address":[],"length":0,"stats":{"Line":0}},{"line":60,"address":[],"length":0,"stats":{"Line":0}},{"line":64,"address":[],"length":0,"stats":{"Line":0}},{"line":65,"address":[],"length":0,"stats":{"Line":0}},{"line":69,"address":[],"length":0,"stats":{"Line":0}},{"line":70,"address":[],"length":0,"stats":{"Line":0}},{"line":74,"address":[],"length":0,"stats":{"Line":0}},{"line":75,"address":[],"length":0,"stats":{"Line":0}},{"line":78,"address":[],"length":0,"stats":{"Line":0}},{"line":84,"address":[],"length":0,"stats":{"Line":0}},{"line":91,"address":[],"length":0,"stats":{"Line":0}},{"line":96,"address":[],"length":0,"stats":{"Line":0}},{"line":98,"address":[],"length":0,"stats":{"Line":0}},{"line":99,"address":[],"length":0,"stats":{"Line":0}},{"line":102,"address":[],"length":0,"stats":{"Line":0}},{"line":105,"address":[],"length":0,"stats":{"Line":0}},{"line":106,"address":[],"length":0,"stats":{"Line":0}},{"line":107,"address":[],"length":0,"stats":{"Line":0}},{"line":108,"address":[],"length":0,"stats":{"Line":0}},{"line":109,"address":[],"length":0,"stats":{"Line":0}},{"line":110,"address":[],"length":0,"stats":{"Line":0}},{"line":111,"address":[],"length":0,"stats":{"Line":0}},{"line":113,"address":[],"length":0,"stats":{"Line":0}},{"line":116,"address":[],"length":0,"stats":{"Line":0}},{"line":121,"address":[],"length":0,"stats":{"Line":0}},{"line":122,"address":[],"length":0,"stats":{"Line":0}},{"line":123,"address":[],"length":0,"stats":{"Line":0}},{"line":124,"address":[],"length":0,"stats":{"Line":0}},{"line":125,"address":[],"length":0,"stats":{"Line":0}},{"line":129,"address":[],"length":0,"stats":{"Line":0}},{"line":130,"address":[],"length":0,"stats":{"Line":0}},{"line":132,"address":[],"length":0,"stats":{"Line":0}},{"line":134,"address":[],"length":0,"stats":{"Line":0}},{"line":135,"address":[],"length":0,"stats":{"Line":0}},{"line":136,"address":[],"length":0,"stats":{"Line":0}},{"line":138,"address":[],"length":0,"stats":{"Line":0}},{"line":141,"address":[],"length":0,"stats":{"Line":0}},{"line":143,"address":[],"length":0,"stats":{"Line":0}},{"line":144,"address":[],"length":0,"stats":{"Line":0}},{"line":145,"address":[],"length":0,"stats":{"Line":0}},{"line":147,"address":[],"length":0,"stats":{"Line":0}},{"line":148,"address":[],"length":0,"stats":{"Line":0}},{"line":149,"address":[],"length":0,"stats":{"Line":0}},{"line":151,"address":[],"length":0,"stats":{"Line":0}},{"line":154,"address":[],"length":0,"stats":{"Line":0}},{"line":160,"address":[],"length":0,"stats":{"Line":0}},{"line":165,"address":[],"length":0,"stats":{"Line":0}},{"line":166,"address":[],"length":0,"stats":{"Line":0}},{"line":169,"address":[],"length":0,"stats":{"Line":0}},{"line":170,"address":[],"length":0,"stats":{"Line":0}},{"line":171,"address":[],"length":0,"stats":{"Line":0}},{"line":174,"address":[],"length":0,"stats":{"Line":0}},{"line":182,"address":[],"length":0,"stats":{"Line":0}},{"line":183,"address":[],"length":0,"stats":{"Line":0}},{"line":184,"address":[],"length":0,"stats":{"Line":0}},{"line":185,"address":[],"length":0,"stats":{"Line":0}},{"line":186,"address":[],"length":0,"stats":{"Line":0}},{"line":187,"address":[],"length":0,"stats":{"Line":0}},{"line":188,"address":[],"length":0,"stats":{"Line":0}},{"line":190,"address":[],"length":0,"stats":{"Line":0}},{"line":193,"address":[],"length":0,"stats":{"Line":0}},{"line":194,"address":[],"length":0,"stats":{"Line":0}},{"line":195,"address":[],"length":0,"stats":{"Line":0}},{"line":197,"address":[],"length":0,"stats":{"Line":0}},{"line":198,"address":[],"length":0,"stats":{"Line":0}},{"line":199,"address":[],"length":0,"stats":{"Line":0}},{"line":201,"address":[],"length":0,"stats":{"Line":0}},{"line":204,"address":[],"length":0,"stats":{"Line":0}},{"line":205,"address":[],"length":0,"stats":{"Line":0}},{"line":206,"address":[],"length":0,"stats":{"Line":0}},{"line":207,"address":[],"length":0,"stats":{"Line":0}},{"line":209,"address":[],"length":0,"stats":{"Line":0}},{"line":213,"address":[],"length":0,"stats":{"Line":0}},{"line":218,"address":[],"length":0,"stats":{"Line":0}},{"line":219,"address":[],"length":0,"stats":{"Line":0}},{"line":220,"address":[],"length":0,"stats":{"Line":0}},{"line":221,"address":[],"length":0,"stats":{"Line":0}},{"line":222,"address":[],"length":0,"stats":{"Line":0}},{"line":223,"address":[],"length":0,"stats":{"Line":0}},{"line":224,"address":[],"length":0,"stats":{"Line":0}},{"line":225,"address":[],"length":0,"stats":{"Line":0}},{"line":226,"address":[],"length":0,"stats":{"Line":0}},{"line":227,"address":[],"length":0,"stats":{"Line":0}},{"line":229,"address":[],"length":0,"stats":{"Line":0}},{"line":231,"address":[],"length":0,"stats":{"Line":0}},{"line":232,"address":[],"length":0,"stats":{"Line":0}},{"line":233,"address":[],"length":0,"stats":{"Line":0}},{"line":234,"address":[],"length":0,"stats":{"Line":0}},{"line":237,"address":[],"length":0,"stats":{"Line":0}},{"line":240,"address":[],"length":0,"stats":{"Line":0}},{"line":241,"address":[],"length":0,"stats":{"Line":0}},{"line":242,"address":[],"length":0,"stats":{"Line":0}},{"line":243,"address":[],"length":0,"stats":{"Line":0}},{"line":244,"address":[],"length":0,"stats":{"Line":0}},{"line":245,"address":[],"length":0,"stats":{"Line":0}},{"line":247,"address":[],"length":0,"stats":{"Line":0}},{"line":250,"address":[],"length":0,"stats":{"Line":0}},{"line":252,"address":[],"length":0,"stats":{"Line":0}},{"line":253,"address":[],"length":0,"stats":{"Line":0}},{"line":254,"address":[],"length":0,"stats":{"Line":0}},{"line":255,"address":[],"length":0,"stats":{"Line":0}},{"line":257,"address":[],"length":0,"stats":{"Line":0}},{"line":258,"address":[],"length":0,"stats":{"Line":0}},{"line":259,"address":[],"length":0,"stats":{"Line":0}},{"line":261,"address":[],"length":0,"stats":{"Line":0}},{"line":264,"address":[],"length":0,"stats":{"Line":0}},{"line":265,"address":[],"length":0,"stats":{"Line":0}},{"line":266,"address":[],"length":0,"stats":{"Line":0}},{"line":267,"address":[],"length":0,"stats":{"Line":0}},{"line":268,"address":[],"length":0,"stats":{"Line":0}},{"line":271,"address":[],"length":0,"stats":{"Line":0}},{"line":273,"address":[],"length":0,"stats":{"Line":0}},{"line":274,"address":[],"length":0,"stats":{"Line":0}},{"line":275,"address":[],"length":0,"stats":{"Line":0}},{"line":276,"address":[],"length":0,"stats":{"Line":0}},{"line":279,"address":[],"length":0,"stats":{"Line":0}},{"line":282,"address":[],"length":0,"stats":{"Line":0}},{"line":289,"address":[],"length":0,"stats":{"Line":0}},{"line":290,"address":[],"length":0,"stats":{"Line":0}},{"line":291,"address":[],"length":0,"stats":{"Line":0}},{"line":292,"address":[],"length":0,"stats":{"Line":0}},{"line":293,"address":[],"length":0,"stats":{"Line":0}},{"line":295,"address":[],"length":0,"stats":{"Line":0}},{"line":298,"address":[],"length":0,"stats":{"Line":0}},{"line":301,"address":[],"length":0,"stats":{"Line":0}},{"line":304,"address":[],"length":0,"stats":{"Line":0}},{"line":305,"address":[],"length":0,"stats":{"Line":0}},{"line":306,"address":[],"length":0,"stats":{"Line":0}},{"line":307,"address":[],"length":0,"stats":{"Line":0}},{"line":308,"address":[],"length":0,"stats":{"Line":0}},{"line":309,"address":[],"length":0,"stats":{"Line":0}},{"line":311,"address":[],"length":0,"stats":{"Line":0}},{"line":312,"address":[],"length":0,"stats":{"Line":0}},{"line":313,"address":[],"length":0,"stats":{"Line":0}},{"line":314,"address":[],"length":0,"stats":{"Line":0}},{"line":316,"address":[],"length":0,"stats":{"Line":0}},{"line":317,"address":[],"length":0,"stats":{"Line":0}},{"line":318,"address":[],"length":0,"stats":{"Line":0}},{"line":319,"address":[],"length":0,"stats":{"Line":0}},{"line":321,"address":[],"length":0,"stats":{"Line":0}},{"line":322,"address":[],"length":0,"stats":{"Line":0}},{"line":323,"address":[],"length":0,"stats":{"Line":0}},{"line":325,"address":[],"length":0,"stats":{"Line":0}},{"line":326,"address":[],"length":0,"stats":{"Line":0}},{"line":327,"address":[],"length":0,"stats":{"Line":0}},{"line":329,"address":[],"length":0,"stats":{"Line":0}},{"line":330,"address":[],"length":0,"stats":{"Line":0}},{"line":331,"address":[],"length":0,"stats":{"Line":0}},{"line":335,"address":[],"length":0,"stats":{"Line":0}},{"line":336,"address":[],"length":0,"stats":{"Line":0}},{"line":337,"address":[],"length":0,"stats":{"Line":0}},{"line":338,"address":[],"length":0,"stats":{"Line":0}},{"line":339,"address":[],"length":0,"stats":{"Line":0}},{"line":342,"address":[],"length":0,"stats":{"Line":0}},{"line":345,"address":[],"length":0,"stats":{"Line":0}},{"line":352,"address":[],"length":0,"stats":{"Line":0}},{"line":353,"address":[],"length":0,"stats":{"Line":0}},{"line":354,"address":[],"length":0,"stats":{"Line":0}},{"line":355,"address":[],"length":0,"stats":{"Line":0}},{"line":356,"address":[],"length":0,"stats":{"Line":0}},{"line":357,"address":[],"length":0,"stats":{"Line":0}},{"line":359,"address":[],"length":0,"stats":{"Line":0}},{"line":361,"address":[],"length":0,"stats":{"Line":0}},{"line":362,"address":[],"length":0,"stats":{"Line":0}},{"line":363,"address":[],"length":0,"stats":{"Line":0}},{"line":364,"address":[],"length":0,"stats":{"Line":0}},{"line":366,"address":[],"length":0,"stats":{"Line":0}},{"line":367,"address":[],"length":0,"stats":{"Line":0}},{"line":370,"address":[],"length":0,"stats":{"Line":0}},{"line":371,"address":[],"length":0,"stats":{"Line":0}},{"line":374,"address":[],"length":0,"stats":{"Line":0}},{"line":375,"address":[],"length":0,"stats":{"Line":0}},{"line":376,"address":[],"length":0,"stats":{"Line":0}},{"line":377,"address":[],"length":0,"stats":{"Line":0}},{"line":378,"address":[],"length":0,"stats":{"Line":0}},{"line":379,"address":[],"length":0,"stats":{"Line":0}},{"line":380,"address":[],"length":0,"stats":{"Line":0}},{"line":383,"address":[],"length":0,"stats":{"Line":0}},{"line":384,"address":[],"length":0,"stats":{"Line":0}},{"line":385,"address":[],"length":0,"stats":{"Line":0}},{"line":386,"address":[],"length":0,"stats":{"Line":0}},{"line":387,"address":[],"length":0,"stats":{"Line":0}},{"line":388,"address":[],"length":0,"stats":{"Line":0}},{"line":391,"address":[],"length":0,"stats":{"Line":0}},{"line":394,"address":[],"length":0,"stats":{"Line":0}},{"line":395,"address":[],"length":0,"stats":{"Line":0}},{"line":396,"address":[],"length":0,"stats":{"Line":0}},{"line":397,"address":[],"length":0,"stats":{"Line":0}},{"line":398,"address":[],"length":0,"stats":{"Line":0}},{"line":399,"address":[],"length":0,"stats":{"Line":0}},{"line":401,"address":[],"length":0,"stats":{"Line":0}},{"line":402,"address":[],"length":0,"stats":{"Line":0}},{"line":403,"address":[],"length":0,"stats":{"Line":0}},{"line":404,"address":[],"length":0,"stats":{"Line":0}},{"line":406,"address":[],"length":0,"stats":{"Line":0}},{"line":409,"address":[],"length":0,"stats":{"Line":0}},{"line":410,"address":[],"length":0,"stats":{"Line":0}},{"line":412,"address":[],"length":0,"stats":{"Line":0}},{"line":415,"address":[],"length":0,"stats":{"Line":0}},{"line":419,"address":[],"length":0,"stats":{"Line":0}},{"line":421,"address":[],"length":0,"stats":{"Line":0}},{"line":422,"address":[],"length":0,"stats":{"Line":0}},{"line":423,"address":[],"length":0,"stats":{"Line":0}},{"line":424,"address":[],"length":0,"stats":{"Line":0}},{"line":425,"address":[],"length":0,"stats":{"Line":0}},{"line":426,"address":[],"length":0,"stats":{"Line":0}},{"line":428,"address":[],"length":0,"stats":{"Line":0}},{"line":430,"address":[],"length":0,"stats":{"Line":0}},{"line":432,"address":[],"length":0,"stats":{"Line":0}},{"line":435,"address":[],"length":0,"stats":{"Line":0}},{"line":436,"address":[],"length":0,"stats":{"Line":0}},{"line":437,"address":[],"length":0,"stats":{"Line":0}},{"line":438,"address":[],"length":0,"stats":{"Line":0}},{"line":439,"address":[],"length":0,"stats":{"Line":0}},{"line":441,"address":[],"length":0,"stats":{"Line":0}},{"line":444,"address":[],"length":0,"stats":{"Line":0}},{"line":445,"address":[],"length":0,"stats":{"Line":0}},{"line":446,"address":[],"length":0,"stats":{"Line":0}},{"line":448,"address":[],"length":0,"stats":{"Line":0}},{"line":449,"address":[],"length":0,"stats":{"Line":0}},{"line":450,"address":[],"length":0,"stats":{"Line":0}},{"line":453,"address":[],"length":0,"stats":{"Line":0}}],"covered":0,"coverable":237},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","widgets","overview.rs"],"content":"use bevy::prelude::*;\nuse bevy_ratatui::{error::exit_on_error, terminal::RatatuiContext};\nuse crossterm::event::{KeyCode, KeyEventKind, MouseEventKind};\nuse ratatui::{\n    buffer::Buffer,\n    layout::{Alignment, Constraint, Direction, Layout, Rect},\n    style::{Modifier, Style},\n    text::{Line, Span},\n    widgets::{Block, Borders, Paragraph, StatefulWidgetRef, WidgetRef},\n};\n\nuse crate::{\n    args::Args,\n    bevy_states::app::AppState,\n    events::{app::AppEvent, overview::OverviewEvent},\n    theme::THEME,\n    widget_states::overview::{OverviewComponent, OverviewWidgetState, SelectionDirection},\n};\n\npub struct OverviewPlugin;\n\nimpl Plugin for OverviewPlugin {\n    fn build(&self, app: &mut App) {\n        app.add_event::<OverviewEvent>()\n            .init_resource::<OverviewWidgetState>()\n            .add_systems(Startup, initialize_overview_state)\n            .add_systems(PreUpdate, overview_event_handler)\n            .add_systems(Update, render_overview.pipe(exit_on_error));\n    }\n}\n\nfn initialize_overview_state(mut overview_state: ResMut<OverviewWidgetState>, args: Res<Args>) {\n    overview_state.repo_info.path = args.repo_path.clone();\n    overview_state.repo_info.source_branch = args.source_branch.clone();\n    overview_state.repo_info.target_branch = args.target_branch.clone();\n\n    // TODO: Calculate files to analyze\n    overview_state.repo_info.files_to_analyze = 42; // Placeholder\n}\n\nfn overview_event_handler(\n    mut overview_events: EventReader<OverviewEvent>,\n    mut overview_state: ResMut<OverviewWidgetState>,\n    mut app_events: EventWriter<AppEvent>,\n) {\n    for event in overview_events.read() {\n        match event {\n            OverviewEvent::KeyEvent(key_event) => {\n                if key_event.kind == KeyEventKind::Release {\n                    // If help is showing, any key closes it\n                    if overview_state.show_help {\n                        overview_state.show_help = false;\n                        return;\n                    }\n\n                    match key_event.code {\n                        KeyCode::Tab => {\n                            overview_state.move_selection(SelectionDirection::Next);\n                        }\n                        KeyCode::BackTab => {\n                            overview_state.move_selection(SelectionDirection::Previous);\n                        }\n                        KeyCode::Up => {\n                            overview_state.move_selection(SelectionDirection::Previous);\n                        }\n                        KeyCode::Down => {\n                            overview_state.move_selection(SelectionDirection::Next);\n                        }\n                        KeyCode::Enter => match overview_state.selected_component {\n                            OverviewComponent::Help => {\n                                overview_state.show_help = !overview_state.show_help;\n                            }\n                            _ => {\n                                handle_selection(\n                                    &overview_state.selected_component,\n                                    &mut app_events,\n                                );\n                            }\n                        },\n                        _ => {}\n                    }\n                }\n            }\n            OverviewEvent::MouseEvent(mouse_event) => {\n                // If help is showing, any click closes it\n                if overview_state.show_help {\n                    if let MouseEventKind::Up(_) = mouse_event.kind {\n                        overview_state.show_help = false;\n                    }\n                    return;\n                }\n\n                match mouse_event.kind {\n                    MouseEventKind::Up(_) => {\n                        let x = mouse_event.column;\n                        let y = mouse_event.row;\n\n                        let components: Vec<_> = overview_state\n                            .registered_components\n                            .clone()\n                            .into_iter()\n                            .collect();\n                        for (component, _rect) in components {\n                            if overview_state.is_over(component.clone(), x, y) {\n                                overview_state.selected_component = component.clone();\n                                match component {\n                                    OverviewComponent::Help => {\n                                        overview_state.show_help = !overview_state.show_help;\n                                    }\n                                    _ => {\n                                        handle_selection(&component, &mut app_events);\n                                    }\n                                }\n                                break;\n                            }\n                        }\n                    }\n                    MouseEventKind::Moved => {\n                        let x = mouse_event.column;\n                        let y = mouse_event.row;\n                        overview_state.update_hover(x, y);\n                    }\n                    _ => {}\n                }\n            }\n        }\n    }\n}\n\nfn handle_selection(component: &OverviewComponent, app_events: &mut EventWriter<AppEvent>) {\n    match component {\n        OverviewComponent::StartAnalysis => {\n            app_events.send(AppEvent::SwitchTo(AppState::Analysis));\n        }\n        OverviewComponent::ViewReports => {\n            app_events.send(AppEvent::SwitchTo(AppState::Reports));\n        }\n        OverviewComponent::Settings => {\n            // TODO: Implement settings\n        }\n        OverviewComponent::Help => {\n            // Show help dialog - for now we'll add this as a state toggle\n            // In a real implementation, this might open a help dialog\n        }\n        OverviewComponent::Exit => {\n            app_events.send(AppEvent::Exit);\n        }\n    }\n}\n\nfn render_overview(\n    app_state: Res<State<AppState>>,\n    mut ratatui_context: ResMut<RatatuiContext>,\n    mut overview_state: ResMut<OverviewWidgetState>,\n) -> color_eyre::Result<()> {\n    if app_state.get() != &AppState::Overview {\n        return Ok(());\n    }\n\n    ratatui_context.draw(|frame| {\n        let area = frame.area();\n        frame.render_stateful_widget_ref(OverviewWidget, area, &mut overview_state);\n    })?;\n\n    Ok(())\n}\n\nstruct OverviewWidget;\n\nimpl StatefulWidgetRef for OverviewWidget {\n    type State = OverviewWidgetState;\n\n    fn render_ref(&self, area: Rect, buf: &mut Buffer, state: &mut Self::State) {\n        state.registered_components.clear();\n\n        if state.show_help {\n            self.render_help_overlay(area, buf, state);\n            return;\n        }\n\n        // Main layout\n        let chunks = Layout::default()\n            .direction(Direction::Vertical)\n            .constraints([\n                Constraint::Length(3), // Title\n                Constraint::Length(8), // Repository info\n                Constraint::Min(10),   // Menu buttons\n                Constraint::Length(3), // Status bar\n            ])\n            .split(area);\n\n        // Render title\n        self.render_title(chunks[0], buf);\n\n        // Render repository info\n        self.render_repo_info(chunks[1], buf, state);\n\n        // Render menu\n        self.render_menu(chunks[2], buf, state);\n\n        // Render status bar\n        self.render_status_bar(chunks[3], buf);\n    }\n}\n\nimpl OverviewWidget {\n    fn render_title(&self, area: Rect, buf: &mut Buffer) {\n        let title = Paragraph::new(\"ü§ñ AI Code Buddy v0.2.0\")\n            .style(THEME.title_style())\n            .alignment(Alignment::Center)\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .border_style(THEME.header_style()),\n            );\n        title.render_ref(area, buf);\n    }\n\n    fn render_repo_info(&self, area: Rect, buf: &mut Buffer, state: &OverviewWidgetState) {\n        let info_lines = vec![\n            Line::from(vec![\n                Span::styled(\"üìÇ Repository: \", THEME.info_style()),\n                Span::raw(&state.repo_info.path),\n            ]),\n            Line::from(vec![\n                Span::styled(\"üåø Source Branch: \", THEME.info_style()),\n                Span::raw(&state.repo_info.source_branch),\n            ]),\n            Line::from(vec![\n                Span::styled(\"üéØ Target Branch: \", THEME.info_style()),\n                Span::raw(&state.repo_info.target_branch),\n            ]),\n            Line::from(vec![\n                Span::styled(\"üìä Files to Analyze: \", THEME.info_style()),\n                Span::raw(format!(\"{}\", state.repo_info.files_to_analyze)),\n            ]),\n        ];\n\n        let repo_info = Paragraph::new(info_lines)\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .title(\"Repository Information\")\n                    .title_style(THEME.header_style()),\n            )\n            .wrap(ratatui::widgets::Wrap { trim: true });\n\n        repo_info.render_ref(area, buf);\n    }\n\n    fn render_menu(&self, area: Rect, buf: &mut Buffer, state: &mut OverviewWidgetState) {\n        // Center the menu items\n        let menu_layout = Layout::default()\n            .direction(Direction::Horizontal)\n            .constraints([\n                Constraint::Percentage(20),\n                Constraint::Percentage(60),\n                Constraint::Percentage(20),\n            ])\n            .split(area);\n\n        let menu_area = menu_layout[1];\n\n        let items_layout = Layout::default()\n            .direction(Direction::Vertical)\n            .constraints([\n                Constraint::Length(3), // Start Analysis\n                Constraint::Length(1), // Spacer\n                Constraint::Length(3), // View Reports\n                Constraint::Length(1), // Spacer\n                Constraint::Length(3), // Settings\n                Constraint::Length(1), // Spacer\n                Constraint::Length(3), // Help\n                Constraint::Length(1), // Spacer\n                Constraint::Length(3), // Exit\n            ])\n            .split(menu_area);\n\n        self.render_menu_button(\n            items_layout[0],\n            buf,\n            state,\n            OverviewComponent::StartAnalysis,\n            \"üöÄ Start Analysis\",\n        );\n\n        self.render_menu_button(\n            items_layout[2],\n            buf,\n            state,\n            OverviewComponent::ViewReports,\n            \"üìä View Reports\",\n        );\n\n        self.render_menu_button(\n            items_layout[4],\n            buf,\n            state,\n            OverviewComponent::Settings,\n            \"‚öôÔ∏è  Settings\",\n        );\n\n        self.render_menu_button(\n            items_layout[6],\n            buf,\n            state,\n            OverviewComponent::Help,\n            \"‚ùì Help\",\n        );\n\n        self.render_menu_button(\n            items_layout[8],\n            buf,\n            state,\n            OverviewComponent::Exit,\n            \"üö™ Exit\",\n        );\n    }\n\n    fn render_menu_button(\n        &self,\n        area: Rect,\n        buf: &mut Buffer,\n        state: &mut OverviewWidgetState,\n        component: OverviewComponent,\n        text: &str,\n    ) {\n        let is_selected = state.selected_component == component;\n        let is_hovered = state.hovered_component == Some(component.clone());\n\n        let style = if is_selected {\n            THEME.selected_style()\n        } else if is_hovered {\n            THEME.button_hover_style()\n        } else {\n            THEME.button_normal_style()\n        };\n\n        let border_style = if is_selected {\n            THEME.selected_style()\n        } else if is_hovered {\n            THEME.button_hover_style()\n        } else {\n            Style::default()\n        };\n\n        let button = Paragraph::new(text)\n            .style(style)\n            .alignment(Alignment::Center)\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .border_style(border_style),\n            );\n\n        button.render_ref(area, buf);\n        state.registered_components.insert(component, area);\n    }\n\n    fn render_status_bar(&self, area: Rect, buf: &mut Buffer) {\n        let status = Paragraph::new(\"Use ‚Üë‚Üì or Tab to navigate, Enter to select, Q to quit\")\n            .style(THEME.info_style())\n            .alignment(Alignment::Center)\n            .block(\n                Block::default()\n                    .borders(Borders::TOP)\n                    .border_style(THEME.info_style()),\n            );\n\n        status.render_ref(area, buf);\n    }\n\n    fn render_help_overlay(&self, area: Rect, buf: &mut Buffer, state: &mut OverviewWidgetState) {\n        // Create a centered help dialog\n        let help_area = {\n            let vertical = Layout::default()\n                .direction(Direction::Vertical)\n                .constraints([\n                    Constraint::Percentage(20),\n                    Constraint::Percentage(60),\n                    Constraint::Percentage(20),\n                ])\n                .split(area);\n\n            Layout::default()\n                .direction(Direction::Horizontal)\n                .constraints([\n                    Constraint::Percentage(15),\n                    Constraint::Percentage(70),\n                    Constraint::Percentage(15),\n                ])\n                .split(vertical[1])[1]\n        };\n\n        // Clear the background\n        for y in help_area.top()..help_area.bottom() {\n            for x in help_area.left()..help_area.right() {\n                buf.cell_mut((x, y)).unwrap().set_bg(THEME.background);\n            }\n        }\n\n        let help_content = vec![\n            Line::from(\"ü§ñ AI Code Buddy - Help\"),\n            Line::from(\"\"),\n            Line::from(\"üéØ What it does:\"),\n            Line::from(\"  ‚Ä¢ Analyzes Git repositories for code quality issues\"),\n            Line::from(\"  ‚Ä¢ Detects security vulnerabilities (OWASP Top 10)\"),\n            Line::from(\"  ‚Ä¢ Provides performance and maintainability suggestions\"),\n            Line::from(\"  ‚Ä¢ Compares code changes between Git branches\"),\n            Line::from(\"\"),\n            Line::from(\"‚å®Ô∏è  Keyboard Controls:\"),\n            Line::from(\"  ‚Ä¢ ‚Üë/‚Üì or Tab/Shift+Tab: Navigate menu\"),\n            Line::from(\"  ‚Ä¢ Enter: Select menu item\"),\n            Line::from(\"  ‚Ä¢ q: Quit application\"),\n            Line::from(\"\"),\n            Line::from(\"üñ±Ô∏è  Mouse Controls:\"),\n            Line::from(\"  ‚Ä¢ Click: Select menu item\"),\n            Line::from(\"  ‚Ä¢ Hover: Highlight menu item\"),\n            Line::from(\"\"),\n            Line::from(\"üìã Menu Options:\"),\n            Line::from(\"  ‚Ä¢ üöÄ Start Analysis: Begin analyzing the repository\"),\n            Line::from(\"  ‚Ä¢ üìä View Reports: See analysis results and export\"),\n            Line::from(\"  ‚Ä¢ ‚öôÔ∏è  Settings: Configure analysis options\"),\n            Line::from(\"  ‚Ä¢ ‚ùì Help: Show this help screen\"),\n            Line::from(\"  ‚Ä¢ üö™ Exit: Quit the application\"),\n            Line::from(\"\"),\n            Line::from(Span::styled(\n                \"Press any key or click anywhere to close help\",\n                Style::default()\n                    .fg(THEME.accent)\n                    .add_modifier(Modifier::BOLD),\n            )),\n        ];\n\n        let help_dialog = Paragraph::new(help_content)\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .title(\" Help & Controls \")\n                    .title_style(THEME.title_style())\n                    .border_style(THEME.primary_style()),\n            )\n            .wrap(ratatui::widgets::Wrap { trim: true });\n\n        help_dialog.render_ref(help_area, buf);\n\n        // Register the entire help area as clickable to close help\n        state\n            .registered_components\n            .insert(OverviewComponent::Help, help_area);\n    }\n}\n","traces":[{"line":23,"address":[],"length":0,"stats":{"Line":0}},{"line":24,"address":[],"length":0,"stats":{"Line":0}},{"line":26,"address":[],"length":0,"stats":{"Line":0}},{"line":27,"address":[],"length":0,"stats":{"Line":0}},{"line":28,"address":[],"length":0,"stats":{"Line":0}},{"line":32,"address":[],"length":0,"stats":{"Line":0}},{"line":33,"address":[],"length":0,"stats":{"Line":0}},{"line":34,"address":[],"length":0,"stats":{"Line":0}},{"line":35,"address":[],"length":0,"stats":{"Line":0}},{"line":38,"address":[],"length":0,"stats":{"Line":0}},{"line":41,"address":[],"length":0,"stats":{"Line":0}},{"line":46,"address":[],"length":0,"stats":{"Line":0}},{"line":47,"address":[],"length":0,"stats":{"Line":0}},{"line":48,"address":[],"length":0,"stats":{"Line":0}},{"line":49,"address":[],"length":0,"stats":{"Line":0}},{"line":51,"address":[],"length":0,"stats":{"Line":0}},{"line":52,"address":[],"length":0,"stats":{"Line":0}},{"line":53,"address":[],"length":0,"stats":{"Line":0}},{"line":56,"address":[],"length":0,"stats":{"Line":0}},{"line":57,"address":[],"length":0,"stats":{"Line":0}},{"line":58,"address":[],"length":0,"stats":{"Line":0}},{"line":60,"address":[],"length":0,"stats":{"Line":0}},{"line":61,"address":[],"length":0,"stats":{"Line":0}},{"line":63,"address":[],"length":0,"stats":{"Line":0}},{"line":64,"address":[],"length":0,"stats":{"Line":0}},{"line":66,"address":[],"length":0,"stats":{"Line":0}},{"line":67,"address":[],"length":0,"stats":{"Line":0}},{"line":69,"address":[],"length":0,"stats":{"Line":0}},{"line":70,"address":[],"length":0,"stats":{"Line":0}},{"line":71,"address":[],"length":0,"stats":{"Line":0}},{"line":73,"address":[],"length":0,"stats":{"Line":0}},{"line":75,"address":[],"length":0,"stats":{"Line":0}},{"line":76,"address":[],"length":0,"stats":{"Line":0}},{"line":80,"address":[],"length":0,"stats":{"Line":0}},{"line":84,"address":[],"length":0,"stats":{"Line":0}},{"line":86,"address":[],"length":0,"stats":{"Line":0}},{"line":87,"address":[],"length":0,"stats":{"Line":0}},{"line":88,"address":[],"length":0,"stats":{"Line":0}},{"line":90,"address":[],"length":0,"stats":{"Line":0}},{"line":93,"address":[],"length":0,"stats":{"Line":0}},{"line":95,"address":[],"length":0,"stats":{"Line":0}},{"line":96,"address":[],"length":0,"stats":{"Line":0}},{"line":98,"address":[],"length":0,"stats":{"Line":0}},{"line":99,"address":[],"length":0,"stats":{"Line":0}},{"line":103,"address":[],"length":0,"stats":{"Line":0}},{"line":104,"address":[],"length":0,"stats":{"Line":0}},{"line":105,"address":[],"length":0,"stats":{"Line":0}},{"line":106,"address":[],"length":0,"stats":{"Line":0}},{"line":107,"address":[],"length":0,"stats":{"Line":0}},{"line":108,"address":[],"length":0,"stats":{"Line":0}},{"line":110,"address":[],"length":0,"stats":{"Line":0}},{"line":111,"address":[],"length":0,"stats":{"Line":0}},{"line":114,"address":[],"length":0,"stats":{"Line":0}},{"line":118,"address":[],"length":0,"stats":{"Line":0}},{"line":119,"address":[],"length":0,"stats":{"Line":0}},{"line":120,"address":[],"length":0,"stats":{"Line":0}},{"line":121,"address":[],"length":0,"stats":{"Line":0}},{"line":123,"address":[],"length":0,"stats":{"Line":0}},{"line":130,"address":[],"length":0,"stats":{"Line":0}},{"line":131,"address":[],"length":0,"stats":{"Line":0}},{"line":132,"address":[],"length":0,"stats":{"Line":0}},{"line":133,"address":[],"length":0,"stats":{"Line":0}},{"line":135,"address":[],"length":0,"stats":{"Line":0}},{"line":136,"address":[],"length":0,"stats":{"Line":0}},{"line":138,"address":[],"length":0,"stats":{"Line":0}},{"line":141,"address":[],"length":0,"stats":{"Line":0}},{"line":145,"address":[],"length":0,"stats":{"Line":0}},{"line":146,"address":[],"length":0,"stats":{"Line":0}},{"line":151,"address":[],"length":0,"stats":{"Line":0}},{"line":156,"address":[],"length":0,"stats":{"Line":0}},{"line":157,"address":[],"length":0,"stats":{"Line":0}},{"line":160,"address":[],"length":0,"stats":{"Line":0}},{"line":161,"address":[],"length":0,"stats":{"Line":0}},{"line":162,"address":[],"length":0,"stats":{"Line":0}},{"line":165,"address":[],"length":0,"stats":{"Line":0}},{"line":173,"address":[],"length":0,"stats":{"Line":0}},{"line":174,"address":[],"length":0,"stats":{"Line":0}},{"line":176,"address":[],"length":0,"stats":{"Line":0}},{"line":177,"address":[],"length":0,"stats":{"Line":0}},{"line":178,"address":[],"length":0,"stats":{"Line":0}},{"line":182,"address":[],"length":0,"stats":{"Line":0}},{"line":183,"address":[],"length":0,"stats":{"Line":0}},{"line":184,"address":[],"length":0,"stats":{"Line":0}},{"line":185,"address":[],"length":0,"stats":{"Line":0}},{"line":186,"address":[],"length":0,"stats":{"Line":0}},{"line":187,"address":[],"length":0,"stats":{"Line":0}},{"line":188,"address":[],"length":0,"stats":{"Line":0}},{"line":190,"address":[],"length":0,"stats":{"Line":0}},{"line":193,"address":[],"length":0,"stats":{"Line":0}},{"line":196,"address":[],"length":0,"stats":{"Line":0}},{"line":199,"address":[],"length":0,"stats":{"Line":0}},{"line":202,"address":[],"length":0,"stats":{"Line":0}},{"line":207,"address":[],"length":0,"stats":{"Line":0}},{"line":208,"address":[],"length":0,"stats":{"Line":0}},{"line":209,"address":[],"length":0,"stats":{"Line":0}},{"line":210,"address":[],"length":0,"stats":{"Line":0}},{"line":212,"address":[],"length":0,"stats":{"Line":0}},{"line":213,"address":[],"length":0,"stats":{"Line":0}},{"line":214,"address":[],"length":0,"stats":{"Line":0}},{"line":216,"address":[],"length":0,"stats":{"Line":0}},{"line":219,"address":[],"length":0,"stats":{"Line":0}},{"line":220,"address":[],"length":0,"stats":{"Line":0}},{"line":221,"address":[],"length":0,"stats":{"Line":0}},{"line":222,"address":[],"length":0,"stats":{"Line":0}},{"line":223,"address":[],"length":0,"stats":{"Line":0}},{"line":225,"address":[],"length":0,"stats":{"Line":0}},{"line":226,"address":[],"length":0,"stats":{"Line":0}},{"line":227,"address":[],"length":0,"stats":{"Line":0}},{"line":229,"address":[],"length":0,"stats":{"Line":0}},{"line":230,"address":[],"length":0,"stats":{"Line":0}},{"line":231,"address":[],"length":0,"stats":{"Line":0}},{"line":233,"address":[],"length":0,"stats":{"Line":0}},{"line":234,"address":[],"length":0,"stats":{"Line":0}},{"line":235,"address":[],"length":0,"stats":{"Line":0}},{"line":239,"address":[],"length":0,"stats":{"Line":0}},{"line":241,"address":[],"length":0,"stats":{"Line":0}},{"line":242,"address":[],"length":0,"stats":{"Line":0}},{"line":243,"address":[],"length":0,"stats":{"Line":0}},{"line":244,"address":[],"length":0,"stats":{"Line":0}},{"line":246,"address":[],"length":0,"stats":{"Line":0}},{"line":248,"address":[],"length":0,"stats":{"Line":0}},{"line":251,"address":[],"length":0,"stats":{"Line":0}},{"line":253,"address":[],"length":0,"stats":{"Line":0}},{"line":254,"address":[],"length":0,"stats":{"Line":0}},{"line":255,"address":[],"length":0,"stats":{"Line":0}},{"line":256,"address":[],"length":0,"stats":{"Line":0}},{"line":257,"address":[],"length":0,"stats":{"Line":0}},{"line":258,"address":[],"length":0,"stats":{"Line":0}},{"line":260,"address":[],"length":0,"stats":{"Line":0}},{"line":262,"address":[],"length":0,"stats":{"Line":0}},{"line":264,"address":[],"length":0,"stats":{"Line":0}},{"line":265,"address":[],"length":0,"stats":{"Line":0}},{"line":266,"address":[],"length":0,"stats":{"Line":0}},{"line":267,"address":[],"length":0,"stats":{"Line":0}},{"line":268,"address":[],"length":0,"stats":{"Line":0}},{"line":269,"address":[],"length":0,"stats":{"Line":0}},{"line":270,"address":[],"length":0,"stats":{"Line":0}},{"line":271,"address":[],"length":0,"stats":{"Line":0}},{"line":272,"address":[],"length":0,"stats":{"Line":0}},{"line":273,"address":[],"length":0,"stats":{"Line":0}},{"line":274,"address":[],"length":0,"stats":{"Line":0}},{"line":275,"address":[],"length":0,"stats":{"Line":0}},{"line":277,"address":[],"length":0,"stats":{"Line":0}},{"line":279,"address":[],"length":0,"stats":{"Line":0}},{"line":280,"address":[],"length":0,"stats":{"Line":0}},{"line":281,"address":[],"length":0,"stats":{"Line":0}},{"line":282,"address":[],"length":0,"stats":{"Line":0}},{"line":283,"address":[],"length":0,"stats":{"Line":0}},{"line":287,"address":[],"length":0,"stats":{"Line":0}},{"line":288,"address":[],"length":0,"stats":{"Line":0}},{"line":289,"address":[],"length":0,"stats":{"Line":0}},{"line":290,"address":[],"length":0,"stats":{"Line":0}},{"line":291,"address":[],"length":0,"stats":{"Line":0}},{"line":295,"address":[],"length":0,"stats":{"Line":0}},{"line":296,"address":[],"length":0,"stats":{"Line":0}},{"line":297,"address":[],"length":0,"stats":{"Line":0}},{"line":298,"address":[],"length":0,"stats":{"Line":0}},{"line":299,"address":[],"length":0,"stats":{"Line":0}},{"line":303,"address":[],"length":0,"stats":{"Line":0}},{"line":304,"address":[],"length":0,"stats":{"Line":0}},{"line":305,"address":[],"length":0,"stats":{"Line":0}},{"line":306,"address":[],"length":0,"stats":{"Line":0}},{"line":307,"address":[],"length":0,"stats":{"Line":0}},{"line":311,"address":[],"length":0,"stats":{"Line":0}},{"line":312,"address":[],"length":0,"stats":{"Line":0}},{"line":313,"address":[],"length":0,"stats":{"Line":0}},{"line":314,"address":[],"length":0,"stats":{"Line":0}},{"line":315,"address":[],"length":0,"stats":{"Line":0}},{"line":320,"address":[],"length":0,"stats":{"Line":0}},{"line":328,"address":[],"length":0,"stats":{"Line":0}},{"line":329,"address":[],"length":0,"stats":{"Line":0}},{"line":331,"address":[],"length":0,"stats":{"Line":0}},{"line":332,"address":[],"length":0,"stats":{"Line":0}},{"line":333,"address":[],"length":0,"stats":{"Line":0}},{"line":334,"address":[],"length":0,"stats":{"Line":0}},{"line":336,"address":[],"length":0,"stats":{"Line":0}},{"line":339,"address":[],"length":0,"stats":{"Line":0}},{"line":340,"address":[],"length":0,"stats":{"Line":0}},{"line":341,"address":[],"length":0,"stats":{"Line":0}},{"line":342,"address":[],"length":0,"stats":{"Line":0}},{"line":344,"address":[],"length":0,"stats":{"Line":0}},{"line":347,"address":[],"length":0,"stats":{"Line":0}},{"line":348,"address":[],"length":0,"stats":{"Line":0}},{"line":349,"address":[],"length":0,"stats":{"Line":0}},{"line":351,"address":[],"length":0,"stats":{"Line":0}},{"line":352,"address":[],"length":0,"stats":{"Line":0}},{"line":353,"address":[],"length":0,"stats":{"Line":0}},{"line":356,"address":[],"length":0,"stats":{"Line":0}},{"line":357,"address":[],"length":0,"stats":{"Line":0}},{"line":360,"address":[],"length":0,"stats":{"Line":0}},{"line":361,"address":[],"length":0,"stats":{"Line":0}},{"line":362,"address":[],"length":0,"stats":{"Line":0}},{"line":363,"address":[],"length":0,"stats":{"Line":0}},{"line":365,"address":[],"length":0,"stats":{"Line":0}},{"line":366,"address":[],"length":0,"stats":{"Line":0}},{"line":367,"address":[],"length":0,"stats":{"Line":0}},{"line":370,"address":[],"length":0,"stats":{"Line":0}},{"line":373,"address":[],"length":0,"stats":{"Line":0}},{"line":375,"address":[],"length":0,"stats":{"Line":0}},{"line":376,"address":[],"length":0,"stats":{"Line":0}},{"line":377,"address":[],"length":0,"stats":{"Line":0}},{"line":378,"address":[],"length":0,"stats":{"Line":0}},{"line":379,"address":[],"length":0,"stats":{"Line":0}},{"line":380,"address":[],"length":0,"stats":{"Line":0}},{"line":381,"address":[],"length":0,"stats":{"Line":0}},{"line":383,"address":[],"length":0,"stats":{"Line":0}},{"line":385,"address":[],"length":0,"stats":{"Line":0}},{"line":386,"address":[],"length":0,"stats":{"Line":0}},{"line":387,"address":[],"length":0,"stats":{"Line":0}},{"line":388,"address":[],"length":0,"stats":{"Line":0}},{"line":389,"address":[],"length":0,"stats":{"Line":0}},{"line":390,"address":[],"length":0,"stats":{"Line":0}},{"line":392,"address":[],"length":0,"stats":{"Line":0}},{"line":396,"address":[],"length":0,"stats":{"Line":0}},{"line":397,"address":[],"length":0,"stats":{"Line":0}},{"line":398,"address":[],"length":0,"stats":{"Line":0}},{"line":402,"address":[],"length":0,"stats":{"Line":0}},{"line":403,"address":[],"length":0,"stats":{"Line":0}},{"line":404,"address":[],"length":0,"stats":{"Line":0}},{"line":405,"address":[],"length":0,"stats":{"Line":0}},{"line":406,"address":[],"length":0,"stats":{"Line":0}},{"line":407,"address":[],"length":0,"stats":{"Line":0}},{"line":408,"address":[],"length":0,"stats":{"Line":0}},{"line":409,"address":[],"length":0,"stats":{"Line":0}},{"line":410,"address":[],"length":0,"stats":{"Line":0}},{"line":411,"address":[],"length":0,"stats":{"Line":0}},{"line":412,"address":[],"length":0,"stats":{"Line":0}},{"line":413,"address":[],"length":0,"stats":{"Line":0}},{"line":414,"address":[],"length":0,"stats":{"Line":0}},{"line":415,"address":[],"length":0,"stats":{"Line":0}},{"line":416,"address":[],"length":0,"stats":{"Line":0}},{"line":417,"address":[],"length":0,"stats":{"Line":0}},{"line":418,"address":[],"length":0,"stats":{"Line":0}},{"line":419,"address":[],"length":0,"stats":{"Line":0}},{"line":420,"address":[],"length":0,"stats":{"Line":0}},{"line":421,"address":[],"length":0,"stats":{"Line":0}},{"line":422,"address":[],"length":0,"stats":{"Line":0}},{"line":423,"address":[],"length":0,"stats":{"Line":0}},{"line":424,"address":[],"length":0,"stats":{"Line":0}},{"line":425,"address":[],"length":0,"stats":{"Line":0}},{"line":426,"address":[],"length":0,"stats":{"Line":0}},{"line":427,"address":[],"length":0,"stats":{"Line":0}},{"line":429,"address":[],"length":0,"stats":{"Line":0}},{"line":430,"address":[],"length":0,"stats":{"Line":0}},{"line":431,"address":[],"length":0,"stats":{"Line":0}},{"line":435,"address":[],"length":0,"stats":{"Line":0}},{"line":437,"address":[],"length":0,"stats":{"Line":0}},{"line":438,"address":[],"length":0,"stats":{"Line":0}},{"line":439,"address":[],"length":0,"stats":{"Line":0}},{"line":440,"address":[],"length":0,"stats":{"Line":0}},{"line":441,"address":[],"length":0,"stats":{"Line":0}},{"line":443,"address":[],"length":0,"stats":{"Line":0}},{"line":445,"address":[],"length":0,"stats":{"Line":0}},{"line":448,"address":[],"length":0,"stats":{"Line":0}},{"line":449,"address":[],"length":0,"stats":{"Line":0}},{"line":450,"address":[],"length":0,"stats":{"Line":0}}],"covered":0,"coverable":256},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","src","widgets","reports.rs"],"content":"use bevy::prelude::*;\nuse bevy_ratatui::{error::exit_on_error, terminal::RatatuiContext};\nuse crossterm::event::{KeyCode, KeyEventKind};\nuse ratatui::{\n    buffer::Buffer,\n    layout::{Alignment, Constraint, Direction, Layout, Rect},\n    style::Style,\n    text::{Line, Span},\n    widgets::{Block, Borders, List, ListItem, Paragraph, StatefulWidgetRef, WidgetRef},\n};\n\nuse crate::{\n    bevy_states::app::AppState,\n    events::{app::AppEvent, reports::ReportsEvent},\n    theme::THEME,\n    widget_states::{\n        analysis::AnalysisWidgetState,\n        reports::{ExportStatus, ReportFormat, ReportsWidgetState, ViewMode},\n    },\n};\n\npub struct ReportsPlugin;\n\nimpl Plugin for ReportsPlugin {\n    fn build(&self, app: &mut App) {\n        app.add_event::<ReportsEvent>()\n            .init_resource::<ReportsWidgetState>()\n            .add_systems(PreUpdate, reports_event_handler)\n            .add_systems(Update, sync_analysis_data)\n            .add_systems(Update, render_reports.pipe(exit_on_error));\n    }\n}\n\nfn sync_analysis_data(\n    analysis_state: Res<AnalysisWidgetState>,\n    mut reports_state: ResMut<ReportsWidgetState>,\n) {\n    // Sync review data from analysis to reports\n    if let Some(review) = &analysis_state.review {\n        if reports_state.review.is_none() {\n            reports_state.set_review(review.clone());\n        }\n    }\n}\n\nfn reports_event_handler(\n    mut reports_events: EventReader<ReportsEvent>,\n    mut reports_state: ResMut<ReportsWidgetState>,\n    mut app_events: EventWriter<AppEvent>,\n) {\n    for event in reports_events.read() {\n        match event {\n            ReportsEvent::KeyEvent(key_event) => {\n                match key_event.code {\n                    KeyCode::Esc => {\n                        // Handle escape based on current view mode\n                        match reports_state.view_mode {\n                            ViewMode::Report => {\n                                // Go back to selection view\n                                reports_state.back_to_selection();\n                            }\n                            ViewMode::Selection => {\n                                // Go back to overview\n                                app_events.send(AppEvent::SwitchTo(AppState::Overview));\n                            }\n                        }\n                    }\n                    _ => {\n                        // Only handle other keys on release to avoid double-triggering\n                        if key_event.kind == KeyEventKind::Release {\n                            match key_event.code {\n                                KeyCode::Left => {\n                                    reports_state.previous_format();\n                                }\n                                KeyCode::Right => {\n                                    reports_state.next_format();\n                                }\n                                KeyCode::Tab => {\n                                    reports_state.next_format();\n                                }\n                                KeyCode::Enter => {\n                                    match reports_state.view_mode {\n                                        ViewMode::Selection => {\n                                            // Generate and show the report\n                                            reports_state.generate_report();\n                                        }\n                                        ViewMode::Report => {\n                                            // Export the current report\n                                            export_report(&mut reports_state);\n                                        }\n                                    }\n                                }\n                                KeyCode::Char('a') => {\n                                    app_events.send(AppEvent::SwitchTo(AppState::Analysis));\n                                }\n                                _ => {}\n                            }\n                        }\n                    }\n                }\n            }\n            ReportsEvent::MouseEvent(_mouse_event) => {\n                // Handle mouse events if needed\n            }\n        }\n    }\n}\n\nfn export_report(reports_state: &mut ReportsWidgetState) {\n    if let Some(_review) = &reports_state.review {\n        let format = match reports_state.selected_format {\n            ReportFormat::Summary => \"summary\".to_string(),\n            ReportFormat::Detailed => \"detailed\".to_string(),\n            ReportFormat::Json => \"json\".to_string(),\n            ReportFormat::Markdown => \"markdown\".to_string(),\n        };\n\n        reports_state.start_export(format.clone());\n\n        // TODO: Implement actual file export\n        let filename = format!(\n            \"code_review_report.{}\",\n            match reports_state.selected_format {\n                ReportFormat::Json => \"json\",\n                ReportFormat::Markdown => \"md\",\n                _ => \"txt\",\n            }\n        );\n\n        reports_state.complete_export(filename);\n    }\n}\n\nfn render_reports(\n    app_state: Res<State<AppState>>,\n    mut ratatui_context: ResMut<RatatuiContext>,\n    mut reports_state: ResMut<ReportsWidgetState>,\n) -> color_eyre::Result<()> {\n    if app_state.get() != &AppState::Reports {\n        return Ok(());\n    }\n\n    ratatui_context.draw(|frame| {\n        let area = frame.area();\n        frame.render_stateful_widget_ref(ReportsWidget, area, &mut reports_state);\n    })?;\n\n    Ok(())\n}\n\nstruct ReportsWidget;\n\nimpl StatefulWidgetRef for ReportsWidget {\n    type State = ReportsWidgetState;\n\n    fn render_ref(&self, area: Rect, buf: &mut Buffer, state: &mut Self::State) {\n        let chunks = Layout::default()\n            .direction(Direction::Vertical)\n            .constraints([\n                Constraint::Length(3), // Title\n                Constraint::Min(10),   // Content\n                Constraint::Length(3), // Status bar\n            ])\n            .split(area);\n\n        // Render title\n        let title_text = match state.view_mode {\n            ViewMode::Selection => \"üìä Reports & Export\",\n            ViewMode::Report => \"üìÑ Generated Report\",\n        };\n\n        let title = Paragraph::new(title_text)\n            .style(THEME.title_style())\n            .alignment(Alignment::Center)\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .border_style(THEME.header_style()),\n            );\n        title.render_ref(chunks[0], buf);\n\n        // Render content based on view mode\n        match state.view_mode {\n            ViewMode::Selection => {\n                if state.review.is_some() {\n                    self.render_report_content(chunks[1], buf, state);\n                } else {\n                    self.render_no_data(chunks[1], buf);\n                }\n            }\n            ViewMode::Report => {\n                self.render_generated_report(chunks[1], buf, state);\n            }\n        }\n\n        // Render status bar\n        self.render_status_bar(chunks[2], buf, state);\n    }\n}\n\nimpl ReportsWidget {\n    fn render_no_data(&self, area: Rect, buf: &mut Buffer) {\n        let content = Paragraph::new(vec![\n            Line::from(\"\"),\n            Line::from(\"No analysis data available\"),\n            Line::from(\"\"),\n            Line::from(\"Please run an analysis first before generating reports.\"),\n            Line::from(\"\"),\n            Line::from(\"Press 'A' to go to the Analysis screen.\"),\n        ])\n        .alignment(Alignment::Center)\n        .block(\n            Block::default()\n                .borders(Borders::ALL)\n                .title(\"No Data\")\n                .title_style(THEME.warning_style()),\n        );\n\n        content.render_ref(area, buf);\n    }\n\n    fn render_report_content(&self, area: Rect, buf: &mut Buffer, state: &ReportsWidgetState) {\n        let chunks = Layout::default()\n            .direction(Direction::Horizontal)\n            .constraints([\n                Constraint::Percentage(40), // Format selection\n                Constraint::Percentage(60), // Preview/Export\n            ])\n            .split(area);\n\n        // Format selection\n        self.render_format_selection(chunks[0], buf, state);\n\n        // Preview/Export area\n        self.render_export_area(chunks[1], buf, state);\n    }\n\n    fn render_format_selection(&self, area: Rect, buf: &mut Buffer, state: &ReportsWidgetState) {\n        let formats = [\n            (\n                \"Summary\",\n                ReportFormat::Summary,\n                \"Quick overview with key findings\",\n            ),\n            (\n                \"Detailed\",\n                ReportFormat::Detailed,\n                \"Complete issue breakdown\",\n            ),\n            (\"JSON\", ReportFormat::Json, \"Machine-readable format\"),\n            (\n                \"Markdown\",\n                ReportFormat::Markdown,\n                \"Documentation-friendly format\",\n            ),\n        ];\n\n        let items: Vec<ListItem> = formats\n            .iter()\n            .map(|(name, format, description)| {\n                let is_selected = *format == state.selected_format;\n                let style = if is_selected {\n                    THEME.selected_style()\n                } else {\n                    Style::default()\n                };\n\n                ListItem::new(vec![\n                    Line::from(vec![Span::styled(\n                        *name,\n                        if is_selected {\n                            THEME.selected_style()\n                        } else {\n                            THEME.text_primary.into()\n                        },\n                    )]),\n                    Line::from(vec![Span::styled(*description, THEME.info_style())]),\n                ])\n                .style(style)\n            })\n            .collect();\n\n        let format_list = List::new(items).block(\n            Block::default()\n                .borders(Borders::ALL)\n                .title(\"Export Format\")\n                .title_style(THEME.header_style()),\n        );\n\n        WidgetRef::render_ref(&format_list, area, buf);\n    }\n\n    fn render_export_area(&self, area: Rect, buf: &mut Buffer, state: &ReportsWidgetState) {\n        if let Some(review) = &state.review {\n            let chunks = Layout::default()\n                .direction(Direction::Vertical)\n                .constraints([\n                    Constraint::Length(8), // Preview\n                    Constraint::Length(5), // Export button\n                    Constraint::Min(3),    // Export status\n                ])\n                .split(area);\n\n            // Preview\n            self.render_preview(chunks[0], buf, state, review);\n\n            // Export button\n            self.render_export_button(chunks[1], buf);\n\n            // Export status\n            self.render_export_status(chunks[2], buf, state);\n        }\n    }\n\n    fn render_preview(\n        &self,\n        area: Rect,\n        buf: &mut Buffer,\n        state: &ReportsWidgetState,\n        review: &crate::core::review::Review,\n    ) {\n        let preview_content = match state.selected_format {\n            ReportFormat::Summary => {\n                vec![\n                    Line::from(\"# Code Review Summary\"),\n                    Line::from(\"\"),\n                    Line::from(format!(\"Files analyzed: {}\", review.files_count)),\n                    Line::from(format!(\"Total issues: {}\", review.issues_count)),\n                    Line::from(format!(\"Critical: {}\", review.critical_issues)),\n                    Line::from(format!(\"High: {}\", review.high_issues)),\n                ]\n            }\n            ReportFormat::Detailed => {\n                vec![\n                    Line::from(\"# Detailed Code Review Report\"),\n                    Line::from(\"\"),\n                    Line::from(\"## Issues Found:\"),\n                    Line::from(format!(\"- {} Critical issues\", review.critical_issues)),\n                    Line::from(format!(\"- {} High priority issues\", review.high_issues)),\n                    Line::from(\"(Full details in exported file)\"),\n                ]\n            }\n            ReportFormat::Json => {\n                vec![\n                    Line::from(\"{\"),\n                    Line::from(\n                        \"  \\\"files_count\\\": {},\".replace(\"{}\", &review.files_count.to_string()),\n                    ),\n                    Line::from(\n                        \"  \\\"issues_count\\\": {},\".replace(\"{}\", &review.issues_count.to_string()),\n                    ),\n                    Line::from(\n                        \"  \\\"critical_issues\\\": {},\"\n                            .replace(\"{}\", &review.critical_issues.to_string()),\n                    ),\n                    Line::from(\"  \\\"issues\\\": [...]\"),\n                    Line::from(\"}\"),\n                ]\n            }\n            ReportFormat::Markdown => {\n                vec![\n                    Line::from(\"# Code Review Report\"),\n                    Line::from(\"\"),\n                    Line::from(\"## Summary\"),\n                    Line::from(format!(\"- **Files analyzed**: {}\", review.files_count)),\n                    Line::from(format!(\"- **Total issues**: {}\", review.issues_count)),\n                    Line::from(\"\"),\n                    Line::from(\"## Issues\"),\n                ]\n            }\n        };\n\n        let preview = Paragraph::new(preview_content)\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .title(\"Preview\")\n                    .title_style(THEME.header_style()),\n            )\n            .wrap(ratatui::widgets::Wrap { trim: true });\n\n        preview.render_ref(area, buf);\n    }\n\n    fn render_export_button(&self, area: Rect, buf: &mut Buffer) {\n        let button = Paragraph::new(\"ÔøΩ Generate Report (Press Enter)\")\n            .style(THEME.button_style(false))\n            .alignment(Alignment::Center)\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .border_style(Style::default().fg(THEME.primary)),\n            );\n\n        button.render_ref(area, buf);\n    }\n\n    fn render_export_status(&self, area: Rect, buf: &mut Buffer, state: &ReportsWidgetState) {\n        let (status_text, status_style) = match &state.export_status {\n            ExportStatus::None => (\"Ready to export\".to_string(), THEME.info_style()),\n            ExportStatus::Exporting(format) => (\n                format!(\"Exporting {format} report...\"),\n                THEME.warning_style(),\n            ),\n            ExportStatus::Success(path) => (\n                format!(\"‚úÖ Exported successfully to: {path}\"),\n                THEME.success_style(),\n            ),\n        };\n\n        let status = Paragraph::new(status_text)\n            .style(status_style)\n            .alignment(Alignment::Center)\n            .block(\n                Block::default()\n                    .borders(Borders::ALL)\n                    .title(\"Status\")\n                    .title_style(THEME.header_style()),\n            );\n\n        status.render_ref(area, buf);\n    }\n\n    fn render_status_bar(&self, area: Rect, buf: &mut Buffer, state: &ReportsWidgetState) {\n        let status_text = match state.view_mode {\n            ViewMode::Selection => {\n                if state.review.is_some() {\n                    \"Use ‚Üê‚Üí or Tab to change format, Enter to generate report, A for analysis, Esc to go back\"\n                } else {\n                    \"A to run analysis, Esc to go back\"\n                }\n            }\n            ViewMode::Report => \"Enter to export report, Esc to go back to selection\",\n        };\n\n        let status = Paragraph::new(status_text)\n            .style(THEME.info_style())\n            .alignment(Alignment::Center)\n            .block(\n                Block::default()\n                    .borders(Borders::TOP)\n                    .border_style(THEME.info_style()),\n            );\n\n        status.render_ref(area, buf);\n    }\n\n    fn render_generated_report(&self, area: Rect, buf: &mut Buffer, state: &ReportsWidgetState) {\n        if let Some(report_content) = &state.generated_report {\n            // Split the report into lines for scrollable display\n            let lines: Vec<Line> = report_content\n                .lines()\n                .map(|line| Line::from(line.to_string()))\n                .collect();\n\n            let report = Paragraph::new(lines)\n                .block(\n                    Block::default()\n                        .borders(Borders::ALL)\n                        .title(format!(\n                            \" {} Report \",\n                            match state.selected_format {\n                                ReportFormat::Summary => \"Summary\",\n                                ReportFormat::Detailed => \"Detailed\",\n                                ReportFormat::Json => \"JSON\",\n                                ReportFormat::Markdown => \"Markdown\",\n                            }\n                        ))\n                        .title_style(THEME.header_style()),\n                )\n                .wrap(ratatui::widgets::Wrap { trim: false })\n                .scroll((0, 0)); // TODO: Add scrolling support\n\n            report.render_ref(area, buf);\n        } else {\n            let error = Paragraph::new(\"No report generated\")\n                .alignment(Alignment::Center)\n                .block(\n                    Block::default()\n                        .borders(Borders::ALL)\n                        .title(\"Error\")\n                        .title_style(THEME.error_style()),\n                );\n            error.render_ref(area, buf);\n        }\n    }\n}\n","traces":[{"line":25,"address":[],"length":0,"stats":{"Line":0}},{"line":26,"address":[],"length":0,"stats":{"Line":0}},{"line":28,"address":[],"length":0,"stats":{"Line":0}},{"line":29,"address":[],"length":0,"stats":{"Line":0}},{"line":30,"address":[],"length":0,"stats":{"Line":0}},{"line":34,"address":[],"length":0,"stats":{"Line":0}},{"line":39,"address":[],"length":0,"stats":{"Line":0}},{"line":40,"address":[],"length":0,"stats":{"Line":0}},{"line":41,"address":[],"length":0,"stats":{"Line":0}},{"line":46,"address":[],"length":0,"stats":{"Line":0}},{"line":51,"address":[],"length":0,"stats":{"Line":0}},{"line":52,"address":[],"length":0,"stats":{"Line":0}},{"line":53,"address":[],"length":0,"stats":{"Line":0}},{"line":54,"address":[],"length":0,"stats":{"Line":0}},{"line":57,"address":[],"length":0,"stats":{"Line":0}},{"line":58,"address":[],"length":0,"stats":{"Line":0}},{"line":60,"address":[],"length":0,"stats":{"Line":0}},{"line":62,"address":[],"length":0,"stats":{"Line":0}},{"line":64,"address":[],"length":0,"stats":{"Line":0}},{"line":70,"address":[],"length":0,"stats":{"Line":0}},{"line":71,"address":[],"length":0,"stats":{"Line":0}},{"line":72,"address":[],"length":0,"stats":{"Line":0}},{"line":73,"address":[],"length":0,"stats":{"Line":0}},{"line":75,"address":[],"length":0,"stats":{"Line":0}},{"line":76,"address":[],"length":0,"stats":{"Line":0}},{"line":78,"address":[],"length":0,"stats":{"Line":0}},{"line":79,"address":[],"length":0,"stats":{"Line":0}},{"line":82,"address":[],"length":0,"stats":{"Line":0}},{"line":83,"address":[],"length":0,"stats":{"Line":0}},{"line":85,"address":[],"length":0,"stats":{"Line":0}},{"line":87,"address":[],"length":0,"stats":{"Line":0}},{"line":89,"address":[],"length":0,"stats":{"Line":0}},{"line":93,"address":[],"length":0,"stats":{"Line":0}},{"line":94,"address":[],"length":0,"stats":{"Line":0}},{"line":96,"address":[],"length":0,"stats":{"Line":0}},{"line":102,"address":[],"length":0,"stats":{"Line":0}},{"line":109,"address":[],"length":0,"stats":{"Line":0}},{"line":110,"address":[],"length":0,"stats":{"Line":0}},{"line":111,"address":[],"length":0,"stats":{"Line":0}},{"line":112,"address":[],"length":0,"stats":{"Line":0}},{"line":113,"address":[],"length":0,"stats":{"Line":0}},{"line":114,"address":[],"length":0,"stats":{"Line":0}},{"line":115,"address":[],"length":0,"stats":{"Line":0}},{"line":118,"address":[],"length":0,"stats":{"Line":0}},{"line":121,"address":[],"length":0,"stats":{"Line":0}},{"line":123,"address":[],"length":0,"stats":{"Line":0}},{"line":124,"address":[],"length":0,"stats":{"Line":0}},{"line":125,"address":[],"length":0,"stats":{"Line":0}},{"line":126,"address":[],"length":0,"stats":{"Line":0}},{"line":130,"address":[],"length":0,"stats":{"Line":0}},{"line":134,"address":[],"length":0,"stats":{"Line":0}},{"line":139,"address":[],"length":0,"stats":{"Line":0}},{"line":140,"address":[],"length":0,"stats":{"Line":0}},{"line":143,"address":[],"length":0,"stats":{"Line":0}},{"line":144,"address":[],"length":0,"stats":{"Line":0}},{"line":145,"address":[],"length":0,"stats":{"Line":0}},{"line":148,"address":[],"length":0,"stats":{"Line":0}},{"line":156,"address":[],"length":0,"stats":{"Line":0}},{"line":157,"address":[],"length":0,"stats":{"Line":0}},{"line":158,"address":[],"length":0,"stats":{"Line":0}},{"line":159,"address":[],"length":0,"stats":{"Line":0}},{"line":160,"address":[],"length":0,"stats":{"Line":0}},{"line":161,"address":[],"length":0,"stats":{"Line":0}},{"line":162,"address":[],"length":0,"stats":{"Line":0}},{"line":164,"address":[],"length":0,"stats":{"Line":0}},{"line":167,"address":[],"length":0,"stats":{"Line":0}},{"line":168,"address":[],"length":0,"stats":{"Line":0}},{"line":169,"address":[],"length":0,"stats":{"Line":0}},{"line":172,"address":[],"length":0,"stats":{"Line":0}},{"line":173,"address":[],"length":0,"stats":{"Line":0}},{"line":174,"address":[],"length":0,"stats":{"Line":0}},{"line":176,"address":[],"length":0,"stats":{"Line":0}},{"line":177,"address":[],"length":0,"stats":{"Line":0}},{"line":178,"address":[],"length":0,"stats":{"Line":0}},{"line":180,"address":[],"length":0,"stats":{"Line":0}},{"line":183,"address":[],"length":0,"stats":{"Line":0}},{"line":185,"address":[],"length":0,"stats":{"Line":0}},{"line":186,"address":[],"length":0,"stats":{"Line":0}},{"line":188,"address":[],"length":0,"stats":{"Line":0}},{"line":191,"address":[],"length":0,"stats":{"Line":0}},{"line":192,"address":[],"length":0,"stats":{"Line":0}},{"line":197,"address":[],"length":0,"stats":{"Line":0}},{"line":202,"address":[],"length":0,"stats":{"Line":0}},{"line":203,"address":[],"length":0,"stats":{"Line":0}},{"line":204,"address":[],"length":0,"stats":{"Line":0}},{"line":205,"address":[],"length":0,"stats":{"Line":0}},{"line":206,"address":[],"length":0,"stats":{"Line":0}},{"line":207,"address":[],"length":0,"stats":{"Line":0}},{"line":208,"address":[],"length":0,"stats":{"Line":0}},{"line":209,"address":[],"length":0,"stats":{"Line":0}},{"line":211,"address":[],"length":0,"stats":{"Line":0}},{"line":213,"address":[],"length":0,"stats":{"Line":0}},{"line":214,"address":[],"length":0,"stats":{"Line":0}},{"line":215,"address":[],"length":0,"stats":{"Line":0}},{"line":216,"address":[],"length":0,"stats":{"Line":0}},{"line":219,"address":[],"length":0,"stats":{"Line":0}},{"line":222,"address":[],"length":0,"stats":{"Line":0}},{"line":223,"address":[],"length":0,"stats":{"Line":0}},{"line":224,"address":[],"length":0,"stats":{"Line":0}},{"line":225,"address":[],"length":0,"stats":{"Line":0}},{"line":226,"address":[],"length":0,"stats":{"Line":0}},{"line":227,"address":[],"length":0,"stats":{"Line":0}},{"line":229,"address":[],"length":0,"stats":{"Line":0}},{"line":232,"address":[],"length":0,"stats":{"Line":0}},{"line":235,"address":[],"length":0,"stats":{"Line":0}},{"line":238,"address":[],"length":0,"stats":{"Line":0}},{"line":239,"address":[],"length":0,"stats":{"Line":0}},{"line":241,"address":[],"length":0,"stats":{"Line":0}},{"line":242,"address":[],"length":0,"stats":{"Line":0}},{"line":243,"address":[],"length":0,"stats":{"Line":0}},{"line":246,"address":[],"length":0,"stats":{"Line":0}},{"line":247,"address":[],"length":0,"stats":{"Line":0}},{"line":248,"address":[],"length":0,"stats":{"Line":0}},{"line":250,"address":[],"length":0,"stats":{"Line":0}},{"line":252,"address":[],"length":0,"stats":{"Line":0}},{"line":253,"address":[],"length":0,"stats":{"Line":0}},{"line":254,"address":[],"length":0,"stats":{"Line":0}},{"line":258,"address":[],"length":0,"stats":{"Line":0}},{"line":260,"address":[],"length":0,"stats":{"Line":0}},{"line":261,"address":[],"length":0,"stats":{"Line":0}},{"line":262,"address":[],"length":0,"stats":{"Line":0}},{"line":263,"address":[],"length":0,"stats":{"Line":0}},{"line":265,"address":[],"length":0,"stats":{"Line":0}},{"line":268,"address":[],"length":0,"stats":{"Line":0}},{"line":269,"address":[],"length":0,"stats":{"Line":0}},{"line":270,"address":[],"length":0,"stats":{"Line":0}},{"line":271,"address":[],"length":0,"stats":{"Line":0}},{"line":272,"address":[],"length":0,"stats":{"Line":0}},{"line":274,"address":[],"length":0,"stats":{"Line":0}},{"line":277,"address":[],"length":0,"stats":{"Line":0}},{"line":279,"address":[],"length":0,"stats":{"Line":0}},{"line":283,"address":[],"length":0,"stats":{"Line":0}},{"line":284,"address":[],"length":0,"stats":{"Line":0}},{"line":285,"address":[],"length":0,"stats":{"Line":0}},{"line":286,"address":[],"length":0,"stats":{"Line":0}},{"line":287,"address":[],"length":0,"stats":{"Line":0}},{"line":290,"address":[],"length":0,"stats":{"Line":0}},{"line":293,"address":[],"length":0,"stats":{"Line":0}},{"line":294,"address":[],"length":0,"stats":{"Line":0}},{"line":295,"address":[],"length":0,"stats":{"Line":0}},{"line":296,"address":[],"length":0,"stats":{"Line":0}},{"line":297,"address":[],"length":0,"stats":{"Line":0}},{"line":298,"address":[],"length":0,"stats":{"Line":0}},{"line":299,"address":[],"length":0,"stats":{"Line":0}},{"line":300,"address":[],"length":0,"stats":{"Line":0}},{"line":302,"address":[],"length":0,"stats":{"Line":0}},{"line":305,"address":[],"length":0,"stats":{"Line":0}},{"line":308,"address":[],"length":0,"stats":{"Line":0}},{"line":311,"address":[],"length":0,"stats":{"Line":0}},{"line":315,"address":[],"length":0,"stats":{"Line":0}},{"line":322,"address":[],"length":0,"stats":{"Line":0}},{"line":324,"address":[],"length":0,"stats":{"Line":0}},{"line":325,"address":[],"length":0,"stats":{"Line":0}},{"line":326,"address":[],"length":0,"stats":{"Line":0}},{"line":327,"address":[],"length":0,"stats":{"Line":0}},{"line":328,"address":[],"length":0,"stats":{"Line":0}},{"line":329,"address":[],"length":0,"stats":{"Line":0}},{"line":330,"address":[],"length":0,"stats":{"Line":0}},{"line":334,"address":[],"length":0,"stats":{"Line":0}},{"line":335,"address":[],"length":0,"stats":{"Line":0}},{"line":336,"address":[],"length":0,"stats":{"Line":0}},{"line":337,"address":[],"length":0,"stats":{"Line":0}},{"line":338,"address":[],"length":0,"stats":{"Line":0}},{"line":339,"address":[],"length":0,"stats":{"Line":0}},{"line":340,"address":[],"length":0,"stats":{"Line":0}},{"line":344,"address":[],"length":0,"stats":{"Line":0}},{"line":345,"address":[],"length":0,"stats":{"Line":0}},{"line":346,"address":[],"length":0,"stats":{"Line":0}},{"line":347,"address":[],"length":0,"stats":{"Line":0}},{"line":349,"address":[],"length":0,"stats":{"Line":0}},{"line":350,"address":[],"length":0,"stats":{"Line":0}},{"line":352,"address":[],"length":0,"stats":{"Line":0}},{"line":353,"address":[],"length":0,"stats":{"Line":0}},{"line":354,"address":[],"length":0,"stats":{"Line":0}},{"line":356,"address":[],"length":0,"stats":{"Line":0}},{"line":357,"address":[],"length":0,"stats":{"Line":0}},{"line":361,"address":[],"length":0,"stats":{"Line":0}},{"line":362,"address":[],"length":0,"stats":{"Line":0}},{"line":363,"address":[],"length":0,"stats":{"Line":0}},{"line":364,"address":[],"length":0,"stats":{"Line":0}},{"line":365,"address":[],"length":0,"stats":{"Line":0}},{"line":366,"address":[],"length":0,"stats":{"Line":0}},{"line":367,"address":[],"length":0,"stats":{"Line":0}},{"line":368,"address":[],"length":0,"stats":{"Line":0}},{"line":373,"address":[],"length":0,"stats":{"Line":0}},{"line":375,"address":[],"length":0,"stats":{"Line":0}},{"line":376,"address":[],"length":0,"stats":{"Line":0}},{"line":377,"address":[],"length":0,"stats":{"Line":0}},{"line":378,"address":[],"length":0,"stats":{"Line":0}},{"line":380,"address":[],"length":0,"stats":{"Line":0}},{"line":382,"address":[],"length":0,"stats":{"Line":0}},{"line":385,"address":[],"length":0,"stats":{"Line":0}},{"line":386,"address":[],"length":0,"stats":{"Line":0}},{"line":387,"address":[],"length":0,"stats":{"Line":0}},{"line":388,"address":[],"length":0,"stats":{"Line":0}},{"line":390,"address":[],"length":0,"stats":{"Line":0}},{"line":391,"address":[],"length":0,"stats":{"Line":0}},{"line":392,"address":[],"length":0,"stats":{"Line":0}},{"line":395,"address":[],"length":0,"stats":{"Line":0}},{"line":398,"address":[],"length":0,"stats":{"Line":0}},{"line":399,"address":[],"length":0,"stats":{"Line":0}},{"line":400,"address":[],"length":0,"stats":{"Line":0}},{"line":401,"address":[],"length":0,"stats":{"Line":0}},{"line":402,"address":[],"length":0,"stats":{"Line":0}},{"line":403,"address":[],"length":0,"stats":{"Line":0}},{"line":405,"address":[],"length":0,"stats":{"Line":0}},{"line":406,"address":[],"length":0,"stats":{"Line":0}},{"line":407,"address":[],"length":0,"stats":{"Line":0}},{"line":411,"address":[],"length":0,"stats":{"Line":0}},{"line":412,"address":[],"length":0,"stats":{"Line":0}},{"line":413,"address":[],"length":0,"stats":{"Line":0}},{"line":415,"address":[],"length":0,"stats":{"Line":0}},{"line":416,"address":[],"length":0,"stats":{"Line":0}},{"line":417,"address":[],"length":0,"stats":{"Line":0}},{"line":418,"address":[],"length":0,"stats":{"Line":0}},{"line":421,"address":[],"length":0,"stats":{"Line":0}},{"line":424,"address":[],"length":0,"stats":{"Line":0}},{"line":425,"address":[],"length":0,"stats":{"Line":0}},{"line":427,"address":[],"length":0,"stats":{"Line":0}},{"line":428,"address":[],"length":0,"stats":{"Line":0}},{"line":430,"address":[],"length":0,"stats":{"Line":0}},{"line":433,"address":[],"length":0,"stats":{"Line":0}},{"line":436,"address":[],"length":0,"stats":{"Line":0}},{"line":437,"address":[],"length":0,"stats":{"Line":0}},{"line":438,"address":[],"length":0,"stats":{"Line":0}},{"line":440,"address":[],"length":0,"stats":{"Line":0}},{"line":441,"address":[],"length":0,"stats":{"Line":0}},{"line":442,"address":[],"length":0,"stats":{"Line":0}},{"line":445,"address":[],"length":0,"stats":{"Line":0}},{"line":448,"address":[],"length":0,"stats":{"Line":0}},{"line":449,"address":[],"length":0,"stats":{"Line":0}},{"line":451,"address":[],"length":0,"stats":{"Line":0}},{"line":453,"address":[],"length":0,"stats":{"Line":0}},{"line":456,"address":[],"length":0,"stats":{"Line":0}},{"line":458,"address":[],"length":0,"stats":{"Line":0}},{"line":459,"address":[],"length":0,"stats":{"Line":0}},{"line":460,"address":[],"length":0,"stats":{"Line":0}},{"line":461,"address":[],"length":0,"stats":{"Line":0}},{"line":462,"address":[],"length":0,"stats":{"Line":0}},{"line":463,"address":[],"length":0,"stats":{"Line":0}},{"line":464,"address":[],"length":0,"stats":{"Line":0}},{"line":465,"address":[],"length":0,"stats":{"Line":0}},{"line":466,"address":[],"length":0,"stats":{"Line":0}},{"line":469,"address":[],"length":0,"stats":{"Line":0}},{"line":471,"address":[],"length":0,"stats":{"Line":0}},{"line":472,"address":[],"length":0,"stats":{"Line":0}},{"line":474,"address":[],"length":0,"stats":{"Line":0}},{"line":476,"address":[],"length":0,"stats":{"Line":0}},{"line":477,"address":[],"length":0,"stats":{"Line":0}},{"line":479,"address":[],"length":0,"stats":{"Line":0}},{"line":480,"address":[],"length":0,"stats":{"Line":0}},{"line":481,"address":[],"length":0,"stats":{"Line":0}},{"line":482,"address":[],"length":0,"stats":{"Line":0}},{"line":484,"address":[],"length":0,"stats":{"Line":0}}],"covered":0,"coverable":254},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","test_files","rust","performance_issues.rs"],"content":"// Rust Performance Issues Test File\nuse std::collections::HashMap;\nuse std::thread;\nuse std::time::Duration;\n\n// Performance Issue 1: Inefficient string operations\npub fn inefficient_string_operations() {\n    let mut result = String::new();\n    \n    // MEDIUM: Inefficient string concatenation in loop\n    for i in 0..10000 {\n        result = result + &format!(\"Item {}\\n\", i); // Line 11: Creates new string each time\n    }\n    \n    // Better approach would be:\n    // let mut result = String::with_capacity(estimated_size);\n    // for i in 0..10000 { result.push_str(&format!(\"Item {}\\n\", i)); }\n    \n    println!(\"Result length: {}\", result.len());\n}\n\n// Performance Issue 2: Unnecessary allocations\npub fn unnecessary_allocations() {\n    let numbers: Vec<i32> = (0..1000000).collect();\n    \n    // MEDIUM: Creating unnecessary intermediate collections\n    let processed: Vec<String> = numbers\n        .iter()\n        .map(|n| n.to_string()) // Line 26: Could be done lazily\n        .collect::<Vec<String>>() // Line 27: Unnecessary collection\n        .iter()\n        .filter(|s| s.len() > 2) // Line 29: Could be done before map\n        .map(|s| format!(\"Number: {}\", s)) // Line 30: Another allocation\n        .collect();\n    \n    println!(\"Processed {} items\", processed.len());\n}\n\n// Performance Issue 3: Inefficient data structures\npub fn inefficient_data_structures() {\n    let mut data = Vec::new();\n    \n    // MEDIUM: Using Vec for frequent insertions at beginning\n    for i in 0..10000 {\n        data.insert(0, i); // Line 40: O(n) operation, should use VecDeque\n    }\n    \n    // MEDIUM: Linear search when HashMap would be better\n    let mut found_items = Vec::new();\n    for target in 0..1000 {\n        for (index, &item) in data.iter().enumerate() { // Line 45: O(n¬≤) complexity\n            if item == target {\n                found_items.push(index);\n                break;\n            }\n        }\n    }\n    \n    println!(\"Found {} items\", found_items.len());\n}\n\n// Performance Issue 4: Blocking operations on main thread\npub fn blocking_operations() {\n    println!(\"Starting long operation...\");\n    \n    // HIGH: Blocking the main thread\n    thread::sleep(Duration::from_secs(5)); // Line 58: Should be async\n    \n    // MEDIUM: Synchronous file operations\n    let _contents = std::fs::read_to_string(\"/etc/hosts\") // Line 61: Should be async\n        .unwrap_or_else(|_| \"default\".to_string());\n    \n    println!(\"Operation completed\");\n}\n\n// Performance Issue 5: Memory inefficient operations\npub fn memory_inefficient() {\n    // MEDIUM: Loading entire file into memory\n    let large_data = vec![0u8; 100_000_000]; // Line 69: 100MB allocation\n    \n    // MEDIUM: Cloning large data unnecessarily\n    let cloned_data = large_data.clone(); // Line 72: Unnecessary clone\n    \n    // MEDIUM: Not using iterators efficiently\n    let mut processed = Vec::new();\n    for i in 0..cloned_data.len() {\n        processed.push(cloned_data[i] * 2); // Line 76: Could use map\n    }\n    \n    println!(\"Processed {} bytes\", processed.len());\n}\n\n// Performance Issue 6: Inefficient error handling\npub fn inefficient_error_handling() -> Result<String, Box<dyn std::error::Error>> {\n    let mut results = Vec::new();\n    \n    for i in 0..1000 {\n        // MEDIUM: Using Result in hot path\n        let result = risky_operation(i)?; // Line 87: Should batch or use different approach\n        results.push(result);\n    }\n    \n    Ok(results.join(\",\"))\n}\n\nfn risky_operation(n: i32) -> Result<String, &'static str> {\n    if n % 100 == 0 {\n        Err(\"Divisible by 100\") // Frequent errors in hot path\n    } else {\n        Ok(format!(\"Value: {}\", n))\n    }\n}\n\n// Code Quality Issues\npub fn code_quality_issues() {\n    // LOW: Unused variables\n    let unused_variable = \"This is never used\"; // Line 103\n    let _another_unused = 42; // Line 104\n    \n    // MEDIUM: Complex nested loops\n    for i in 0..100 {\n        for j in 0..100 {\n            for k in 0..100 { // Line 108: Deep nesting, could be refactored\n                if i * j * k > 50000 {\n                    println!(\"Found: {} {} {}\", i, j, k);\n                    break;\n                }\n            }\n        }\n    }\n    \n    // LOW: Magic numbers\n    let buffer_size = 4096; // Line 116: Should be a named constant\n    let timeout = 30000; // Line 117: Should be a named constant\n    \n    println!(\"Buffer: {}, Timeout: {}\", buffer_size, timeout);\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","test_files","rust","security_vulnerabilities.rs"],"content":"use std::process::Command;\nuse std::fs;\n\n// Potentially insecure code for testing AI analysis\npub fn analyze_security_issues() {\n    // Security Issue 1: Command injection vulnerability\n    let user_input = std::env::args().nth(1).unwrap_or_default();\n    let output = Command::new(\"sh\")\n        .arg(\"-c\")\n        .arg(format!(\"echo {}\", user_input)) // Dangerous: no input sanitization\n        .output()\n        .expect(\"Failed to execute command\");\n    \n    println!(\"Output: {:?}\", output);\n    \n    // Security Issue 2: Hardcoded credentials\n    let api_key = \"sk-1234567890abcdef\"; // This should be in environment variables\n    let database_password = \"admin123\"; // Never hardcode passwords\n    \n    // Security Issue 3: Unsafe block without justification\n    unsafe {\n        let ptr = std::ptr::null_mut::<i32>();\n        *ptr = 42; // This will cause segfault\n    }\n    \n    // Security Issue 4: Path traversal vulnerability\n    let filename = \"../../../etc/passwd\";\n    let _content = fs::read_to_string(filename); // No path validation\n    \n    println!(\"API Key: {}, Password: {}\", api_key, database_password);\n}\n\npub fn inefficient_code() {\n    // Performance Issue: Inefficient string concatenation\n    let mut result = String::new();\n    for i in 0..10000 {\n        result = result + &format!(\"Item {}\\n\", i); // Creates new string each time\n    }\n    \n    // Code Quality Issue: Unused variables\n    let unused_var = \"This variable is never used\";\n    let _another_unused = 42;\n    \n    // Style Issue: Inconsistent formatting\n    let badly_formatted=vec![1,2,3,4,5];\n    let   extra_spaces    =    \"too many spaces\";\n    \n    println!(\"Result length: {}\", result.len());\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","tests","test_ai_analyzer.rs"],"content":"use ai_code_buddy::core::ai_analyzer::{AnalysisRequest, GpuBackend, ProgressUpdate};\nuse ai_code_buddy::core::review::CommitStatus;\nuse anyhow::Result;\nuse pretty_assertions::assert_eq;\n\n#[test]\nfn test_gpu_backend_display() {\n    assert_eq!(format!(\"{}\", GpuBackend::Metal), \"Metal\");\n    assert_eq!(format!(\"{}\", GpuBackend::Cuda), \"CUDA\");\n    assert_eq!(format!(\"{}\", GpuBackend::Mkl), \"MKL\");\n    assert_eq!(format!(\"{}\", GpuBackend::Cpu), \"CPU\");\n}\n\n#[test]\nfn test_gpu_backend_equality() {\n    assert_eq!(GpuBackend::Metal, GpuBackend::Metal);\n    assert_eq!(GpuBackend::Cuda, GpuBackend::Cuda);\n    assert_eq!(GpuBackend::Mkl, GpuBackend::Mkl);\n    assert_eq!(GpuBackend::Cpu, GpuBackend::Cpu);\n    \n    assert_ne!(GpuBackend::Metal, GpuBackend::Cuda);\n    assert_ne!(GpuBackend::Cpu, GpuBackend::Metal);\n}\n\n#[test]\nfn test_analysis_request_creation() {\n    let request = AnalysisRequest {\n        file_path: \"test.rs\".to_string(),\n        content: \"fn main() {}\".to_string(),\n        language: \"rust\".to_string(),\n        commit_status: CommitStatus::Modified,\n    };\n    \n    assert_eq!(request.file_path, \"test.rs\");\n    assert_eq!(request.content, \"fn main() {}\");\n    assert_eq!(request.language, \"rust\");\n    assert!(matches!(request.commit_status, CommitStatus::Modified));\n}\n\n#[test]\nfn test_progress_update_creation() {\n    let update = ProgressUpdate {\n        current_file: \"src/main.rs\".to_string(),\n        progress: 0.5,\n        stage: \"analyzing\".to_string(),\n    };\n    \n    assert_eq!(update.current_file, \"src/main.rs\");\n    assert_eq!(update.progress, 0.5);\n    assert_eq!(update.stage, \"analyzing\");\n}\n\n#[test]\nfn test_gpu_backend_debug_format() {\n    let backend = GpuBackend::Metal;\n    let debug_str = format!(\"{:?}\", backend);\n    assert!(debug_str.contains(\"Metal\"));\n}\n\n#[test]\nfn test_analysis_request_serialization() -> Result<()> {\n    let request = AnalysisRequest {\n        file_path: \"test.rs\".to_string(),\n        content: \"fn main() {}\".to_string(),\n        language: \"rust\".to_string(),\n        commit_status: CommitStatus::Modified,\n    };\n    \n    // Test serialization\n    let json = serde_json::to_string(&request)?;\n    assert!(json.contains(\"test.rs\"));\n    assert!(json.contains(\"rust\"));\n    \n    // Test deserialization\n    let deserialized: AnalysisRequest = serde_json::from_str(&json)?;\n    assert_eq!(deserialized.file_path, request.file_path);\n    assert_eq!(deserialized.content, request.content);\n    assert_eq!(deserialized.language, request.language);\n    assert!(matches!(deserialized.commit_status, CommitStatus::Modified));\n    \n    Ok(())\n}\n\n#[test]\nfn test_analysis_request_with_different_statuses() {\n    let statuses = vec![\n        CommitStatus::Committed,\n        CommitStatus::Staged,\n        CommitStatus::Modified,\n        CommitStatus::Untracked,\n    ];\n    \n    for status in statuses {\n        let request = AnalysisRequest {\n            file_path: \"test.rs\".to_string(),\n            content: \"fn main() {}\".to_string(),\n            language: \"rust\".to_string(),\n            commit_status: status.clone(),\n        };\n        \n        // Use pattern matching instead of equality\n        match (&request.commit_status, &status) {\n            (CommitStatus::Committed, CommitStatus::Committed) => assert!(true),\n            (CommitStatus::Staged, CommitStatus::Staged) => assert!(true),\n            (CommitStatus::Modified, CommitStatus::Modified) => assert!(true),\n            (CommitStatus::Untracked, CommitStatus::Untracked) => assert!(true),\n            _ => assert!(false, \"Status mismatch\"),\n        }\n    }\n}\n\n#[test]\nfn test_progress_update_with_different_values() {\n    let progress_values = vec![0.0, 0.25, 0.5, 0.75, 1.0];\n    \n    for progress in progress_values {\n        let update = ProgressUpdate {\n            current_file: format!(\"file_{}.rs\", (progress * 100.0) as i32),\n            progress,\n            stage: \"analyzing\".to_string(),\n        };\n        \n        assert_eq!(update.progress, progress);\n        assert!(update.current_file.contains(\"file_\"));\n    }\n}\n\n#[test]\nfn test_analysis_request_with_empty_content() {\n    let request = AnalysisRequest {\n        file_path: \"empty.rs\".to_string(),\n        content: \"\".to_string(),\n        language: \"rust\".to_string(),\n        commit_status: CommitStatus::Untracked,\n    };\n    \n    assert!(request.content.is_empty());\n    assert_eq!(request.file_path, \"empty.rs\");\n}\n\n#[test]\nfn test_analysis_request_with_large_content() {\n    let large_content = \"fn main() {\\n\".to_string() + &\"    println!(\\\"Hello\\\");\\n\".repeat(1000) + \"}\";\n    \n    let request = AnalysisRequest {\n        file_path: \"large.rs\".to_string(),\n        content: large_content.clone(),\n        language: \"rust\".to_string(),\n        commit_status: CommitStatus::Modified,\n    };\n    \n    assert_eq!(request.content, large_content);\n    assert!(request.content.len() > 1000);\n}\n\n#[test]\nfn test_analysis_request_different_languages() {\n    let languages = vec![\"rust\", \"python\", \"javascript\", \"typescript\", \"go\", \"java\"];\n    \n    for language in languages {\n        let request = AnalysisRequest {\n            file_path: format!(\"test.{}\", language),\n            content: \"// test content\".to_string(),\n            language: language.to_string(),\n            commit_status: CommitStatus::Untracked,\n        };\n        \n        assert_eq!(request.language, language);\n        assert!(request.file_path.contains(language));\n    }\n}\n\n#[test]\nfn test_progress_update_stages() {\n    let stages = vec![\"initializing\", \"analyzing\", \"processing\", \"finalizing\", \"complete\"];\n    \n    for stage in stages {\n        let update = ProgressUpdate {\n            current_file: \"test.rs\".to_string(),\n            progress: 0.5,\n            stage: stage.to_string(),\n        };\n        \n        assert_eq!(update.stage, stage);\n    }\n}\n\n#[test]\nfn test_gpu_backend_clone() {\n    let backend = GpuBackend::Metal;\n    let cloned = backend.clone();\n    assert_eq!(backend, cloned);\n}\n\n#[test]\nfn test_analysis_request_clone() {\n    let request = AnalysisRequest {\n        file_path: \"test.rs\".to_string(),\n        content: \"fn main() {}\".to_string(),\n        language: \"rust\".to_string(),\n        commit_status: CommitStatus::Modified,\n    };\n    \n    let cloned = request.clone();\n    assert_eq!(request.file_path, cloned.file_path);\n    assert_eq!(request.content, cloned.content);\n    assert_eq!(request.language, cloned.language);\n    \n    // Use pattern matching for comparison\n    match (&request.commit_status, &cloned.commit_status) {\n        (CommitStatus::Modified, CommitStatus::Modified) => assert!(true),\n        _ => assert!(false, \"Status mismatch\"),\n    }\n}\n\n#[test]\nfn test_progress_update_clone() {\n    let update = ProgressUpdate {\n        current_file: \"src/main.rs\".to_string(),\n        progress: 0.75,\n        stage: \"analyzing\".to_string(),\n    };\n    \n    let cloned = update.clone();\n    assert_eq!(update.current_file, cloned.current_file);\n    assert_eq!(update.progress, cloned.progress);\n    assert_eq!(update.stage, cloned.stage);\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","tests","test_analysis_simple.rs"],"content":"use ai_code_buddy::core::analysis::perform_analysis;\nuse ai_code_buddy::{Args, OutputFormat};\nuse anyhow::Result;\nuse git2::Repository;\nuse tempfile;\n\n#[test]\nfn test_perform_analysis_basic() -> Result<()> {\n    let temp_dir = tempfile::tempdir()?;\n    let repo = Repository::init(&temp_dir)?;\n    \n    // Set up git config\n    let mut config = repo.config()?;\n    config.set_str(\"user.name\", \"Test User\")?;\n    config.set_str(\"user.email\", \"test@example.com\")?;\n    \n    // Create and add a file, then commit to create a proper repository\n    let file_path = temp_dir.path().join(\"test.rs\");\n    std::fs::write(&file_path, \"fn main() {}\")?;\n    \n    let mut index = repo.index()?;\n    index.add_path(std::path::Path::new(\"test.rs\"))?;\n    index.write()?;\n    \n    let tree_id = index.write_tree()?;\n    let tree = repo.find_tree(tree_id)?;\n    let signature = git2::Signature::now(\"Test User\", \"test@example.com\")?;\n    \n    let _commit = repo.commit(\n        Some(\"HEAD\"),\n        &signature,\n        &signature,\n        \"Initial commit\",\n        &tree,\n        &[],\n    )?;\n    \n    let args = Args {\n        repo_path: temp_dir.path().to_string_lossy().to_string(),\n        source_branch: \"main\".to_string(),\n        target_branch: \"HEAD\".to_string(),\n        verbose: false,\n        output_format: OutputFormat::Json,\n        exclude_patterns: vec![],\n        include_patterns: vec![],\n        use_gpu: false,\n        force_cpu: true,\n        cli_mode: true,\n        show_credits: false,\n    };\n    \n    let result = perform_analysis(&args);\n    assert!(result.is_ok() || result.is_err()); // Accept either result\n    \n    Ok(())\n}\n\n#[test]\nfn test_perform_analysis_invalid_repository() {\n    let args = Args {\n        repo_path: \"/non/existent/path\".to_string(),\n        source_branch: \"main\".to_string(),\n        target_branch: \"HEAD\".to_string(),\n        verbose: false,\n        output_format: OutputFormat::Summary,\n        exclude_patterns: vec![],\n        include_patterns: vec![],\n        use_gpu: false,\n        force_cpu: true,\n        cli_mode: true,\n        show_credits: false,\n    };\n    \n    let result = perform_analysis(&args);\n    assert!(result.is_err());\n}\n\n#[test]\nfn test_analysis_gpu_settings() -> Result<()> {\n    let temp_dir = tempfile::tempdir()?;\n    let repo = Repository::init(&temp_dir)?;\n    \n    // Set up git config\n    let mut config = repo.config()?;\n    config.set_str(\"user.name\", \"Test User\")?;\n    config.set_str(\"user.email\", \"test@example.com\")?;\n    \n    let file_path = temp_dir.path().join(\"test.rs\");\n    std::fs::write(&file_path, \"fn main() {}\")?;\n    \n    let mut index = repo.index()?;\n    index.add_path(std::path::Path::new(\"test.rs\"))?;\n    index.write()?;\n    \n    let tree_id = index.write_tree()?;\n    let tree = repo.find_tree(tree_id)?;\n    let signature = git2::Signature::now(\"Test User\", \"test@example.com\")?;\n    \n    let _commit = repo.commit(\n        Some(\"HEAD\"),\n        &signature,\n        &signature,\n        \"Initial commit\",\n        &tree,\n        &[],\n    )?;\n    \n    // Test with GPU enabled\n    let args_gpu = Args {\n        repo_path: temp_dir.path().to_string_lossy().to_string(),\n        source_branch: \"main\".to_string(),\n        target_branch: \"HEAD\".to_string(),\n        verbose: false,\n        output_format: OutputFormat::Summary,\n        exclude_patterns: vec![],\n        include_patterns: vec![],\n        use_gpu: true,\n        force_cpu: false,\n        cli_mode: true,\n        show_credits: false,\n    };\n    \n    let result = perform_analysis(&args_gpu);\n    assert!(result.is_ok() || result.is_err()); // Accept either result\n    \n    // Test with CPU forced\n    let args_cpu = Args {\n        repo_path: temp_dir.path().to_string_lossy().to_string(),\n        source_branch: \"main\".to_string(),\n        target_branch: \"HEAD\".to_string(),\n        verbose: false,\n        output_format: OutputFormat::Summary,\n        exclude_patterns: vec![],\n        include_patterns: vec![],\n        use_gpu: false,\n        force_cpu: true,\n        cli_mode: true,\n        show_credits: false,\n    };\n    \n    let result = perform_analysis(&args_cpu);\n    assert!(result.is_ok() || result.is_err()); // Accept either result\n    \n    Ok(())\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","tests","test_args.rs"],"content":"use ai_code_buddy::args::{Args, OutputFormat};\nuse clap::Parser;\n\n#[test]\nfn test_args_default_values() {\n    let args = Args::parse_from(&[\"ai-code-buddy\"]);\n    \n    assert_eq!(args.repo_path, \".\");\n    assert_eq!(args.source_branch, \"main\");\n    assert_eq!(args.target_branch, \"HEAD\");\n    assert_eq!(args.output_format, OutputFormat::Summary);\n    assert!(!args.show_credits);\n    assert!(!args.force_cpu);\n}\n\n#[test]\nfn test_args_custom_values() {\n    let args = Args::parse_from(&[\n        \"ai-code-buddy\",\n        \"/path/to/repo\",\n        \"--source\", \"develop\",\n        \"--target\", \"feature-branch\",\n        \"--format\", \"json\",\n        \"--cpu\",\n        \"--credits\"\n    ]);\n    \n    assert_eq!(args.repo_path, \"/path/to/repo\");\n    assert_eq!(args.source_branch, \"develop\");\n    assert_eq!(args.target_branch, \"feature-branch\");\n    assert_eq!(args.output_format, OutputFormat::Json);\n    assert!(args.show_credits);\n    assert!(args.force_cpu);\n}\n\n#[test]\nfn test_output_format_parsing() {\n    let formats = [\n        (\"summary\", OutputFormat::Summary),\n        (\"detailed\", OutputFormat::Detailed),\n        (\"json\", OutputFormat::Json),\n        (\"markdown\", OutputFormat::Markdown),\n    ];\n    \n    for (format_str, expected) in formats {\n        let args = Args::parse_from(&[\"ai-code-buddy\", \"--format\", format_str]);\n        assert_eq!(args.output_format, expected);\n    }\n}\n\n#[test]\nfn test_gpu_flag_combinations() {\n    // Test --gpu flag explicitly set\n    let args = Args::parse_from(&[\"ai-code-buddy\", \"--gpu\"]);\n    assert!(args.use_gpu);\n    assert!(!args.force_cpu);\n    \n    // Test --cpu flag - force_cpu should be true\n    let args = Args::parse_from(&[\"ai-code-buddy\", \"--cpu\"]);\n    // When --cpu is specified, force_cpu is true (CPU is forced)\n    assert!(args.force_cpu);\n    // use_gpu may still be true due to default, but force_cpu takes precedence\n    \n    // Test no flags (should auto-detect)\n    let args = Args::parse_from(&[\"ai-code-buddy\"]);\n    // GPU availability depends on compile-time features\n    // When compiled with --no-default-features, GPU should not be available\n    #[cfg(not(gpu_available))]\n    assert!(!args.use_gpu);\n    #[cfg(gpu_available)]\n    assert!(args.use_gpu);\n    assert!(!args.force_cpu); // force_cpu should be false by default\n}\n\n#[test]\nfn test_invalid_output_format() {\n    let result = Args::try_parse_from(&[\"ai-code-buddy\", \"--format\", \"invalid\"]);\n    assert!(result.is_err());\n}\n\n#[test]\nfn test_help_flag() {\n    let result = Args::try_parse_from(&[\"ai-code-buddy\", \"--help\"]);\n    assert!(result.is_err()); // Help flag causes early exit\n}\n\n#[test]\nfn test_version_flag() {\n    let result = Args::try_parse_from(&[\"ai-code-buddy\", \"--version\"]);\n    assert!(result.is_err()); // Version flag causes early exit\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","tests","test_git.rs"],"content":"use ai_code_buddy::core::git::GitAnalyzer;\nuse std::fs;\nuse std::process::Command;\nuse tempfile::TempDir;\n\nfn create_test_repo() -> (TempDir, String) {\n    let temp_dir = TempDir::new().unwrap();\n    let repo_path = temp_dir.path().to_str().unwrap().to_string();\n    \n    // Initialize git repo\n    Command::new(\"git\")\n        .args([\"init\"])\n        .current_dir(&repo_path)\n        .output()\n        .expect(\"Failed to init git repo\");\n    \n    // Configure git\n    Command::new(\"git\")\n        .args([\"config\", \"user.email\", \"test@example.com\"])\n        .current_dir(&repo_path)\n        .output()\n        .unwrap();\n    \n    Command::new(\"git\")\n        .args([\"config\", \"user.name\", \"Test User\"])\n        .current_dir(&repo_path)\n        .output()\n        .unwrap();\n    \n    // Create initial commit\n    fs::write(format!(\"{}/README.md\", repo_path), \"# Test Repo\").unwrap();\n    \n    Command::new(\"git\")\n        .args([\"add\", \".\"])\n        .current_dir(&repo_path)\n        .output()\n        .unwrap();\n    \n    Command::new(\"git\")\n        .args([\"commit\", \"-m\", \"Initial commit\"])\n        .current_dir(&repo_path)\n        .output()\n        .unwrap();\n    \n    (temp_dir, repo_path)\n}\n\n#[test]\nfn test_git_analyzer_new_valid_repo() {\n    let (_temp_dir, repo_path) = create_test_repo();\n    let result = GitAnalyzer::new(&repo_path);\n    assert!(result.is_ok());\n}\n\n#[test]\nfn test_git_analyzer_new_invalid_repo() {\n    let temp_dir = TempDir::new().unwrap();\n    let repo_path = temp_dir.path().to_str().unwrap();\n    \n    let result = GitAnalyzer::new(repo_path);\n    assert!(result.is_err());\n}\n\n#[test]\nfn test_get_changed_files_same_branch() {\n    let (_temp_dir, repo_path) = create_test_repo();\n    let analyzer = GitAnalyzer::new(&repo_path).unwrap();\n    \n    let result = analyzer.get_changed_files(\"HEAD\", \"HEAD\");\n    assert!(result.is_ok());\n    let files = result.unwrap();\n    assert!(files.is_empty()); // No changes between same commit\n}\n\n#[test]\nfn test_get_changed_files_with_changes() {\n    let (_temp_dir, repo_path) = create_test_repo();\n    \n    // Create a new file\n    fs::write(format!(\"{}/test.rs\", repo_path), \"fn main() {}\").unwrap();\n    \n    Command::new(\"git\")\n        .args([\"add\", \".\"])\n        .current_dir(&repo_path)\n        .output()\n        .unwrap();\n    \n    Command::new(\"git\")\n        .args([\"commit\", \"-m\", \"Add test file\"])\n        .current_dir(&repo_path)\n        .output()\n        .unwrap();\n    \n    let analyzer = GitAnalyzer::new(&repo_path).unwrap();\n    // Compare the current working tree to HEAD to see uncommitted changes\n    // First create an uncommitted change\n    fs::write(format!(\"{}/new_file.rs\", repo_path), \"fn test() {}\").unwrap();\n    \n    let result = analyzer.get_uncommitted_files();\n    \n    assert!(result.is_ok());\n    let files = result.unwrap();\n    assert!(!files.is_empty()); // Should have uncommitted changes\n}\n\n#[test]\nfn test_get_file_content() {\n    let (_temp_dir, repo_path) = create_test_repo();\n    let analyzer = GitAnalyzer::new(&repo_path).unwrap();\n    \n    let content = analyzer.get_file_content(\"README.md\", \"HEAD\");\n    assert!(content.is_ok());\n    assert_eq!(content.unwrap(), \"# Test Repo\");\n}\n\n#[test]\nfn test_get_file_content_nonexistent() {\n    let (_temp_dir, repo_path) = create_test_repo();\n    let analyzer = GitAnalyzer::new(&repo_path).unwrap();\n    \n    let content = analyzer.get_file_content(\"nonexistent.rs\", \"HEAD\");\n    assert!(content.is_err());\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","tests","test_integration.rs"],"content":"use ai_code_buddy::core::review::{Review, Issue, CommitStatus};\nuse ai_code_buddy::widget_states::analysis::AnalysisWidgetState;\nuse ai_code_buddy::widget_states::overview::{OverviewWidgetState, OverviewComponent};\nuse ai_code_buddy::widget_states::reports::ReportsWidgetState;\nuse ratatui::{\n    backend::TestBackend,\n    buffer::Buffer,\n    layout::{Constraint, Direction, Layout, Rect},\n    style::{Color, Style},\n    widgets::{Block, Borders, Clear, Gauge, List, ListItem, Paragraph, Wrap},\n    Terminal,\n};\n\n/// Test that analysis widget renders correctly with no analysis\n#[test]\nfn test_analysis_widget_empty_state() {\n    let backend = TestBackend::new(80, 24);\n    let mut terminal = Terminal::new(backend).unwrap();\n    let state = AnalysisWidgetState::default();\n\n    terminal\n        .draw(|f| {\n            let area = f.area();\n            \n            let block = Block::default()\n                .title(\"üîç Analysis\")\n                .borders(Borders::ALL);\n            \n            if state.is_analyzing {\n                let gauge = Gauge::default()\n                    .block(block)\n                    .gauge_style(Style::default().fg(Color::Blue))\n                    .percent((state.progress * 100.0) as u16)\n                    .label(format!(\"Analyzing: {}\", state.current_file));\n                \n                f.render_widget(gauge, area);\n            } else {\n                let paragraph = Paragraph::new(\"Press Enter to start analysis\")\n                    .block(block)\n                    .wrap(Wrap { trim: true });\n                \n                f.render_widget(paragraph, area);\n            }\n        })\n        .unwrap();\n\n    let buffer = terminal.backend().buffer();\n    \n    // Check that the widget shows the correct initial state\n    assert!(buffer_contains_text(buffer, \"Analysis\"));\n    assert!(buffer_contains_text(buffer, \"Press Enter to start analysis\"));\n}\n\n/// Test that analysis widget renders correctly during analysis\n#[test]\nfn test_analysis_widget_analyzing_state() {\n    let backend = TestBackend::new(80, 24);\n    let mut terminal = Terminal::new(backend).unwrap();\n    let mut state = AnalysisWidgetState::default();\n    \n    state.start_analysis();\n    state.update_progress(0.5, \"src/main.rs\".to_string());\n\n    terminal\n        .draw(|f| {\n            let area = f.area();\n            \n            let block = Block::default()\n                .title(\"üîç Analysis\")\n                .borders(Borders::ALL);\n            \n            let gauge = Gauge::default()\n                .block(block)\n                .gauge_style(Style::default().fg(Color::Blue))\n                .percent((state.progress * 100.0) as u16)\n                .label(format!(\"Analyzing: {}\", state.current_file));\n            \n            f.render_widget(gauge, area);\n        })\n        .unwrap();\n\n    let buffer = terminal.backend().buffer();\n    \n    // Check that the widget shows the analyzing state\n    assert!(buffer_contains_text(buffer, \"Analysis\"));\n    assert!(buffer_contains_text(buffer, \"Analyzing: src/main.rs\"));\n}\n\n/// Test overview widget rendering with menu items\n#[test]\nfn test_overview_widget_menu_rendering() {\n    let backend = TestBackend::new(80, 24);\n    let mut terminal = Terminal::new(backend).unwrap();\n    let _state = OverviewWidgetState::default();\n\n    terminal\n        .draw(|f| {\n            let area = f.area();\n            \n            let menu_items = vec![\n                ListItem::new(\"üöÄ Start Analysis\"),\n                ListItem::new(\"üìä View Reports\"),\n                ListItem::new(\"‚öôÔ∏è  Settings\"),\n                ListItem::new(\"‚ùì Help\"),\n                ListItem::new(\"üö™ Exit\"),\n            ];\n            \n            let list = List::new(menu_items)\n                .block(Block::default()\n                    .title(\"ü§ñ AI Code Buddy\")\n                    .borders(Borders::ALL))\n                .highlight_style(Style::default().fg(Color::Yellow))\n                .highlight_symbol(\"‚ñ∫ \");\n            \n            f.render_widget(list, area);\n        })\n        .unwrap();\n\n    let buffer = terminal.backend().buffer();\n    \n    // Check that menu items are rendered\n    assert!(buffer_contains_text(buffer, \"AI Code Buddy\"));\n    assert!(buffer_contains_text(buffer, \"Start Analysis\"));\n    assert!(buffer_contains_text(buffer, \"View Reports\"));\n    assert!(buffer_contains_text(buffer, \"Settings\"));\n    assert!(buffer_contains_text(buffer, \"Help\"));\n    assert!(buffer_contains_text(buffer, \"Exit\"));\n}\n\n/// Test reports widget rendering with review data\n#[test]\nfn test_reports_widget_with_data() {\n    let backend = TestBackend::new(100, 30);\n    let mut terminal = Terminal::new(backend).unwrap();\n    let mut state = ReportsWidgetState::default();\n    \n    let review = Review {\n        files_count: 5,\n        issues_count: 3,\n        critical_issues: 1,\n        high_issues: 1,\n        medium_issues: 1,\n        low_issues: 0,\n        issues: vec![\n            Issue {\n                file: \"src/auth.rs\".to_string(),\n                line: 42,\n                severity: \"Critical\".to_string(),\n                category: \"Security\".to_string(),\n                description: \"Hardcoded password detected\".to_string(),\n                commit_status: CommitStatus::Modified,\n            }\n        ],\n    };\n    \n    state.set_review(review);\n    let report_content = state.generate_report().unwrap();\n\n    terminal\n        .draw(|f| {\n            let area = f.area();\n            \n            let block = Block::default()\n                .title(\"üìä Reports\")\n                .borders(Borders::ALL);\n            \n            let paragraph = Paragraph::new(report_content.as_str())\n                .block(block)\n                .wrap(Wrap { trim: true });\n            \n            f.render_widget(paragraph, area);\n        })\n        .unwrap();\n\n    let buffer = terminal.backend().buffer();\n    \n    // Check that the report content is rendered\n    assert!(buffer_contains_text(buffer, \"Reports\"));\n    assert!(buffer_contains_text(buffer, \"AI Code Review Summary\"));\n    assert!(buffer_contains_text(buffer, \"Files analyzed: 5\"));\n    assert!(buffer_contains_text(buffer, \"Total issues found: 3\"));\n}\n\n/// Test layout splitting for multi-widget views\n#[test]\nfn test_multi_widget_layout() {\n    let backend = TestBackend::new(120, 40);\n    let mut terminal = Terminal::new(backend).unwrap();\n\n    terminal\n        .draw(|f| {\n            let area = f.area();\n            \n            // Split the layout into multiple areas\n            let chunks = Layout::default()\n                .direction(Direction::Horizontal)\n                .constraints([\n                    Constraint::Percentage(30),\n                    Constraint::Percentage(70),\n                ])\n                .split(area);\n            \n            // Left panel - Overview\n            let overview_block = Block::default()\n                .title(\"ü§ñ Overview\")\n                .borders(Borders::ALL);\n            f.render_widget(overview_block, chunks[0]);\n            \n            // Right panel - split vertically\n            let right_chunks = Layout::default()\n                .direction(Direction::Vertical)\n                .constraints([\n                    Constraint::Percentage(60),\n                    Constraint::Percentage(40),\n                ])\n                .split(chunks[1]);\n            \n            // Top right - Analysis\n            let analysis_block = Block::default()\n                .title(\"üîç Analysis\")\n                .borders(Borders::ALL);\n            f.render_widget(analysis_block, right_chunks[0]);\n            \n            // Bottom right - Reports\n            let reports_block = Block::default()\n                .title(\"üìä Reports\")\n                .borders(Borders::ALL);\n            f.render_widget(reports_block, right_chunks[1]);\n        })\n        .unwrap();\n\n    let buffer = terminal.backend().buffer();\n    \n    // Check that all widgets are rendered\n    assert!(buffer_contains_text(buffer, \"Overview\"));\n    assert!(buffer_contains_text(buffer, \"Analysis\"));\n    assert!(buffer_contains_text(buffer, \"Reports\"));\n}\n\n/// Test popup overlay rendering\n#[test]\nfn test_popup_overlay() {\n    let backend = TestBackend::new(80, 24);\n    let mut terminal = Terminal::new(backend).unwrap();\n\n    terminal\n        .draw(|f| {\n            let area = f.area();\n            \n            // Background widget\n            let background = Block::default()\n                .title(\"Background\")\n                .borders(Borders::ALL);\n            f.render_widget(background, area);\n            \n            // Popup overlay\n            let popup_area = centered_rect(50, 50, area);\n            f.render_widget(Clear, popup_area);\n            \n            let popup = Block::default()\n                .title(\"üÜò Help\")\n                .borders(Borders::ALL)\n                .style(Style::default().fg(Color::Yellow));\n            f.render_widget(popup, popup_area);\n            \n            let help_text = Paragraph::new(\"Press Esc to close this help dialog\")\n                .wrap(Wrap { trim: true });\n            let inner = Rect::new(\n                popup_area.x + 1,\n                popup_area.y + 1,\n                popup_area.width.saturating_sub(2),\n                popup_area.height.saturating_sub(2)\n            );\n            f.render_widget(help_text, inner);\n        })\n        .unwrap();\n\n    let buffer = terminal.backend().buffer();\n    \n    // Check that both background and popup are rendered\n    assert!(buffer_contains_text(buffer, \"Background\"));\n    assert!(buffer_contains_text(buffer, \"Help\"));\n    assert!(buffer_contains_text(buffer, \"Press Esc to close\"));\n}\n\n/// Test widget state interactions and updates\n#[test]\nfn test_widget_state_interactions() {\n    let mut analysis_state = AnalysisWidgetState::default();\n    let overview_state = OverviewWidgetState::default();\n    let mut reports_state = ReportsWidgetState::default();\n    \n    // Simulate starting analysis from overview\n    assert_eq!(overview_state.selected_component, OverviewComponent::StartAnalysis);\n    \n    // Start analysis\n    analysis_state.start_analysis();\n    assert!(analysis_state.is_analyzing);\n    \n    // Update progress\n    analysis_state.update_progress(0.3, \"src/lib.rs\".to_string());\n    assert_eq!(analysis_state.progress, 0.3);\n    assert_eq!(analysis_state.current_file, \"src/lib.rs\");\n    \n    // Complete analysis\n    let review = Review {\n        files_count: 3,\n        issues_count: 2,\n        critical_issues: 0,\n        high_issues: 1,\n        medium_issues: 1,\n        low_issues: 0,\n        issues: vec![],\n    };\n    \n    analysis_state.complete_analysis(review.clone());\n    assert!(!analysis_state.is_analyzing);\n    assert!(analysis_state.review.is_some());\n    \n    // Pass review to reports\n    reports_state.set_review(review);\n    assert!(reports_state.review.is_some());\n    \n    // Generate report\n    let report = reports_state.generate_report();\n    assert!(report.is_some());\n    assert!(reports_state.generated_report.is_some());\n}\n\n// Helper functions\n\nfn buffer_contains_text(buffer: &Buffer, text: &str) -> bool {\n    for y in 0..buffer.area.height {\n        for x in 0..buffer.area.width {\n            let cell = &buffer[(x, y)];\n            if cell.symbol().contains(text) {\n                return true;\n            }\n        }\n    }\n    \n    // Also check if the text spans multiple cells\n    let buffer_content = (0..buffer.area.height)\n        .map(|y| {\n            (0..buffer.area.width)\n                .map(|x| buffer[(x, y)].symbol())\n                .collect::<String>()\n        })\n        .collect::<Vec<String>>()\n        .join(\"\\n\");\n    \n    buffer_content.contains(text)\n}\n\nfn centered_rect(percent_x: u16, percent_y: u16, r: Rect) -> Rect {\n    let popup_layout = Layout::default()\n        .direction(Direction::Vertical)\n        .constraints([\n            Constraint::Percentage((100 - percent_y) / 2),\n            Constraint::Percentage(percent_y),\n            Constraint::Percentage((100 - percent_y) / 2),\n        ])\n        .split(r);\n\n    Layout::default()\n        .direction(Direction::Horizontal)\n        .constraints([\n            Constraint::Percentage((100 - percent_x) / 2),\n            Constraint::Percentage(percent_x),\n            Constraint::Percentage((100 - percent_x) / 2),\n        ])\n        .split(popup_layout[1])[1]\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","tests","test_main.rs"],"content":"use ai_code_buddy::args::{Args, OutputFormat};\nuse pretty_assertions::assert_eq;\nuse tempfile::TempDir;\n\n// Note: Testing main() directly is challenging due to the Bevy app structure\n// Instead, we'll test the components that can be unit tested\n\n#[test]\nfn test_detect_gpu_capabilities() {\n    // Test the GPU detection functions if they were exposed\n    // This is testing the actual GPU detection logic from main.rs\n    \n    // For now, we'll test the general flow\n    assert!(true); // GPU detection should not panic\n}\n\n#[test]\nfn test_is_apple_silicon() {\n    // Test Apple Silicon detection\n    // This would test the actual is_apple_silicon function\n    \n    #[cfg(target_os = \"macos\")]\n    {\n        // On macOS, should detect correctly\n        assert!(true); // Should not panic\n    }\n    \n    #[cfg(not(target_os = \"macos\"))]\n    {\n        // On non-macOS, should be false\n        assert!(true); // Should not panic\n    }\n}\n\n#[test]\nfn test_has_nvidia_gpu() {\n    // Test NVIDIA GPU detection\n    // This would test the actual has_nvidia_gpu function\n    \n    // Should not panic regardless of actual hardware\n    assert!(true);\n}\n\n#[test]\nfn test_has_intel_mkl() {\n    // Test Intel MKL detection\n    // This would test the actual has_intel_mkl function\n    \n    // Should not panic regardless of actual hardware\n    assert!(true);\n}\n\n#[test]\nfn test_cli_mode_detection() {\n    // Test CLI mode handling\n    let temp_dir = TempDir::new().unwrap();\n    \n    let args = Args {\n        repo_path: temp_dir.path().to_string_lossy().to_string(),\n        source_branch: \"main\".to_string(),\n        target_branch: \"develop\".to_string(),\n        cli_mode: false,\n        verbose: false,\n        show_credits: false,\n        output_format: OutputFormat::Summary,\n        exclude_patterns: vec![],\n        include_patterns: vec![],\n        use_gpu: false,\n        force_cpu: false,\n    };\n    \n    // CLI mode is determined by args.cli_mode\n    assert_eq!(args.cli_mode, false);\n    \n    // For now, just ensure Args can be created\n    assert_eq!(args.source_branch, \"main\");\n    assert_eq!(args.target_branch, \"develop\");\n}\n\n#[test]\nfn test_gpu_backend_initialization() {\n    // Test GPU backend initialization logic\n    \n    // Test CPU mode\n    let use_gpu = false;\n    \n    if use_gpu {\n        // Would test GPU backend detection\n        assert!(true);\n    } else {\n        // Should use CPU backend\n        assert!(true);\n    }\n}\n\n#[test]\nfn test_main_args_parsing() {\n    // Test that main function can handle different argument combinations\n    \n    let args_combinations = vec![\n        Args {\n            repo_path: \".\".to_string(),\n            source_branch: \"main\".to_string(),\n            target_branch: \"develop\".to_string(),\n            cli_mode: false,\n            verbose: false,\n            show_credits: false,\n            output_format: OutputFormat::Summary,\n            exclude_patterns: vec![],\n            include_patterns: vec![],\n            use_gpu: false,\n            force_cpu: true,\n        },\n        Args {\n            repo_path: \".\".to_string(),\n            source_branch: \"feature\".to_string(),\n            target_branch: \"main\".to_string(),\n            cli_mode: false,\n            verbose: true,\n            show_credits: true,\n            output_format: OutputFormat::Json,\n            exclude_patterns: vec![],\n            include_patterns: vec![],\n            use_gpu: true,\n            force_cpu: false,\n        },\n    ];\n    \n    for args in args_combinations {\n        // Test that each args combination can be created successfully\n        assert!(!args.repo_path.is_empty());\n        assert!(!args.source_branch.is_empty());\n        assert!(!args.target_branch.is_empty());\n    }\n}\n\n#[test]\nfn test_terminal_setup_logic() {\n    // Test the terminal setup and cleanup logic\n    \n    // This would normally test the crossterm setup but we can't do that in unit tests\n    // Instead, test the concepts\n    \n    // Terminal should be configurable for raw mode\n    let enable_raw_mode = true;\n    assert!(enable_raw_mode);\n    \n    // Mouse capture should be configurable\n    let enable_mouse_capture = true;\n    assert!(enable_mouse_capture);\n    \n    // Cursor style should be configurable\n    let cursor_blinking = true;\n    assert!(cursor_blinking);\n}\n\n#[test]\nfn test_app_initialization_state() {\n    // Test the app initialization logic\n    \n    // App should start in a defined state\n    let initial_state = \"Overview\"; // Would be AppState::Overview\n    assert!(!initial_state.is_empty());\n    \n    // Args should be available as a resource\n    let args = Args {\n        repo_path: \".\".to_string(),\n        source_branch: \"main\".to_string(),\n        target_branch: \"develop\".to_string(),\n        cli_mode: false,\n        verbose: false,\n        show_credits: false,\n        output_format: OutputFormat::Summary,\n        exclude_patterns: vec![],\n        include_patterns: vec![],\n        use_gpu: false,\n        force_cpu: false,\n    };\n    \n    assert!(!args.repo_path.is_empty());\n}\n\n#[test]\nfn test_plugin_registration() {\n    // Test that all necessary plugins are registered\n    \n    let required_plugins = vec![\n        \"OverviewPlugin\",\n        \"AnalysisPlugin\", \n        \"ReportsPlugin\",\n        \"RatatuiPlugins\",\n        \"TokioTasksPlugin\",\n    ];\n    \n    for plugin in required_plugins {\n        // Each plugin should be defined\n        assert!(!plugin.is_empty());\n    }\n}\n\n#[test]\nfn test_system_registration() {\n    // Test that all necessary systems are registered\n    \n    let required_systems = vec![\n        \"initialize_app\",\n        \"keyboard_events_handler\",\n        \"mouse_events_handler\",\n        \"app_events_handler\",\n    ];\n    \n    for system in required_systems {\n        // Each system should be defined\n        assert!(!system.is_empty());\n    }\n}\n\n#[test]\nfn test_frame_rate_configuration() {\n    // Test frame rate configuration\n    use std::time::Duration;\n    \n    let target_fps = 60.0;\n    let frame_rate = Duration::from_secs_f64(1.0 / target_fps);\n    \n    // Should create a valid duration\n    assert!(frame_rate.as_nanos() > 0);\n    assert!(frame_rate.as_millis() <= 17); // ~16.67ms for 60fps\n}\n\n#[test]\nfn test_event_handling_setup() {\n    // Test event handling configuration\n    \n    // App should handle keyboard events\n    let handles_keyboard = true;\n    assert!(handles_keyboard);\n    \n    // App should handle mouse events\n    let handles_mouse = true;\n    assert!(handles_mouse);\n    \n    // App should handle custom app events\n    let handles_app_events = true;\n    assert!(handles_app_events);\n}\n\n#[test]\nfn test_cleanup_logic() {\n    // Test the cleanup logic that runs at the end of main()\n    \n    // Terminal should be restored\n    let restore_terminal = true;\n    assert!(restore_terminal);\n    \n    // Raw mode should be disabled\n    let disable_raw_mode = true;\n    assert!(disable_raw_mode);\n    \n    // Mouse capture should be disabled\n    let disable_mouse_capture = true;\n    assert!(disable_mouse_capture);\n    \n    // Should leave alternate screen\n    let leave_alternate_screen = true;\n    assert!(leave_alternate_screen);\n}\n\n#[test]\nfn test_version_display() {\n    // Test version information\n    let version = \"0.2.0\"; // Should match the version in main.rs\n    assert!(!version.is_empty());\n    assert!(version.contains(\".\"));\n}\n\n#[test]\nfn test_logging_configuration() {\n    // Test logging setup\n    \n    // App should configure logging\n    let logging_enabled = true;\n    assert!(logging_enabled);\n    \n    // Should use Bevy's log plugin\n    let uses_bevy_logging = true;\n    assert!(uses_bevy_logging);\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","tests","test_review.rs"],"content":"use ai_code_buddy::core::review::{Review, Issue, CommitStatus};\n\n#[test]\nfn test_review_new() {\n    let review = Review {\n        files_count: 5,\n        issues_count: 3,\n        critical_issues: 1,\n        high_issues: 1,\n        medium_issues: 1,\n        low_issues: 0,\n        issues: vec![],\n    };\n    \n    assert_eq!(review.files_count, 5);\n    assert_eq!(review.issues_count, 3);\n    assert_eq!(review.critical_issues, 1);\n    assert_eq!(review.high_issues, 1);\n    assert_eq!(review.medium_issues, 1);\n    assert_eq!(review.low_issues, 0);\n    assert!(review.issues.is_empty());\n}\n\n#[test]\nfn test_issue_creation() {\n    let issue = Issue {\n        file: \"src/main.rs\".to_string(),\n        line: 42,\n        severity: \"High\".to_string(),\n        category: \"Security\".to_string(),\n        description: \"Potential SQL injection vulnerability\".to_string(),\n        commit_status: CommitStatus::Modified,\n    };\n    \n    assert_eq!(issue.file, \"src/main.rs\");\n    assert_eq!(issue.line, 42);\n    assert_eq!(issue.severity, \"High\");\n    assert_eq!(issue.category, \"Security\");\n    assert_eq!(issue.description, \"Potential SQL injection vulnerability\");\n    assert!(matches!(issue.commit_status, CommitStatus::Modified));\n}\n\n#[test]\nfn test_commit_status_variants() {\n    let statuses = vec![\n        CommitStatus::Committed,\n        CommitStatus::Staged,\n        CommitStatus::Modified,\n        CommitStatus::Untracked,\n    ];\n    \n    assert_eq!(statuses.len(), 4);\n}\n\n#[test]\nfn test_review_with_issues() {\n    let issues = vec![\n        Issue {\n            file: \"src/lib.rs\".to_string(),\n            line: 10,\n            severity: \"Critical\".to_string(),\n            category: \"Security\".to_string(),\n            description: \"Buffer overflow detected\".to_string(),\n            commit_status: CommitStatus::Staged,\n        },\n        Issue {\n            file: \"src/utils.rs\".to_string(),\n            line: 25,\n            severity: \"Medium\".to_string(),\n            category: \"Performance\".to_string(),\n            description: \"Inefficient algorithm detected\".to_string(),\n            commit_status: CommitStatus::Modified,\n        },\n    ];\n    \n    let review = Review {\n        files_count: 2,\n        issues_count: 2,\n        critical_issues: 1,\n        high_issues: 0,\n        medium_issues: 1,\n        low_issues: 0,\n        issues: issues.clone(),\n    };\n    \n    assert_eq!(review.issues.len(), 2);\n    assert_eq!(review.issues[0].severity, \"Critical\");\n    assert_eq!(review.issues[1].severity, \"Medium\");\n}\n\n#[test]\nfn test_review_serialization() {\n    let review = Review {\n        files_count: 1,\n        issues_count: 1,\n        critical_issues: 0,\n        high_issues: 1,\n        medium_issues: 0,\n        low_issues: 0,\n        issues: vec![\n            Issue {\n                file: \"test.rs\".to_string(),\n                line: 5,\n                severity: \"High\".to_string(),\n                category: \"Bug\".to_string(),\n                description: \"Possible null pointer dereference\".to_string(),\n                commit_status: CommitStatus::Committed,\n            }\n        ],\n    };\n    \n    let json = serde_json::to_string(&review).unwrap();\n    assert!(json.contains(\"\\\"files_count\\\":1\"));\n    assert!(json.contains(\"\\\"test.rs\\\"\"));\n    \n    let deserialized: Review = serde_json::from_str(&json).unwrap();\n    assert_eq!(deserialized.files_count, review.files_count);\n    assert_eq!(deserialized.issues.len(), review.issues.len());\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","tests","test_theme.rs"],"content":"use ai_code_buddy::theme::Theme;\nuse ratatui::style::{Color, Modifier};\n\n#[test]\nfn test_theme_default() {\n    let theme = Theme::default();\n    \n    assert_eq!(theme.primary, Color::Cyan);\n    assert_eq!(theme.secondary, Color::Blue);\n    assert_eq!(theme.accent, Color::Magenta);\n    assert_eq!(theme.background, Color::Black);\n    assert_eq!(theme.error, Color::Red);\n    assert_eq!(theme.warning, Color::Yellow);\n    assert_eq!(theme.success, Color::Green);\n    assert_eq!(theme.info, Color::Blue);\n    assert_eq!(theme.text_primary, Color::White);\n}\n\n#[test]\nfn test_title_style() {\n    let theme = Theme::default();\n    let style = theme.title_style();\n    \n    assert_eq!(style.fg, Some(Color::Cyan));\n    assert!(style.add_modifier.contains(Modifier::BOLD));\n}\n\n#[test]\nfn test_header_style() {\n    let theme = Theme::default();\n    let style = theme.header_style();\n    \n    assert_eq!(style.fg, Some(Color::Blue));\n    assert!(style.add_modifier.contains(Modifier::BOLD));\n}\n\n#[test]\nfn test_success_style() {\n    let theme = Theme::default();\n    let style = theme.success_style();\n    \n    assert_eq!(style.fg, Some(Color::Green));\n    assert!(style.add_modifier.contains(Modifier::BOLD));\n}\n\n#[test]\nfn test_error_style() {\n    let theme = Theme::default();\n    let style = theme.error_style();\n    \n    assert_eq!(style.fg, Some(Color::Red));\n    assert!(style.add_modifier.contains(Modifier::BOLD));\n}\n\n#[test]\nfn test_warning_style() {\n    let theme = Theme::default();\n    let style = theme.warning_style();\n    \n    assert_eq!(style.fg, Some(Color::Yellow));\n    assert!(style.add_modifier.contains(Modifier::BOLD));\n}\n\n#[test]\nfn test_info_style() {\n    let theme = Theme::default();\n    let style = theme.info_style();\n    \n    assert_eq!(style.fg, Some(Color::Blue));\n}\n\n#[test]\nfn test_selected_style() {\n    let theme = Theme::default();\n    let style = theme.selected_style();\n    \n    assert_eq!(style.bg, Some(Color::Cyan));\n    assert_eq!(style.fg, Some(Color::Black));\n    assert!(style.add_modifier.contains(Modifier::BOLD));\n}\n\n#[test]\nfn test_button_style_normal() {\n    let theme = Theme::default();\n    let style = theme.button_style(false);\n    \n    assert_eq!(style.fg, Some(Color::Cyan));\n}\n\n#[test]\nfn test_button_style_pressed() {\n    let theme = Theme::default();\n    let style = theme.button_style(true);\n    \n    assert_eq!(style.bg, Some(Color::Magenta));\n    assert_eq!(style.fg, Some(Color::Black));\n    assert!(style.add_modifier.contains(Modifier::BOLD));\n}\n\n#[test]\nfn test_button_hover_style() {\n    let theme = Theme::default();\n    let style = theme.button_hover_style();\n    \n    assert_eq!(style.bg, Some(Color::Blue));\n    assert_eq!(style.fg, Some(Color::White));\n    assert!(style.add_modifier.contains(Modifier::BOLD));\n}\n\n#[test]\nfn test_button_normal_style() {\n    let theme = Theme::default();\n    let style = theme.button_normal_style();\n    \n    assert_eq!(style.fg, Some(Color::Cyan));\n    assert!(style.add_modifier.contains(Modifier::DIM));\n}\n\n#[test]\nfn test_primary_style() {\n    let theme = Theme::default();\n    let style = theme.primary_style();\n    \n    assert_eq!(style.fg, Some(Color::Cyan));\n}\n\n#[test]\nfn test_custom_theme() {\n    let custom_theme = Theme {\n        primary: Color::Red,\n        secondary: Color::Green,\n        accent: Color::Blue,\n        background: Color::White,\n        error: Color::Magenta,\n        warning: Color::Cyan,\n        success: Color::Yellow,\n        info: Color::Black,\n        text_primary: Color::Gray,\n    };\n    \n    assert_eq!(custom_theme.primary, Color::Red);\n    assert_eq!(custom_theme.text_primary, Color::Gray);\n    \n    let style = custom_theme.title_style();\n    assert_eq!(style.fg, Some(Color::Red));\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","Volumes","U34 Bolt","Documents","github","ai_code_buddy","tests","test_widget_states.rs"],"content":"use ai_code_buddy::widget_states::analysis::AnalysisWidgetState;\nuse ai_code_buddy::widget_states::overview::{OverviewWidgetState, OverviewComponent, SelectionDirection, RepoInfo};\nuse ai_code_buddy::widget_states::reports::{ReportsWidgetState, ReportFormat, ExportStatus, ViewMode};\nuse ai_code_buddy::core::review::{Review, Issue, CommitStatus};\nuse ratatui::layout::Rect;\n\n#[test]\nfn test_analysis_widget_state_default() {\n    let state = AnalysisWidgetState::default();\n    \n    assert!(!state.is_analyzing);\n    assert_eq!(state.progress, 0.0);\n    assert!(state.current_file.is_empty());\n    assert!(state.review.is_none());\n    assert_eq!(state.selected_issue, 0);\n}\n\n#[test]\nfn test_start_analysis() {\n    let mut state = AnalysisWidgetState {\n        is_analyzing: false,\n        progress: 50.0,\n        current_file: \"old_file.rs\".to_string(),\n        review: Some(Review {\n            files_count: 1,\n            issues_count: 0,\n            critical_issues: 0,\n            high_issues: 0,\n            medium_issues: 0,\n            low_issues: 0,\n            issues: vec![],\n        }),\n        selected_issue: 5,\n    };\n    \n    state.start_analysis();\n    \n    assert!(state.is_analyzing);\n    assert_eq!(state.progress, 0.0);\n    assert!(state.current_file.is_empty());\n    assert!(state.review.is_none());\n    assert_eq!(state.selected_issue, 5); // start_analysis doesn't reset selected_issue\n}\n\n#[test]\nfn test_update_progress() {\n    let mut state = AnalysisWidgetState::default();\n    \n    state.update_progress(0.5, \"src/main.rs\".to_string());\n    \n    assert_eq!(state.progress, 0.5);\n    assert_eq!(state.current_file, \"src/main.rs\");\n}\n\n#[test]\nfn test_complete_analysis() {\n    let mut state = AnalysisWidgetState::default();\n    state.start_analysis();\n    \n    let review = Review {\n        files_count: 2,\n        issues_count: 1,\n        critical_issues: 0,\n        high_issues: 1,\n        medium_issues: 0,\n        low_issues: 0,\n        issues: vec![\n            Issue {\n                file: \"src/test.rs\".to_string(),\n                line: 10,\n                severity: \"High\".to_string(),\n                category: \"Security\".to_string(),\n                description: \"Potential vulnerability\".to_string(),\n                commit_status: CommitStatus::Modified,\n            }\n        ],\n    };\n    \n    state.complete_analysis(review.clone());\n    \n    assert!(!state.is_analyzing);\n    assert_eq!(state.progress, 100.0);\n    assert_eq!(state.current_file, \"\");  // current_file should be cleared\n    assert!(state.review.is_some());\n    assert_eq!(state.review.as_ref().unwrap().files_count, 2);\n    assert_eq!(state.review.as_ref().unwrap().issues_count, 1);\n}\n\n#[test]\nfn test_move_issue_selection_forward() {\n    let mut state = AnalysisWidgetState::default();\n    let review = Review {\n        files_count: 1,\n        issues_count: 3,\n        critical_issues: 0,\n        high_issues: 0,\n        medium_issues: 0,\n        low_issues: 3,\n        issues: vec![\n            Issue {\n                file: \"file1.rs\".to_string(),\n                line: 1,\n                severity: \"Low\".to_string(),\n                category: \"Style\".to_string(),\n                description: \"Issue 1\".to_string(),\n                commit_status: CommitStatus::Modified,\n            },\n            Issue {\n                file: \"file2.rs\".to_string(),\n                line: 2,\n                severity: \"Low\".to_string(),\n                category: \"Style\".to_string(),\n                description: \"Issue 2\".to_string(),\n                commit_status: CommitStatus::Modified,\n            },\n            Issue {\n                file: \"file3.rs\".to_string(),\n                line: 3,\n                severity: \"Low\".to_string(),\n                category: \"Style\".to_string(),\n                description: \"Issue 3\".to_string(),\n                commit_status: CommitStatus::Modified,\n            },\n        ],\n    };\n    \n    state.complete_analysis(review);\n    \n    // Start at issue 0\n    assert_eq!(state.selected_issue, 0);\n    \n    // Move forward\n    state.move_issue_selection(1);\n    assert_eq!(state.selected_issue, 1);\n    \n    // Move forward\n    state.move_issue_selection(1);\n    assert_eq!(state.selected_issue, 2);\n    \n    // Should clamp at max (2)\n    state.move_issue_selection(1);\n    assert_eq!(state.selected_issue, 2);\n}\n\n#[test]\nfn test_move_issue_selection_backward() {\n    let mut state = AnalysisWidgetState::default();\n    let review = Review {\n        files_count: 1,\n        issues_count: 3,\n        critical_issues: 0,\n        high_issues: 0,\n        medium_issues: 0,\n        low_issues: 3,\n        issues: (0..3).map(|i| Issue {\n            file: format!(\"file{}.rs\", i),\n            line: i,\n            severity: \"Low\".to_string(),\n            category: \"Style\".to_string(),\n            description: format!(\"Issue {}\", i),\n            commit_status: CommitStatus::Modified,\n        }).collect(),\n    };\n    \n    state.complete_analysis(review);\n    \n    // Start at issue 0, should clamp at 0\n    state.move_issue_selection(-1);\n    assert_eq!(state.selected_issue, 0);\n    \n    // Move to issue 2 first\n    state.move_issue_selection(2);\n    assert_eq!(state.selected_issue, 2);\n    \n    // Move backward\n    state.move_issue_selection(-1);\n    assert_eq!(state.selected_issue, 1);\n    \n    // Move backward\n    state.move_issue_selection(-1);\n    assert_eq!(state.selected_issue, 0);\n}\n\n#[test]\nfn test_move_issue_selection_empty_issues() {\n    let mut state = AnalysisWidgetState::default();\n    let review = Review {\n        files_count: 1,\n        issues_count: 0,\n        critical_issues: 0,\n        high_issues: 0,\n        medium_issues: 0,\n        low_issues: 0,\n        issues: vec![],\n    };\n    \n    state.complete_analysis(review);\n    \n    // Should stay at 0 when no issues exist\n    state.move_issue_selection(1);\n    assert_eq!(state.selected_issue, 0);\n    \n    state.move_issue_selection(-1);\n    assert_eq!(state.selected_issue, 0);\n}\n\n// === Overview Widget State Tests ===\n\n#[test]\nfn test_overview_widget_state_default() {\n    let state = OverviewWidgetState::default();\n    \n    assert_eq!(state.selected_component, OverviewComponent::StartAnalysis);\n    assert!(state.hovered_component.is_none());\n    assert!(state.registered_components.is_empty());\n    assert!(!state.show_help);\n    assert_eq!(state.repo_info.path, \".\");\n    assert_eq!(state.repo_info.source_branch, \"main\");\n    assert_eq!(state.repo_info.target_branch, \"HEAD\");\n    assert_eq!(state.repo_info.files_to_analyze, 0);\n}\n\n#[test]\nfn test_move_selection_next() {\n    let mut state = OverviewWidgetState::default();\n    \n    assert_eq!(state.selected_component, OverviewComponent::StartAnalysis);\n    \n    state.move_selection(SelectionDirection::Next);\n    assert_eq!(state.selected_component, OverviewComponent::ViewReports);\n    \n    state.move_selection(SelectionDirection::Next);\n    assert_eq!(state.selected_component, OverviewComponent::Settings);\n    \n    state.move_selection(SelectionDirection::Next);\n    assert_eq!(state.selected_component, OverviewComponent::Help);\n    \n    state.move_selection(SelectionDirection::Next);\n    assert_eq!(state.selected_component, OverviewComponent::Exit);\n    \n    // Should wrap around\n    state.move_selection(SelectionDirection::Next);\n    assert_eq!(state.selected_component, OverviewComponent::StartAnalysis);\n}\n\n#[test]\nfn test_move_selection_previous() {\n    let mut state = OverviewWidgetState::default();\n    \n    assert_eq!(state.selected_component, OverviewComponent::StartAnalysis);\n    \n    // Should wrap to end\n    state.move_selection(SelectionDirection::Previous);\n    assert_eq!(state.selected_component, OverviewComponent::Exit);\n    \n    state.move_selection(SelectionDirection::Previous);\n    assert_eq!(state.selected_component, OverviewComponent::Help);\n    \n    state.move_selection(SelectionDirection::Previous);\n    assert_eq!(state.selected_component, OverviewComponent::Settings);\n    \n    state.move_selection(SelectionDirection::Previous);\n    assert_eq!(state.selected_component, OverviewComponent::ViewReports);\n    \n    state.move_selection(SelectionDirection::Previous);\n    assert_eq!(state.selected_component, OverviewComponent::StartAnalysis);\n}\n\n#[test]\nfn test_is_over_component() {\n    let mut state = OverviewWidgetState::default();\n    \n    // Register a component with a rect\n    let rect = Rect::new(5, 5, 10, 3);\n    state.registered_components.insert(OverviewComponent::StartAnalysis, rect);\n    \n    // Test coordinates inside the rect\n    assert!(state.is_over(OverviewComponent::StartAnalysis, 7, 6));\n    assert!(state.is_over(OverviewComponent::StartAnalysis, 5, 5));\n    assert!(state.is_over(OverviewComponent::StartAnalysis, 14, 7));\n    \n    // Test coordinates outside the rect\n    assert!(!state.is_over(OverviewComponent::StartAnalysis, 4, 6));\n    assert!(!state.is_over(OverviewComponent::StartAnalysis, 15, 6));\n    assert!(!state.is_over(OverviewComponent::StartAnalysis, 7, 4));\n    assert!(!state.is_over(OverviewComponent::StartAnalysis, 7, 8));\n    \n    // Test unregistered component\n    assert!(!state.is_over(OverviewComponent::ViewReports, 7, 6));\n}\n\n#[test]\nfn test_update_hover() {\n    let mut state = OverviewWidgetState::default();\n    \n    // Register components with rects\n    state.registered_components.insert(OverviewComponent::StartAnalysis, Rect::new(0, 0, 10, 2));\n    state.registered_components.insert(OverviewComponent::ViewReports, Rect::new(0, 3, 10, 2));\n    state.registered_components.insert(OverviewComponent::Settings, Rect::new(0, 6, 10, 2));\n    \n    // Test hovering over first component\n    state.update_hover(5, 1);\n    assert_eq!(state.hovered_component, Some(OverviewComponent::StartAnalysis));\n    \n    // Test hovering over second component\n    state.update_hover(5, 4);\n    assert_eq!(state.hovered_component, Some(OverviewComponent::ViewReports));\n    \n    // Test hovering over third component\n    state.update_hover(5, 7);\n    assert_eq!(state.hovered_component, Some(OverviewComponent::Settings));\n    \n    // Test hovering over empty area\n    state.update_hover(15, 1);\n    assert!(state.hovered_component.is_none());\n    \n    state.update_hover(5, 10);\n    assert!(state.hovered_component.is_none());\n}\n\n#[test]\nfn test_repo_info_update() {\n    let mut state = OverviewWidgetState::default();\n    \n    state.repo_info = RepoInfo {\n        path: \"/path/to/repo\".to_string(),\n        source_branch: \"feature/new-feature\".to_string(),\n        target_branch: \"develop\".to_string(),\n        files_to_analyze: 42,\n    };\n    \n    assert_eq!(state.repo_info.path, \"/path/to/repo\");\n    assert_eq!(state.repo_info.source_branch, \"feature/new-feature\");\n    assert_eq!(state.repo_info.target_branch, \"develop\");\n    assert_eq!(state.repo_info.files_to_analyze, 42);\n}\n\n// === Reports Widget State Tests ===\n\n#[test]\nfn test_reports_widget_state_default() {\n    let state = ReportsWidgetState::default();\n    \n    assert!(state.review.is_none());\n    assert_eq!(state.selected_format, ReportFormat::Summary);\n    assert!(matches!(state.export_status, ExportStatus::None));\n    assert!(state.generated_report.is_none());\n    assert_eq!(state.view_mode, ViewMode::Selection);\n}\n\n#[test]\nfn test_set_review() {\n    let mut state = ReportsWidgetState::default();\n    let review = Review {\n        files_count: 5,\n        issues_count: 3,\n        critical_issues: 1,\n        high_issues: 1,\n        medium_issues: 1,\n        low_issues: 0,\n        issues: vec![\n            Issue {\n                file: \"src/test.rs\".to_string(),\n                line: 10,\n                severity: \"Critical\".to_string(),\n                category: \"Security\".to_string(),\n                description: \"SQL injection vulnerability\".to_string(),\n                commit_status: CommitStatus::Modified,\n            }\n        ],\n    };\n    \n    state.set_review(review.clone());\n    \n    assert!(state.review.is_some());\n    assert_eq!(state.review.as_ref().unwrap().files_count, 5);\n    assert_eq!(state.review.as_ref().unwrap().issues_count, 3);\n}\n\n#[test]\nfn test_next_format() {\n    let mut state = ReportsWidgetState::default();\n    \n    assert_eq!(state.selected_format, ReportFormat::Summary);\n    \n    state.next_format();\n    assert_eq!(state.selected_format, ReportFormat::Detailed);\n    \n    state.next_format();\n    assert_eq!(state.selected_format, ReportFormat::Json);\n    \n    state.next_format();\n    assert_eq!(state.selected_format, ReportFormat::Markdown);\n    \n    // Should wrap around\n    state.next_format();\n    assert_eq!(state.selected_format, ReportFormat::Summary);\n}\n\n#[test]\nfn test_previous_format() {\n    let mut state = ReportsWidgetState::default();\n    \n    assert_eq!(state.selected_format, ReportFormat::Summary);\n    \n    // Should wrap to end\n    state.previous_format();\n    assert_eq!(state.selected_format, ReportFormat::Markdown);\n    \n    state.previous_format();\n    assert_eq!(state.selected_format, ReportFormat::Json);\n    \n    state.previous_format();\n    assert_eq!(state.selected_format, ReportFormat::Detailed);\n    \n    state.previous_format();\n    assert_eq!(state.selected_format, ReportFormat::Summary);\n}\n\n#[test]\nfn test_export_lifecycle() {\n    let mut state = ReportsWidgetState::default();\n    \n    // Start with no export\n    assert!(matches!(state.export_status, ExportStatus::None));\n    \n    // Start export\n    state.start_export(\"json\".to_string());\n    assert!(matches!(state.export_status, ExportStatus::Exporting(_)));\n    if let ExportStatus::Exporting(format) = &state.export_status {\n        assert_eq!(format, \"json\");\n    }\n    \n    // Complete export\n    state.complete_export(\"/path/to/report.json\".to_string());\n    assert!(matches!(state.export_status, ExportStatus::Success(_)));\n    if let ExportStatus::Success(path) = &state.export_status {\n        assert_eq!(path, \"/path/to/report.json\");\n    }\n}\n\n#[test]\nfn test_generate_report_with_review() {\n    let mut state = ReportsWidgetState::default();\n    let review = Review {\n        files_count: 2,\n        issues_count: 2,\n        critical_issues: 1,\n        high_issues: 0,\n        medium_issues: 1,\n        low_issues: 0,\n        issues: vec![\n            Issue {\n                file: \"src/auth.rs\".to_string(),\n                line: 42,\n                severity: \"Critical\".to_string(),\n                category: \"Security\".to_string(),\n                description: \"Hardcoded password\".to_string(),\n                commit_status: CommitStatus::Modified,\n            },\n            Issue {\n                file: \"src/utils.rs\".to_string(),\n                line: 15,\n                severity: \"Medium\".to_string(),\n                category: \"Performance\".to_string(),\n                description: \"Inefficient loop\".to_string(),\n                commit_status: CommitStatus::Untracked,\n            }\n        ],\n    };\n    \n    state.set_review(review);\n    \n    // Generate summary report\n    state.selected_format = ReportFormat::Summary;\n    let report = state.generate_report();\n    \n    assert!(report.is_some());\n    assert!(state.generated_report.is_some());\n    assert_eq!(state.view_mode, ViewMode::Report);\n    \n    let report_content = report.unwrap();\n    assert!(report_content.contains(\"AI Code Review Summary\"));\n    assert!(report_content.contains(\"Files analyzed: 2\"));\n    assert!(report_content.contains(\"Total issues found: 2\"));\n}\n\n#[test]\nfn test_generate_report_without_review() {\n    let mut state = ReportsWidgetState::default();\n    \n    let report = state.generate_report();\n    \n    assert!(report.is_none());\n    assert!(state.generated_report.is_none());\n    assert_eq!(state.view_mode, ViewMode::Selection);\n}\n\n#[test]\nfn test_view_mode_transitions() {\n    let mut state = ReportsWidgetState::default();\n    let review = Review {\n        files_count: 1,\n        issues_count: 0,\n        critical_issues: 0,\n        high_issues: 0,\n        medium_issues: 0,\n        low_issues: 0,\n        issues: vec![],\n    };\n    \n    state.set_review(review);\n    \n    // Start in selection mode\n    assert_eq!(state.view_mode, ViewMode::Selection);\n    \n    // Generate report switches to report mode\n    state.generate_report();\n    assert_eq!(state.view_mode, ViewMode::Report);\n    \n    // Back to selection\n    state.back_to_selection();\n    assert_eq!(state.view_mode, ViewMode::Selection);\n}\n","traces":[],"covered":0,"coverable":0}],"coverage":10.669191919191919,"covered":169,"coverable":1584}